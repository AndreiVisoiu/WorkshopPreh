
OsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000785c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a8c  08007a8c  00021c7c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a8c  08007a8c  00021c7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a8c  08007a8c  00021c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001c7c  20000000  08007a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c4c  20001c7c  08009710  00021c7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038c8  08009710  000238c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00021c7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af81  00000000  00000000  00021ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366e  00000000  00000000  0003cc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00040298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  000419d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dc7  00000000  00000000  00042fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a077  00000000  00000000  00046d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6f08  00000000  00000000  00060e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117d16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000581c  00000000  00000000  00117d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20001c7c 	.word	0x20001c7c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007904 	.word	0x08007904

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20001c80 	.word	0x20001c80
 8000104:	08007904 	.word	0x08007904

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <st7565_write_buffer>:
#define CMD(c)        do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 0 ); st7565_sendbyte( c ); } while (0);
#define DATA(d)       do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 ); st7565_sendbyte( d ); } while (0);
#define DELAY(mS)     do { HAL_Delay( mS ); } while(0);

//Renders the buffer contents
void st7565_write_buffer(uint8_t *buffer) {
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 80003fc:	230e      	movs	r3, #14
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e060      	b.n	80004c8 <st7565_write_buffer+0xd4>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 8000406:	4b35      	ldr	r3, [pc, #212]	; (80004dc <st7565_write_buffer+0xe8>)
 8000408:	2200      	movs	r2, #0
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	0018      	movs	r0, r3
 800040e:	f002 fafb 	bl	8002a08 <HAL_GPIO_WritePin>
 8000412:	230e      	movs	r3, #14
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4a31      	ldr	r2, [pc, #196]	; (80004e0 <st7565_write_buffer+0xec>)
 800041a:	5cd3      	ldrb	r3, [r2, r3]
 800041c:	2250      	movs	r2, #80	; 0x50
 800041e:	4252      	negs	r2, r2
 8000420:	4313      	orrs	r3, r2
 8000422:	b2db      	uxtb	r3, r3
 8000424:	0018      	movs	r0, r3
 8000426:	f000 f85d 	bl	80004e4 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 800042a:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <st7565_write_buffer+0xe8>)
 800042c:	2200      	movs	r2, #0
 800042e:	2180      	movs	r1, #128	; 0x80
 8000430:	0018      	movs	r0, r3
 8000432:	f002 fae9 	bl	8002a08 <HAL_GPIO_WritePin>
 8000436:	2000      	movs	r0, #0
 8000438:	f000 f854 	bl	80004e4 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 800043c:	4b27      	ldr	r3, [pc, #156]	; (80004dc <st7565_write_buffer+0xe8>)
 800043e:	2200      	movs	r2, #0
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0018      	movs	r0, r3
 8000444:	f002 fae0 	bl	8002a08 <HAL_GPIO_WritePin>
 8000448:	2010      	movs	r0, #16
 800044a:	f000 f84b 	bl	80004e4 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <st7565_write_buffer+0xe8>)
 8000450:	2200      	movs	r2, #0
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	0018      	movs	r0, r3
 8000456:	f002 fad7 	bl	8002a08 <HAL_GPIO_WritePin>
 800045a:	20e0      	movs	r0, #224	; 0xe0
 800045c:	f000 f842 	bl	80004e4 <st7565_sendbyte>
		DATA(0xff);
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <st7565_write_buffer+0xe8>)
 8000462:	2201      	movs	r2, #1
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	0018      	movs	r0, r3
 8000468:	f002 face 	bl	8002a08 <HAL_GPIO_WritePin>
 800046c:	20ff      	movs	r0, #255	; 0xff
 800046e:	f000 f839 	bl	80004e4 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8000472:	230f      	movs	r3, #15
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	e019      	b.n	80004b0 <st7565_write_buffer+0xbc>
			DATA(buffer[(128 * p) + c]);
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <st7565_write_buffer+0xe8>)
 800047e:	2201      	movs	r2, #1
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0018      	movs	r0, r3
 8000484:	f002 fac0 	bl	8002a08 <HAL_GPIO_WritePin>
 8000488:	230e      	movs	r3, #14
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	01da      	lsls	r2, r3, #7
 8000490:	240f      	movs	r4, #15
 8000492:	193b      	adds	r3, r7, r4
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	18d3      	adds	r3, r2, r3
 8000498:	001a      	movs	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	189b      	adds	r3, r3, r2
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 f81f 	bl	80004e4 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	3201      	adds	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
 80004b0:	230f      	movs	r3, #15
 80004b2:	18fb      	adds	r3, r7, r3
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	dadf      	bge.n	800047c <st7565_write_buffer+0x88>
	for (p = 0; p < 8; p++) {
 80004bc:	210e      	movs	r1, #14
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	3201      	adds	r2, #1
 80004c6:	701a      	strb	r2, [r3, #0]
 80004c8:	230e      	movs	r3, #14
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d999      	bls.n	8000406 <st7565_write_buffer+0x12>
		}
	}
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b005      	add	sp, #20
 80004da:	bd90      	pop	{r4, r7, pc}
 80004dc:	48000800 	.word	0x48000800
 80004e0:	20000400 	.word	0x20000400

080004e4 <st7565_sendbyte>:

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	0002      	movs	r2, r0
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 80004f0:	1df9      	adds	r1, r7, #7
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <st7565_sendbyte+0x20>)
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2201      	movs	r2, #1
 80004f8:	f003 f95c 	bl	80037b4 <HAL_SPI_Transmit>
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20001d1c 	.word	0x20001d1c

08000508 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	0059      	lsls	r1, r3, #1
 8000510:	2390      	movs	r3, #144	; 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2201      	movs	r2, #1
 8000516:	0018      	movs	r0, r3
 8000518:	f002 fa76 	bl	8002a08 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 800051c:	4b4e      	ldr	r3, [pc, #312]	; (8000658 <st7565_init+0x150>)
 800051e:	2201      	movs	r2, #1
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0018      	movs	r0, r3
 8000524:	f002 fa70 	bl	8002a08 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	0099      	lsls	r1, r3, #2
 800052c:	2390      	movs	r3, #144	; 0x90
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2201      	movs	r2, #1
 8000532:	0018      	movs	r0, r3
 8000534:	f002 fa68 	bl	8002a08 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8000538:	4b48      	ldr	r3, [pc, #288]	; (800065c <st7565_init+0x154>)
 800053a:	2201      	movs	r2, #1
 800053c:	2140      	movs	r1, #64	; 0x40
 800053e:	0018      	movs	r0, r3
 8000540:	f002 fa62 	bl	8002a08 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 8000544:	4b45      	ldr	r3, [pc, #276]	; (800065c <st7565_init+0x154>)
 8000546:	2200      	movs	r2, #0
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	0018      	movs	r0, r3
 800054c:	f002 fa5c 	bl	8002a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	0099      	lsls	r1, r3, #2
 8000554:	2390      	movs	r3, #144	; 0x90
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	2200      	movs	r2, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f002 fa54 	bl	8002a08 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000560:	23fa      	movs	r3, #250	; 0xfa
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	0018      	movs	r0, r3
 8000566:	f001 fa2f 	bl	80019c8 <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	0099      	lsls	r1, r3, #2
 800056e:	2390      	movs	r3, #144	; 0x90
 8000570:	05db      	lsls	r3, r3, #23
 8000572:	2201      	movs	r2, #1
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fa47 	bl	8002a08 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 800057a:	4b37      	ldr	r3, [pc, #220]	; (8000658 <st7565_init+0x150>)
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	0018      	movs	r0, r3
 8000582:	f002 fa41 	bl	8002a08 <HAL_GPIO_WritePin>
 8000586:	20a3      	movs	r0, #163	; 0xa3
 8000588:	f7ff ffac 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 800058c:	4b32      	ldr	r3, [pc, #200]	; (8000658 <st7565_init+0x150>)
 800058e:	2200      	movs	r2, #0
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0018      	movs	r0, r3
 8000594:	f002 fa38 	bl	8002a08 <HAL_GPIO_WritePin>
 8000598:	20a0      	movs	r0, #160	; 0xa0
 800059a:	f7ff ffa3 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 800059e:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <st7565_init+0x150>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	0018      	movs	r0, r3
 80005a6:	f002 fa2f 	bl	8002a08 <HAL_GPIO_WritePin>
 80005aa:	20c0      	movs	r0, #192	; 0xc0
 80005ac:	f7ff ff9a 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <st7565_init+0x150>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 fa26 	bl	8002a08 <HAL_GPIO_WritePin>
 80005bc:	2040      	movs	r0, #64	; 0x40
 80005be:	f7ff ff91 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <st7565_init+0x150>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 fa1d 	bl	8002a08 <HAL_GPIO_WritePin>
 80005ce:	202c      	movs	r0, #44	; 0x2c
 80005d0:	f7ff ff88 	bl	80004e4 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 80005d4:	2032      	movs	r0, #50	; 0x32
 80005d6:	f001 f9f7 	bl	80019c8 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <st7565_init+0x150>)
 80005dc:	2200      	movs	r2, #0
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fa11 	bl	8002a08 <HAL_GPIO_WritePin>
 80005e6:	202e      	movs	r0, #46	; 0x2e
 80005e8:	f7ff ff7c 	bl	80004e4 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 80005ec:	2032      	movs	r0, #50	; 0x32
 80005ee:	f001 f9eb 	bl	80019c8 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <st7565_init+0x150>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0018      	movs	r0, r3
 80005fa:	f002 fa05 	bl	8002a08 <HAL_GPIO_WritePin>
 80005fe:	202f      	movs	r0, #47	; 0x2f
 8000600:	f7ff ff70 	bl	80004e4 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8000604:	200a      	movs	r0, #10
 8000606:	f001 f9df 	bl	80019c8 <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <st7565_init+0x150>)
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0018      	movs	r0, r3
 8000612:	f002 f9f9 	bl	8002a08 <HAL_GPIO_WritePin>
 8000616:	2026      	movs	r0, #38	; 0x26
 8000618:	f7ff ff64 	bl	80004e4 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <st7565_init+0x150>)
 800061e:	2200      	movs	r2, #0
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0018      	movs	r0, r3
 8000624:	f002 f9f0 	bl	8002a08 <HAL_GPIO_WritePin>
 8000628:	20af      	movs	r0, #175	; 0xaf
 800062a:	f7ff ff5b 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <st7565_init+0x150>)
 8000630:	2200      	movs	r2, #0
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	0018      	movs	r0, r3
 8000636:	f002 f9e7 	bl	8002a08 <HAL_GPIO_WritePin>
 800063a:	20a4      	movs	r0, #164	; 0xa4
 800063c:	f7ff ff52 	bl	80004e4 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f81d 	bl	8000680 <st7565_set_brightness>
 	st7565_clear_screen();
 8000646:	f000 f83f 	bl	80006c8 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <st7565_init+0x158>)
 800064c:	0018      	movs	r0, r3
 800064e:	f000 f897 	bl	8000780 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	48000800 	.word	0x48000800
 800065c:	48000400 	.word	0x48000400
 8000660:	20000000 	.word	0x20000000

08000664 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	0059      	lsls	r1, r3, #1
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	2201      	movs	r2, #1
 8000672:	0018      	movs	r0, r3
 8000674:	f002 f9c8 	bl	8002a08 <HAL_GPIO_WritePin>
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	0002      	movs	r2, r0
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <st7565_set_brightness+0x44>)
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0018      	movs	r0, r3
 8000694:	f002 f9b8 	bl	8002a08 <HAL_GPIO_WritePin>
 8000698:	2081      	movs	r0, #129	; 0x81
 800069a:	f7ff ff23 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <st7565_set_brightness+0x44>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 f9af 	bl	8002a08 <HAL_GPIO_WritePin>
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	223f      	movs	r2, #63	; 0x3f
 80006b0:	4013      	ands	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff ff15 	bl	80004e4 <st7565_sendbyte>
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	48000800 	.word	0x48000800

080006c8 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	e049      	b.n	800076a <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <st7565_clear_screen+0xb4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 f993 	bl	8002a08 <HAL_GPIO_WritePin>
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2250      	movs	r2, #80	; 0x50
 80006e8:	4252      	negs	r2, r2
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff fef8 	bl	80004e4 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 80006f4:	1dbb      	adds	r3, r7, #6
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e02d      	b.n	8000758 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <st7565_clear_screen+0xb4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	0018      	movs	r0, r3
 8000704:	f002 f980 	bl	8002a08 <HAL_GPIO_WritePin>
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	220f      	movs	r2, #15
 800070e:	4013      	ands	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff fee6 	bl	80004e4 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <st7565_clear_screen+0xb4>)
 800071a:	2200      	movs	r2, #0
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0018      	movs	r0, r3
 8000720:	f002 f972 	bl	8002a08 <HAL_GPIO_WritePin>
 8000724:	1dbb      	adds	r3, r7, #6
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	091b      	lsrs	r3, r3, #4
 800072a:	b2db      	uxtb	r3, r3
 800072c:	b25b      	sxtb	r3, r3
 800072e:	2210      	movs	r2, #16
 8000730:	4313      	orrs	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff fed4 	bl	80004e4 <st7565_sendbyte>
			DATA(0x0);
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <st7565_clear_screen+0xb4>)
 800073e:	2201      	movs	r2, #1
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	0018      	movs	r0, r3
 8000744:	f002 f960 	bl	8002a08 <HAL_GPIO_WritePin>
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff fecb 	bl	80004e4 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 800074e:	1dbb      	adds	r3, r7, #6
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	1dbb      	adds	r3, r7, #6
 8000754:	3201      	adds	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	1dbb      	adds	r3, r7, #6
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b80      	cmp	r3, #128	; 0x80
 800075e:	d9cd      	bls.n	80006fc <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	3201      	adds	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d9b1      	bls.n	80006d6 <st7565_clear_screen+0xe>
		}
	}
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	48000800 	.word	0x48000800

08000780 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	00da      	lsls	r2, r3, #3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f006 ffe2 	bl	800775a <memset>
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}

0800079e <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 800079e:	b590      	push	{r4, r7, lr}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	000c      	movs	r4, r1
 80007a8:	0010      	movs	r0, r2
 80007aa:	0019      	movs	r1, r3
 80007ac:	1cfb      	adds	r3, r7, #3
 80007ae:	1c22      	adds	r2, r4, #0
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	1cbb      	adds	r3, r7, #2
 80007b4:	1c02      	adds	r2, r0, #0
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	1c7b      	adds	r3, r7, #1
 80007ba:	1c0a      	adds	r2, r1, #0
 80007bc:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 80007be:	1cfb      	adds	r3, r7, #3
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db51      	blt.n	800086c <st7565_setpixel+0xce>
 80007c8:	1cbb      	adds	r3, r7, #2
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b3f      	cmp	r3, #63	; 0x3f
 80007ce:	d84d      	bhi.n	800086c <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 80007d0:	1c7b      	adds	r3, r7, #1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d023      	beq.n	8000820 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 80007d8:	1cfb      	adds	r3, r7, #3
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	1cbb      	adds	r3, r7, #2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	b2d8      	uxtb	r0, r3
 80007e4:	0003      	movs	r3, r0
 80007e6:	01db      	lsls	r3, r3, #7
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	001a      	movs	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	189b      	adds	r3, r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b25a      	sxtb	r2, r3
 80007f4:	1cbb      	adds	r3, r7, #2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	43db      	mvns	r3, r3
 80007fa:	2107      	movs	r1, #7
 80007fc:	400b      	ands	r3, r1
 80007fe:	2101      	movs	r1, #1
 8000800:	4099      	lsls	r1, r3
 8000802:	000b      	movs	r3, r1
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b259      	sxtb	r1, r3
 800080a:	1cfb      	adds	r3, r7, #3
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	0003      	movs	r3, r0
 8000810:	01db      	lsls	r3, r3, #7
 8000812:	18d3      	adds	r3, r2, r3
 8000814:	001a      	movs	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	189b      	adds	r3, r3, r2
 800081a:	b2ca      	uxtb	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e026      	b.n	800086e <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000820:	1cfb      	adds	r3, r7, #3
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	1cbb      	adds	r3, r7, #2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	b2d8      	uxtb	r0, r3
 800082c:	0003      	movs	r3, r0
 800082e:	01db      	lsls	r3, r3, #7
 8000830:	18d3      	adds	r3, r2, r3
 8000832:	001a      	movs	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	189b      	adds	r3, r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b25b      	sxtb	r3, r3
 800083c:	1cba      	adds	r2, r7, #2
 800083e:	7812      	ldrb	r2, [r2, #0]
 8000840:	43d2      	mvns	r2, r2
 8000842:	2107      	movs	r1, #7
 8000844:	400a      	ands	r2, r1
 8000846:	2101      	movs	r1, #1
 8000848:	4091      	lsls	r1, r2
 800084a:	000a      	movs	r2, r1
 800084c:	b252      	sxtb	r2, r2
 800084e:	43d2      	mvns	r2, r2
 8000850:	b252      	sxtb	r2, r2
 8000852:	4013      	ands	r3, r2
 8000854:	b259      	sxtb	r1, r3
 8000856:	1cfb      	adds	r3, r7, #3
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	0003      	movs	r3, r0
 800085c:	01db      	lsls	r3, r3, #7
 800085e:	18d3      	adds	r3, r2, r3
 8000860:	001a      	movs	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	189b      	adds	r3, r3, r2
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e000      	b.n	800086e <st7565_setpixel+0xd0>
		return;
 800086c:	46c0      	nop			; (mov r8, r8)
}
 800086e:	46bd      	mov	sp, r7
 8000870:	b003      	add	sp, #12
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <st7565_drawbitmap>:

//draw pixel at *x/*y from *bitmap
void st7565_drawbitmap(uint8_t *buff, uint8_t x, uint8_t y,
		const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color) {
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	0008      	movs	r0, r1
 800087e:	0011      	movs	r1, r2
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	230b      	movs	r3, #11
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	1c02      	adds	r2, r0, #0
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	230a      	movs	r3, #10
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	1c0a      	adds	r2, r1, #0
 8000890:	701a      	strb	r2, [r3, #0]
	uint8_t j, i;
	for (j = 0; j < h; j++) {
 8000892:	2317      	movs	r3, #23
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e04c      	b.n	8000936 <st7565_drawbitmap+0xc2>
		for (i = 0; i < w; i++) {
 800089c:	2316      	movs	r3, #22
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	e037      	b.n	8000916 <st7565_drawbitmap+0xa2>
			if (*(bitmap + i + (j / 8) * w) & (1 << (j % 8))) {
 80008a6:	2416      	movs	r4, #22
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	2017      	movs	r0, #23
 80008ae:	183b      	adds	r3, r7, r0
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	0019      	movs	r1, r3
 80008b8:	2320      	movs	r3, #32
 80008ba:	2508      	movs	r5, #8
 80008bc:	195b      	adds	r3, r3, r5
 80008be:	19db      	adds	r3, r3, r7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	434b      	muls	r3, r1
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	0019      	movs	r1, r3
 80008ce:	183b      	adds	r3, r7, r0
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2207      	movs	r2, #7
 80008d4:	4013      	ands	r3, r2
 80008d6:	4119      	asrs	r1, r3
 80008d8:	000b      	movs	r3, r1
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	d014      	beq.n	800090a <st7565_drawbitmap+0x96>
				st7565_setpixel(buff, x + i, y + j, color);
 80008e0:	230b      	movs	r3, #11
 80008e2:	18fa      	adds	r2, r7, r3
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	b2d9      	uxtb	r1, r3
 80008ee:	230a      	movs	r3, #10
 80008f0:	18fa      	adds	r2, r7, r3
 80008f2:	183b      	adds	r3, r7, r0
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	2328      	movs	r3, #40	; 0x28
 80008fe:	195b      	adds	r3, r3, r5
 8000900:	19db      	adds	r3, r3, r7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff ff4a 	bl	800079e <st7565_setpixel>
		for (i = 0; i < w; i++) {
 800090a:	2116      	movs	r1, #22
 800090c:	187b      	adds	r3, r7, r1
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	187b      	adds	r3, r7, r1
 8000912:	3201      	adds	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	2316      	movs	r3, #22
 8000918:	18fa      	adds	r2, r7, r3
 800091a:	2320      	movs	r3, #32
 800091c:	2108      	movs	r1, #8
 800091e:	185b      	adds	r3, r3, r1
 8000920:	19db      	adds	r3, r3, r7
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	429a      	cmp	r2, r3
 8000928:	d3bd      	bcc.n	80008a6 <st7565_drawbitmap+0x32>
	for (j = 0; j < h; j++) {
 800092a:	2117      	movs	r1, #23
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	187b      	adds	r3, r7, r1
 8000932:	3201      	adds	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	2317      	movs	r3, #23
 8000938:	18fa      	adds	r2, r7, r3
 800093a:	2324      	movs	r3, #36	; 0x24
 800093c:	2108      	movs	r1, #8
 800093e:	185b      	adds	r3, r3, r1
 8000940:	19db      	adds	r3, r3, r7
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	429a      	cmp	r2, r3
 8000948:	d3a8      	bcc.n	800089c <st7565_drawbitmap+0x28>
			}
		}
	}
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b006      	add	sp, #24
 8000952:	bdb0      	pop	{r4, r5, r7, pc}

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 ffd2 	bl	8001900 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f846 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 fa32 	bl	8000dc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f000 fa0a 	bl	8000d7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000968:	f000 f9d8 	bl	8000d1c <MX_USART2_UART_Init>
  MX_ADC_Init();
 800096c:	f000 f8a4 	bl	8000ab8 <MX_ADC_Init>
  MX_TIM3_Init();
 8000970:	f000 f954 	bl	8000c1c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000974:	f000 f914 	bl	8000ba0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Porneste PWM pe timer 3 canal 4 (pin PB1)
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <main+0x70>)
 800097a:	210c      	movs	r1, #12
 800097c:	0018      	movs	r0, r3
 800097e:	f003 fa8f 	bl	8003ea0 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000982:	f004 fc73 	bl	800526c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controlStergato */
  controlStergatoHandle = osThreadNew(Stergatoare, NULL, &controlStergato_attributes);
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <main+0x74>)
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <main+0x78>)
 800098a:	2100      	movs	r1, #0
 800098c:	0018      	movs	r0, r3
 800098e:	f004 fcc7 	bl	8005320 <osThreadNew>
 8000992:	0002      	movs	r2, r0
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <main+0x7c>)
 8000996:	601a      	str	r2, [r3, #0]

  /* creation of readJoystick */
  readJoystickHandle = osThreadNew(ReadJoystick, NULL, &readJoystick_attributes);
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <main+0x80>)
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <main+0x84>)
 800099c:	2100      	movs	r1, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f004 fcbe 	bl	8005320 <osThreadNew>
 80009a4:	0002      	movs	r2, r0
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <main+0x88>)
 80009a8:	601a      	str	r2, [r3, #0]

  /* creation of controlLCD */
  controlLCDHandle = osThreadNew(ControlLCD, NULL, &controlLCD_attributes);
 80009aa:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <main+0x8c>)
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <main+0x90>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f004 fcb5 	bl	8005320 <osThreadNew>
 80009b6:	0002      	movs	r2, r0
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <main+0x94>)
 80009ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009bc:	f004 fc82 	bl	80052c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <main+0x6c>
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	20001d80 	.word	0x20001d80
 80009c8:	08007980 	.word	0x08007980
 80009cc:	08000f01 	.word	0x08000f01
 80009d0:	20001e90 	.word	0x20001e90
 80009d4:	080079a4 	.word	0x080079a4
 80009d8:	08001141 	.word	0x08001141
 80009dc:	20001e94 	.word	0x20001e94
 80009e0:	080079c8 	.word	0x080079c8
 80009e4:	080012b9 	.word	0x080012b9
 80009e8:	20001e98 	.word	0x20001e98

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b099      	sub	sp, #100	; 0x64
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	242c      	movs	r4, #44	; 0x2c
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	0018      	movs	r0, r3
 80009f8:	2334      	movs	r3, #52	; 0x34
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f006 feac 	bl	800775a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a02:	231c      	movs	r3, #28
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	0018      	movs	r0, r3
 8000a08:	2310      	movs	r3, #16
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f006 fea4 	bl	800775a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a12:	003b      	movs	r3, r7
 8000a14:	0018      	movs	r0, r3
 8000a16:	231c      	movs	r3, #28
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f006 fe9d 	bl	800775a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000a20:	0021      	movs	r1, r4
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2211      	movs	r2, #17
 8000a26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2201      	movs	r2, #1
 8000a32:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2210      	movs	r2, #16
 8000a38:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	0252      	lsls	r2, r2, #9
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	22a0      	movs	r2, #160	; 0xa0
 8000a4c:	0392      	lsls	r2, r2, #14
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2201      	movs	r2, #1
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 fff3 	bl	8002a44 <HAL_RCC_OscConfig>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a62:	f000 fd01 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	211c      	movs	r1, #28
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2202      	movs	r2, #2
 8000a72:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2101      	movs	r1, #1
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 fb63 	bl	8003150 <HAL_RCC_ClockConfig>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a8e:	f000 fceb 	bl	8001468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a92:	003b      	movs	r3, r7
 8000a94:	2202      	movs	r2, #2
 8000a96:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a98:	003b      	movs	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f002 fccf 	bl	8003444 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aaa:	f000 fcdd 	bl	8001468 <Error_Handler>
  }
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b019      	add	sp, #100	; 0x64
 8000ab4:	bd90      	pop	{r4, r7, pc}
	...

08000ab8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f006 fe47 	bl	800775a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000acc:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000ace:	4a33      	ldr	r2, [pc, #204]	; (8000b9c <MX_ADC_Init+0xe4>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aea:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000af0:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000b0a:	22c2      	movs	r2, #194	; 0xc2
 8000b0c:	32ff      	adds	r2, #255	; 0xff
 8000b0e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000b18:	2224      	movs	r2, #36	; 0x24
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 ff72 	bl	8001a10 <HAL_ADC_Init>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 fc9a 	bl	8001468 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	0152      	lsls	r2, r2, #5
 8000b40:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2207      	movs	r2, #7
 8000b46:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b48:	1d3a      	adds	r2, r7, #4
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 f938 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000b58:	f000 fc86 	bl	8001468 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	220d      	movs	r2, #13
 8000b60:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b62:	1d3a      	adds	r2, r7, #4
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 f92b 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000b72:	f000 fc79 	bl	8001468 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	220e      	movs	r2, #14
 8000b7a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b7c:	1d3a      	adds	r2, r7, #4
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_ADC_Init+0xe0>)
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 f91e 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000b8c:	f000 fc6c 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b004      	add	sp, #16
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20001c98 	.word	0x20001c98
 8000b9c:	40012400 	.word	0x40012400

08000ba0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <MX_SPI1_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bac:	2282      	movs	r2, #130	; 0x82
 8000bae:	0052      	lsls	r2, r2, #1
 8000bb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bba:	22e0      	movs	r2, #224	; 0xe0
 8000bbc:	00d2      	lsls	r2, r2, #3
 8000bbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bd6:	2230      	movs	r2, #48	; 0x30
 8000bd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bee:	2207      	movs	r2, #7
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f002 fd1f 	bl	8003644 <HAL_SPI_Init>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f000 fc2d 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20001d1c 	.word	0x20001d1c
 8000c18:	40013000 	.word	0x40013000

08000c1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	2328      	movs	r3, #40	; 0x28
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	0018      	movs	r0, r3
 8000c28:	2310      	movs	r3, #16
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f006 fd94 	bl	800775a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	2320      	movs	r3, #32
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	0018      	movs	r0, r3
 8000c38:	2308      	movs	r3, #8
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f006 fd8c 	bl	800775a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	0018      	movs	r0, r3
 8000c46:	231c      	movs	r3, #28
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f006 fd85 	bl	800775a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c50:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000c52:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <MX_TIM3_Init+0xf8>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000c58:	222f      	movs	r2, #47	; 0x2f
 8000c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000c64:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <MX_TIM3_Init+0xfc>)
 8000c66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f003 f86a 	bl	8003d50 <HAL_TIM_Base_Init>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c80:	f000 fbf2 	bl	8001468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	2128      	movs	r1, #40	; 0x28
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	0152      	lsls	r2, r2, #5
 8000c8c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c8e:	187a      	adds	r2, r7, r1
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f003 fa81 	bl	800419c <HAL_TIM_ConfigClockSource>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c9e:	f000 fbe3 	bl	8001468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f003 f8a3 	bl	8003df0 <HAL_TIM_PWM_Init>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000cae:	f000 fbdb 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cc0:	187a      	adds	r2, r7, r1
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f003 fe76 	bl	80049b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000cd0:	f000 fbca 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2260      	movs	r2, #96	; 0x60
 8000cd8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cec:	1d39      	adds	r1, r7, #4
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000cf0:	220c      	movs	r2, #12
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f003 f98c 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000cfc:	f000 fbb4 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <MX_TIM3_Init+0xf4>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 fd14 	bl	8001730 <HAL_TIM_MspPostInit>

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b00e      	add	sp, #56	; 0x38
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20001d80 	.word	0x20001d80
 8000d14:	40000400 	.word	0x40000400
 8000d18:	00004e1f 	.word	0x00004e1f

08000d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <MX_USART2_UART_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d28:	22e1      	movs	r2, #225	; 0xe1
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f003 fe87 	bl	8004a74 <HAL_UART_Init>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 fb7d 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20001e0c 	.word	0x20001e0c
 8000d78:	40004400 	.word	0x40004400

08000d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_DMA_Init+0x48>)
 8000d84:	695a      	ldr	r2, [r3, #20]
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_DMA_Init+0x48>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <MX_DMA_Init+0x48>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2103      	movs	r1, #3
 8000d9e:	2009      	movs	r0, #9
 8000da0:	f001 fad2 	bl	8002348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000da4:	2009      	movs	r0, #9
 8000da6:	f001 fae4 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2103      	movs	r1, #3
 8000dae:	200a      	movs	r0, #10
 8000db0:	f001 faca 	bl	8002348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000db4:	200a      	movs	r0, #10
 8000db6:	f001 fadc 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b08b      	sub	sp, #44	; 0x2c
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	2414      	movs	r4, #20
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	2314      	movs	r3, #20
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f006 fcbe 	bl	800775a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b45      	ldr	r3, [pc, #276]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	0309      	lsls	r1, r1, #12
 8000de8:	430a      	orrs	r2, r1
 8000dea:	615a      	str	r2, [r3, #20]
 8000dec:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000dee:	695a      	ldr	r2, [r3, #20]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	031b      	lsls	r3, r3, #12
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000dfc:	695a      	ldr	r2, [r3, #20]
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	03c9      	lsls	r1, r1, #15
 8000e04:	430a      	orrs	r2, r1
 8000e06:	615a      	str	r2, [r3, #20]
 8000e08:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000e0a:	695a      	ldr	r2, [r3, #20]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	03db      	lsls	r3, r3, #15
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000e18:	695a      	ldr	r2, [r3, #20]
 8000e1a:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	0289      	lsls	r1, r1, #10
 8000e20:	430a      	orrs	r2, r1
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	029b      	lsls	r3, r3, #10
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	02c9      	lsls	r1, r1, #11
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <MX_GPIO_Init+0x12c>)
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	02db      	lsls	r3, r3, #11
 8000e48:	4013      	ands	r3, r2
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_SET);
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <MX_GPIO_Init+0x130>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	0018      	movs	r0, r3
 8000e56:	f001 fdd7 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 8000e5a:	23c0      	movs	r3, #192	; 0xc0
 8000e5c:	0099      	lsls	r1, r3, #2
 8000e5e:	2390      	movs	r3, #144	; 0x90
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2200      	movs	r2, #0
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 fdcf 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_GPIO_Init+0x134>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 fdc9 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2280      	movs	r2, #128	; 0x80
 8000e7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2201      	movs	r2, #1
 8000e80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <MX_GPIO_Init+0x130>)
 8000e92:	0019      	movs	r1, r3
 8000e94:	0010      	movs	r0, r2
 8000e96:	f001 fc3f 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8000e9a:	0021      	movs	r1, r4
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	22c0      	movs	r2, #192	; 0xc0
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	000c      	movs	r4, r1
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	193a      	adds	r2, r7, r4
 8000eba:	2390      	movs	r3, #144	; 0x90
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f001 fc29 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2240      	movs	r2, #64	; 0x40
 8000ecc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <MX_GPIO_Init+0x134>)
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	0010      	movs	r0, r2
 8000ee8:	f001 fc16 	bl	8002718 <HAL_GPIO_Init>

}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b00b      	add	sp, #44	; 0x2c
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48000800 	.word	0x48000800
 8000efc:	48000400 	.word	0x48000400

08000f00 <Stergatoare>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Stergatoare */
void Stergatoare(void *argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
		/////////////////////////////////////////////////////////////////////////////////////////////////////////

	for(;;){

		// STERGERE X1 - Joystick Sus
		if(actualValue[0] == 0 && treaptaCurenta == 0){ // Joystick sus
 8000f08:	4b88      	ldr	r3, [pc, #544]	; (800112c <Stergatoare+0x22c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d133      	bne.n	8000f78 <Stergatoare+0x78>
 8000f10:	4b87      	ldr	r3, [pc, #540]	; (8001130 <Stergatoare+0x230>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d12f      	bne.n	8000f78 <Stergatoare+0x78>

			busy = 1; // un fel de: vezi ca mai trebuie sa afisezi ca nu e gata miscarea motorasului
 8000f18:	4b86      	ldr	r3, [pc, #536]	; (8001134 <Stergatoare+0x234>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]

			//CONTROL SERVO

			TIM3 -> CCR4 = 500;   // 0%
 8000f1e:	4b86      	ldr	r3, [pc, #536]	; (8001138 <Stergatoare+0x238>)
 8000f20:	22fa      	movs	r2, #250	; 0xfa
 8000f22:	0052      	lsls	r2, r2, #1
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f26:	20c8      	movs	r0, #200	; 0xc8
 8000f28:	f000 fd4e 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000f2c:	4b82      	ldr	r3, [pc, #520]	; (8001138 <Stergatoare+0x238>)
 8000f2e:	22fa      	movs	r2, #250	; 0xfa
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f34:	20c8      	movs	r0, #200	; 0xc8
 8000f36:	f000 fd47 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	; (8001138 <Stergatoare+0x238>)
 8000f3c:	4a7f      	ldr	r2, [pc, #508]	; (800113c <Stergatoare+0x23c>)
 8000f3e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f40:	20c8      	movs	r0, #200	; 0xc8
 8000f42:	f000 fd41 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 8000f46:	4b7c      	ldr	r3, [pc, #496]	; (8001138 <Stergatoare+0x238>)
 8000f48:	22fa      	movs	r2, #250	; 0xfa
 8000f4a:	00d2      	lsls	r2, r2, #3
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f4e:	20c8      	movs	r0, #200	; 0xc8
 8000f50:	f000 fd3a 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 8000f54:	4b78      	ldr	r3, [pc, #480]	; (8001138 <Stergatoare+0x238>)
 8000f56:	2296      	movs	r2, #150	; 0x96
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(250);
 8000f5c:	20fa      	movs	r0, #250	; 0xfa
 8000f5e:	f000 fd33 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8000f62:	4b75      	ldr	r3, [pc, #468]	; (8001138 <Stergatoare+0x238>)
 8000f64:	22fa      	movs	r2, #250	; 0xfa
 8000f66:	0052      	lsls	r2, r2, #1
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f6a:	20c8      	movs	r0, #200	; 0xc8
 8000f6c:	f000 fd2c 	bl	80019c8 <HAL_Delay>

			busy = 0;
 8000f70:	4b70      	ldr	r3, [pc, #448]	; (8001134 <Stergatoare+0x234>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e006      	b.n	8000f86 <Stergatoare+0x86>

		}
		else{
			TIM3 -> CCR4 = 500;   // 0%
 8000f78:	4b6f      	ldr	r3, [pc, #444]	; (8001138 <Stergatoare+0x238>)
 8000f7a:	22fa      	movs	r2, #250	; 0xfa
 8000f7c:	0052      	lsls	r2, r2, #1
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8000f80:	2064      	movs	r0, #100	; 0x64
 8000f82:	f000 fd21 	bl	80019c8 <HAL_Delay>
		}

		// Setare treapta de viteza, maxim 3 trepte
		if (actualValue[0] >= 85 && treaptaCurenta <= 2){ //Joystick jos
 8000f86:	4b69      	ldr	r3, [pc, #420]	; (800112c <Stergatoare+0x22c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b54      	cmp	r3, #84	; 0x54
 8000f8c:	d908      	bls.n	8000fa0 <Stergatoare+0xa0>
 8000f8e:	4b68      	ldr	r3, [pc, #416]	; (8001130 <Stergatoare+0x230>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d804      	bhi.n	8000fa0 <Stergatoare+0xa0>
			treaptaCurenta++;
 8000f96:	4b66      	ldr	r3, [pc, #408]	; (8001130 <Stergatoare+0x230>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	4b64      	ldr	r3, [pc, #400]	; (8001130 <Stergatoare+0x230>)
 8000f9e:	601a      	str	r2, [r3, #0]
		}

		// Joystick sus, micsorare treapta viteza
		if(actualValue[0] == 0 && treaptaCurenta > 0){
 8000fa0:	4b62      	ldr	r3, [pc, #392]	; (800112c <Stergatoare+0x22c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10f      	bne.n	8000fc8 <Stergatoare+0xc8>
 8000fa8:	4b61      	ldr	r3, [pc, #388]	; (8001130 <Stergatoare+0x230>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00b      	beq.n	8000fc8 <Stergatoare+0xc8>
			treaptaCurenta--;
 8000fb0:	4b5f      	ldr	r3, [pc, #380]	; (8001130 <Stergatoare+0x230>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	1e5a      	subs	r2, r3, #1
 8000fb6:	4b5e      	ldr	r3, [pc, #376]	; (8001130 <Stergatoare+0x230>)
 8000fb8:	601a      	str	r2, [r3, #0]
			if (treaptaCurenta == 0){
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <Stergatoare+0x230>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <Stergatoare+0xc8>
				busy = 0;
 8000fc2:	4b5c      	ldr	r3, [pc, #368]	; (8001134 <Stergatoare+0x234>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
			}
		}

		// TREAPTA 1

		if(treaptaCurenta == 1)	{
 8000fc8:	4b59      	ldr	r3, [pc, #356]	; (8001130 <Stergatoare+0x230>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d12b      	bne.n	8001028 <Stergatoare+0x128>

			busy = 1;
 8000fd0:	4b58      	ldr	r3, [pc, #352]	; (8001134 <Stergatoare+0x234>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]

			//CONTROL SERVO

			TIM3 -> CCR4 = 500;   // 0%
 8000fd6:	4b58      	ldr	r3, [pc, #352]	; (8001138 <Stergatoare+0x238>)
 8000fd8:	22fa      	movs	r2, #250	; 0xfa
 8000fda:	0052      	lsls	r2, r2, #1
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000fde:	2096      	movs	r0, #150	; 0x96
 8000fe0:	f000 fcf2 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000fe4:	4b54      	ldr	r3, [pc, #336]	; (8001138 <Stergatoare+0x238>)
 8000fe6:	22fa      	movs	r2, #250	; 0xfa
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000fec:	2096      	movs	r0, #150	; 0x96
 8000fee:	f000 fceb 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000ff2:	4b51      	ldr	r3, [pc, #324]	; (8001138 <Stergatoare+0x238>)
 8000ff4:	4a51      	ldr	r2, [pc, #324]	; (800113c <Stergatoare+0x23c>)
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000ff8:	2096      	movs	r0, #150	; 0x96
 8000ffa:	f000 fce5 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 8000ffe:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <Stergatoare+0x238>)
 8001000:	22fa      	movs	r2, #250	; 0xfa
 8001002:	00d2      	lsls	r2, r2, #3
 8001004:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8001006:	2096      	movs	r0, #150	; 0x96
 8001008:	f000 fcde 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 800100c:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <Stergatoare+0x238>)
 800100e:	2296      	movs	r2, #150	; 0x96
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8001014:	2096      	movs	r0, #150	; 0x96
 8001016:	f000 fcd7 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 800101a:	4b47      	ldr	r3, [pc, #284]	; (8001138 <Stergatoare+0x238>)
 800101c:	22fa      	movs	r2, #250	; 0xfa
 800101e:	0052      	lsls	r2, r2, #1
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8001022:	20c8      	movs	r0, #200	; 0xc8
 8001024:	f000 fcd0 	bl	80019c8 <HAL_Delay>
		}

		// TREAPTA 2

		if(treaptaCurenta == 2)	{
 8001028:	4b41      	ldr	r3, [pc, #260]	; (8001130 <Stergatoare+0x230>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d12b      	bne.n	8001088 <Stergatoare+0x188>

			busy = 1;
 8001030:	4b40      	ldr	r3, [pc, #256]	; (8001134 <Stergatoare+0x234>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

			//CONTROL SERVO

			TIM3 -> CCR4 = 500;   // 0%
 8001036:	4b40      	ldr	r3, [pc, #256]	; (8001138 <Stergatoare+0x238>)
 8001038:	22fa      	movs	r2, #250	; 0xfa
 800103a:	0052      	lsls	r2, r2, #1
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 800103e:	2064      	movs	r0, #100	; 0x64
 8001040:	f000 fcc2 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8001044:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <Stergatoare+0x238>)
 8001046:	22fa      	movs	r2, #250	; 0xfa
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	f000 fcbb 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <Stergatoare+0x238>)
 8001054:	4a39      	ldr	r2, [pc, #228]	; (800113c <Stergatoare+0x23c>)
 8001056:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001058:	2064      	movs	r0, #100	; 0x64
 800105a:	f000 fcb5 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 800105e:	4b36      	ldr	r3, [pc, #216]	; (8001138 <Stergatoare+0x238>)
 8001060:	22fa      	movs	r2, #250	; 0xfa
 8001062:	00d2      	lsls	r2, r2, #3
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f000 fcae 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <Stergatoare+0x238>)
 800106e:	2296      	movs	r2, #150	; 0x96
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001074:	2064      	movs	r0, #100	; 0x64
 8001076:	f000 fca7 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <Stergatoare+0x238>)
 800107c:	22fa      	movs	r2, #250	; 0xfa
 800107e:	0052      	lsls	r2, r2, #1
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8001082:	20c8      	movs	r0, #200	; 0xc8
 8001084:	f000 fca0 	bl	80019c8 <HAL_Delay>
		}

		// TREAPTA 3

		if (treaptaCurenta == 3) {
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <Stergatoare+0x230>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d12b      	bne.n	80010e8 <Stergatoare+0x1e8>

			busy = 1;
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <Stergatoare+0x234>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]

			//CONTROL SERVO

			TIM3 -> CCR4 = 500;   // 0%
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <Stergatoare+0x238>)
 8001098:	22fa      	movs	r2, #250	; 0xfa
 800109a:	0052      	lsls	r2, r2, #1
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 800109e:	204b      	movs	r0, #75	; 0x4b
 80010a0:	f000 fc92 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <Stergatoare+0x238>)
 80010a6:	22fa      	movs	r2, #250	; 0xfa
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 80010ac:	204b      	movs	r0, #75	; 0x4b
 80010ae:	f000 fc8b 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <Stergatoare+0x238>)
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <Stergatoare+0x23c>)
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 80010b8:	204b      	movs	r0, #75	; 0x4b
 80010ba:	f000 fc85 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <Stergatoare+0x238>)
 80010c0:	22fa      	movs	r2, #250	; 0xfa
 80010c2:	00d2      	lsls	r2, r2, #3
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 80010c6:	204b      	movs	r0, #75	; 0x4b
 80010c8:	f000 fc7e 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <Stergatoare+0x238>)
 80010ce:	2296      	movs	r2, #150	; 0x96
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 80010d4:	204b      	movs	r0, #75	; 0x4b
 80010d6:	f000 fc77 	bl	80019c8 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <Stergatoare+0x238>)
 80010dc:	22fa      	movs	r2, #250	; 0xfa
 80010de:	0052      	lsls	r2, r2, #1
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 80010e2:	20c8      	movs	r0, #200	; 0xc8
 80010e4:	f000 fc70 	bl	80019c8 <HAL_Delay>
		}

		// RESETARE - Apasare Buton

		if (actualValue[2] <= 100){ // Buton apasat
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <Stergatoare+0x22c>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b64      	cmp	r3, #100	; 0x64
 80010ee:	d80c      	bhi.n	800110a <Stergatoare+0x20a>
			TIM3 -> CCR4 = 500; //Motor reset
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <Stergatoare+0x238>)
 80010f2:	22fa      	movs	r2, #250	; 0xfa
 80010f4:	0052      	lsls	r2, r2, #1
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
			treaptaCurenta = 0;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <Stergatoare+0x230>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
			busy = 0;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <Stergatoare+0x234>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
			HAL_Delay(200);
 8001104:	20c8      	movs	r0, #200	; 0xc8
 8001106:	f000 fc5f 	bl	80019c8 <HAL_Delay>
		}
		*/

		// STROPIRE LUNETA

		if(actualValue[1] >= 85){ //Stanga !!!
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <Stergatoare+0x22c>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b54      	cmp	r3, #84	; 0x54
 8001110:	d800      	bhi.n	8001114 <Stergatoare+0x214>
 8001112:	e6f9      	b.n	8000f08 <Stergatoare+0x8>
			busy = 1;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <Stergatoare+0x234>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
			HAL_Delay(2000);
 800111a:	23fa      	movs	r3, #250	; 0xfa
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	0018      	movs	r0, r3
 8001120:	f000 fc52 	bl	80019c8 <HAL_Delay>
			busy = 0;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <Stergatoare+0x234>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
		if(actualValue[0] == 0 && treaptaCurenta == 0){ // Joystick sus
 800112a:	e6ed      	b.n	8000f08 <Stergatoare+0x8>
 800112c:	20001eac 	.word	0x20001eac
 8001130:	20001e9c 	.word	0x20001e9c
 8001134:	20001eb8 	.word	0x20001eb8
 8001138:	40000400 	.word	0x40000400
 800113c:	000005aa 	.word	0x000005aa

08001140 <ReadJoystick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadJoystick */
void ReadJoystick(void *argument)
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b09c      	sub	sp, #112	; 0x70
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadJoystick */
	int INDEX = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	66fb      	str	r3, [r7, #108]	; 0x6c

	int SUM1 = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	66bb      	str	r3, [r7, #104]	; 0x68
	int SUM2 = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	667b      	str	r3, [r7, #100]	; 0x64
	int SUM3 = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	663b      	str	r3, [r7, #96]	; 0x60

	int READINGS1[5] = {0,0,0,0,0};
 8001158:	2334      	movs	r3, #52	; 0x34
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	0018      	movs	r0, r3
 800115e:	2314      	movs	r3, #20
 8001160:	001a      	movs	r2, r3
 8001162:	2100      	movs	r1, #0
 8001164:	f006 faf9 	bl	800775a <memset>
	int READINGS2[5] = {0,0,0,0,0};
 8001168:	2320      	movs	r3, #32
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	0018      	movs	r0, r3
 800116e:	2314      	movs	r3, #20
 8001170:	001a      	movs	r2, r3
 8001172:	2100      	movs	r1, #0
 8001174:	f006 faf1 	bl	800775a <memset>
	int READINGS3[5] = {0,0,0,0,0};
 8001178:	230c      	movs	r3, #12
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	0018      	movs	r0, r3
 800117e:	2314      	movs	r3, #20
 8001180:	001a      	movs	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f006 fae9 	bl	800775a <memset>

	int AVERAGED1 = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int AVERAGED2 = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	65bb      	str	r3, [r7, #88]	; 0x58
	int AVERAGED3 = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	657b      	str	r3, [r7, #84]	; 0x54

	int Value1 = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	653b      	str	r3, [r7, #80]	; 0x50
	int Value2 = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	64fb      	str	r3, [r7, #76]	; 0x4c
	int Value3 = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48

	HAL_ADC_Start_DMA(&hadc, value, 3); // start adc in DMA mode
 80011a0:	4938      	ldr	r1, [pc, #224]	; (8001284 <ReadJoystick+0x144>)
 80011a2:	4b39      	ldr	r3, [pc, #228]	; (8001288 <ReadJoystick+0x148>)
 80011a4:	2203      	movs	r2, #3
 80011a6:	0018      	movs	r0, r3
 80011a8:	f000 fd72 	bl	8001c90 <HAL_ADC_Start_DMA>

  for(;;)  {
	SUM1 = SUM1 - READINGS1[INDEX];        // Remove the oldest entry from the sum
 80011ac:	2034      	movs	r0, #52	; 0x34
 80011ae:	183b      	adds	r3, r7, r0
 80011b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	58d3      	ldr	r3, [r2, r3]
 80011b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	66bb      	str	r3, [r7, #104]	; 0x68
	SUM2 = SUM2 - READINGS2[INDEX];        // Remove the oldest entry from the sum
 80011bc:	2420      	movs	r4, #32
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	58d3      	ldr	r3, [r2, r3]
 80011c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	667b      	str	r3, [r7, #100]	; 0x64
	SUM3 = SUM3 - READINGS3[INDEX];        // Remove the oldest entry from the sum
 80011cc:	250c      	movs	r5, #12
 80011ce:	197b      	adds	r3, r7, r5
 80011d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	58d3      	ldr	r3, [r2, r3]
 80011d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	663b      	str	r3, [r7, #96]	; 0x60

	Value1 = value[0];      			   // Read the next sensor value
 80011dc:	4b29      	ldr	r3, [pc, #164]	; (8001284 <ReadJoystick+0x144>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	653b      	str	r3, [r7, #80]	; 0x50
	Value2 = value[1];					   // Read the next sensor value
 80011e2:	4b28      	ldr	r3, [pc, #160]	; (8001284 <ReadJoystick+0x144>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	Value3 = value[2];				       // Read the next sensor value
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <ReadJoystick+0x144>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	64bb      	str	r3, [r7, #72]	; 0x48

	READINGS1[INDEX] = value[0];              // Add the newest reading to the window
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <ReadJoystick+0x144>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	0019      	movs	r1, r3
 80011f4:	183b      	adds	r3, r7, r0
 80011f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	50d1      	str	r1, [r2, r3]
	READINGS2[INDEX] = value[1];              // Add the newest reading to the window
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <ReadJoystick+0x144>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	0019      	movs	r1, r3
 8001202:	193b      	adds	r3, r7, r4
 8001204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	50d1      	str	r1, [r2, r3]
	READINGS3[INDEX] = value[2];              // Add the newest reading to the window
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <ReadJoystick+0x144>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	0019      	movs	r1, r3
 8001210:	197b      	adds	r3, r7, r5
 8001212:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	50d1      	str	r1, [r2, r3]

	SUM1 = SUM1 + Value1;                  // Add the newest reading to the sum
 8001218:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800121a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	66bb      	str	r3, [r7, #104]	; 0x68
	SUM2 = SUM2 + Value2;                  // Add the newest reading to the sum
 8001220:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001224:	18d3      	adds	r3, r2, r3
 8001226:	667b      	str	r3, [r7, #100]	; 0x64
	SUM3 = SUM3 + Value3;                  // Add the newest reading to the sum
 8001228:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800122a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	663b      	str	r3, [r7, #96]	; 0x60

	INDEX = (INDEX+1) % 5;   			   // Increment the index, and wrap to 0 if it exceeds the window size
 8001230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001232:	3301      	adds	r3, #1
 8001234:	2105      	movs	r1, #5
 8001236:	0018      	movs	r0, r3
 8001238:	f7ff f8d6 	bl	80003e8 <__aeabi_idivmod>
 800123c:	000b      	movs	r3, r1
 800123e:	66fb      	str	r3, [r7, #108]	; 0x6c

	AVERAGED1 = SUM1 / 5;      			   // Divide the sum of the window by the window size for the result
 8001240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001242:	2105      	movs	r1, #5
 8001244:	0018      	movs	r0, r3
 8001246:	f7fe ffe9 	bl	800021c <__divsi3>
 800124a:	0003      	movs	r3, r0
 800124c:	65fb      	str	r3, [r7, #92]	; 0x5c
	AVERAGED2 = SUM2 / 5;      			   // Divide the sum of the window by the window size for the result
 800124e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001250:	2105      	movs	r1, #5
 8001252:	0018      	movs	r0, r3
 8001254:	f7fe ffe2 	bl	800021c <__divsi3>
 8001258:	0003      	movs	r3, r0
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
	AVERAGED3 = SUM3 / 5;      			   // Divide the sum of the window by the window size for the result
 800125c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800125e:	2105      	movs	r1, #5
 8001260:	0018      	movs	r0, r3
 8001262:	f7fe ffdb 	bl	800021c <__divsi3>
 8001266:	0003      	movs	r3, r0
 8001268:	657b      	str	r3, [r7, #84]	; 0x54

	actualValue[0] = AVERAGED1;
 800126a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <ReadJoystick+0x14c>)
 800126e:	601a      	str	r2, [r3, #0]
	actualValue[1] = AVERAGED2;
 8001270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <ReadJoystick+0x14c>)
 8001274:	605a      	str	r2, [r3, #4]
	actualValue[2] = AVERAGED3;
 8001276:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <ReadJoystick+0x14c>)
 800127a:	609a      	str	r2, [r3, #8]

	osDelay(25);
 800127c:	2019      	movs	r0, #25
 800127e:	f004 f8f7 	bl	8005470 <osDelay>
	SUM1 = SUM1 - READINGS1[INDEX];        // Remove the oldest entry from the sum
 8001282:	e793      	b.n	80011ac <ReadJoystick+0x6c>
 8001284:	20001ea0 	.word	0x20001ea0
 8001288:	20001c98 	.word	0x20001c98
 800128c:	20001eac 	.word	0x20001eac

08001290 <clearScreen.0>:

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////  IMPLEMENTARE LCD  /////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////

	void clearScreen(){	// Curata ecranul
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4663      	mov	r3, ip
 8001298:	607b      	str	r3, [r7, #4]
		st7565_clear_buffer(buffer); 	// goleste buffer
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <clearScreen.0+0x24>)
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff fa6f 	bl	8000780 <st7565_clear_buffer>
		st7565_write_buffer(buffer);	// il scrie pe ecran (curata ecranul)
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <clearScreen.0+0x24>)
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff f8a5 	bl	80003f4 <st7565_write_buffer>
	}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	20000000 	.word	0x20000000

080012b8 <ControlLCD>:
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af04      	add	r7, sp, #16
 80012be:	6078      	str	r0, [r7, #4]
void ControlLCD(void *argument)
 80012c0:	2318      	movs	r3, #24
 80012c2:	2208      	movs	r2, #8
 80012c4:	189b      	adds	r3, r3, r2
 80012c6:	19db      	adds	r3, r3, r7
 80012c8:	60bb      	str	r3, [r7, #8]
	uint8_t cleared = 0;	// Pt treptele de viteza
 80012ca:	230f      	movs	r3, #15
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]

	// initializare LCD
	st7565_init();
 80012d2:	f7ff f919 	bl	8000508 <st7565_init>
	st7565_backlight_enable();
 80012d6:	f7ff f9c5 	bl	8000664 <st7565_backlight_enable>

	/* Infinite loop */
	for(;;)	{

		if (busy == 0){
 80012da:	4b59      	ldr	r3, [pc, #356]	; (8001440 <ControlLCD+0x188>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d108      	bne.n	80012f4 <ControlLCD+0x3c>
			clearScreen();
 80012e2:	2308      	movs	r3, #8
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	469c      	mov	ip, r3
 80012e8:	f7ff ffd2 	bl	8001290 <clearScreen.0>
			cleared = 0;
 80012ec:	230f      	movs	r3, #15
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
		}

		// STERGERE X1
		if(actualValue[0] == 0 && treaptaCurenta == 0){ // Joystick sus
 80012f4:	4b53      	ldr	r3, [pc, #332]	; (8001444 <ControlLCD+0x18c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d113      	bne.n	8001324 <ControlLCD+0x6c>
 80012fc:	4b52      	ldr	r3, [pc, #328]	; (8001448 <ControlLCD+0x190>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10f      	bne.n	8001324 <ControlLCD+0x6c>

			st7565_drawbitmap(buffer, 0, 0, x1, 128, 64, 1); // copiaza poza in buffer
 8001304:	4b51      	ldr	r3, [pc, #324]	; (800144c <ControlLCD+0x194>)
 8001306:	4852      	ldr	r0, [pc, #328]	; (8001450 <ControlLCD+0x198>)
 8001308:	2201      	movs	r2, #1
 800130a:	9202      	str	r2, [sp, #8]
 800130c:	2240      	movs	r2, #64	; 0x40
 800130e:	9201      	str	r2, [sp, #4]
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	9200      	str	r2, [sp, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	f7ff faac 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 800131c:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <ControlLCD+0x198>)
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff f868 	bl	80003f4 <st7565_write_buffer>
		}

		// TEMPORIZATOR
		// TREAPTA 1

		if(treaptaCurenta == 1)	{
 8001324:	4b48      	ldr	r3, [pc, #288]	; (8001448 <ControlLCD+0x190>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d11c      	bne.n	8001366 <ControlLCD+0xae>
			if(cleared != 0){	// Verifica daca este nevoie sa curete ecranul pt afisaj
 800132c:	240f      	movs	r4, #15
 800132e:	193b      	adds	r3, r7, r4
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <ControlLCD+0x8e>
				clearScreen();	// (trecere de la o treapta la alta)
 8001336:	2308      	movs	r3, #8
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	469c      	mov	ip, r3
 800133c:	f7ff ffa8 	bl	8001290 <clearScreen.0>
				cleared = 0;
 8001340:	193b      	adds	r3, r7, r4
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
			}

			st7565_drawbitmap(buffer, 0, 0, treapta1, 128, 64, 1); // copiaza poza in buffer
 8001346:	4b43      	ldr	r3, [pc, #268]	; (8001454 <ControlLCD+0x19c>)
 8001348:	4841      	ldr	r0, [pc, #260]	; (8001450 <ControlLCD+0x198>)
 800134a:	2201      	movs	r2, #1
 800134c:	9202      	str	r2, [sp, #8]
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	9201      	str	r2, [sp, #4]
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	f7ff fa8b 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <ControlLCD+0x198>)
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff f847 	bl	80003f4 <st7565_write_buffer>
		}

		// TREAPTA 2

		if(treaptaCurenta == 2)	{
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <ControlLCD+0x190>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d11c      	bne.n	80013a8 <ControlLCD+0xf0>
			if(cleared != 1){	// Verifica daca este nevoie sa curete ecranul pt afisaj
 800136e:	240f      	movs	r4, #15
 8001370:	193b      	adds	r3, r7, r4
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d007      	beq.n	8001388 <ControlLCD+0xd0>
				clearScreen();	// (trecere de la o treapta la alta)
 8001378:	2308      	movs	r3, #8
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	469c      	mov	ip, r3
 800137e:	f7ff ff87 	bl	8001290 <clearScreen.0>
				cleared = 1;
 8001382:	193b      	adds	r3, r7, r4
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
			}

			st7565_drawbitmap(buffer, 0, 0, treapta2, 128, 64, 1); // copiaza poza in buffer
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <ControlLCD+0x1a0>)
 800138a:	4831      	ldr	r0, [pc, #196]	; (8001450 <ControlLCD+0x198>)
 800138c:	2201      	movs	r2, #1
 800138e:	9202      	str	r2, [sp, #8]
 8001390:	2240      	movs	r2, #64	; 0x40
 8001392:	9201      	str	r2, [sp, #4]
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	f7ff fa6a 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <ControlLCD+0x198>)
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff f826 	bl	80003f4 <st7565_write_buffer>

		}

		// TREAPTA 3

		if (treaptaCurenta == 3) {
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <ControlLCD+0x190>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d11c      	bne.n	80013ea <ControlLCD+0x132>
			if(cleared != 2){	// Verifica daca este nevoie sa curete ecranul pt afisaj
 80013b0:	240f      	movs	r4, #15
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d007      	beq.n	80013ca <ControlLCD+0x112>
				clearScreen();	// (trecere de la o treapta la alta)
 80013ba:	2308      	movs	r3, #8
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	469c      	mov	ip, r3
 80013c0:	f7ff ff66 	bl	8001290 <clearScreen.0>
				cleared = 2;
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	2202      	movs	r2, #2
 80013c8:	701a      	strb	r2, [r3, #0]
			}

			st7565_drawbitmap(buffer, 0, 0, treapta3, 128, 64, 1); // copiaza poza in buffer
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <ControlLCD+0x1a4>)
 80013cc:	4820      	ldr	r0, [pc, #128]	; (8001450 <ControlLCD+0x198>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	9202      	str	r2, [sp, #8]
 80013d2:	2240      	movs	r2, #64	; 0x40
 80013d4:	9201      	str	r2, [sp, #4]
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	f7ff fa49 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <ControlLCD+0x198>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff f805 	bl	80003f4 <st7565_write_buffer>
		}

		// STROPIRE PARBRIZ

		if (actualValue[1] <= 2) { //Joystick dreapta
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <ControlLCD+0x18c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d80f      	bhi.n	8001412 <ControlLCD+0x15a>
			st7565_drawbitmap(buffer, 0, 0, parbriz, 128, 64, 1); // copiaza poza in buffer
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <ControlLCD+0x1a8>)
 80013f4:	4816      	ldr	r0, [pc, #88]	; (8001450 <ControlLCD+0x198>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	9202      	str	r2, [sp, #8]
 80013fa:	2240      	movs	r2, #64	; 0x40
 80013fc:	9201      	str	r2, [sp, #4]
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	9200      	str	r2, [sp, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	f7ff fa35 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <ControlLCD+0x198>)
 800140c:	0018      	movs	r0, r3
 800140e:	f7fe fff1 	bl	80003f4 <st7565_write_buffer>
		}

		// STROPIRE LUNETA

		if(actualValue[1] >= 85){ //Stanga !!!
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <ControlLCD+0x18c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b54      	cmp	r3, #84	; 0x54
 8001418:	d800      	bhi.n	800141c <ControlLCD+0x164>
 800141a:	e75e      	b.n	80012da <ControlLCD+0x22>
			st7565_drawbitmap(buffer, 0, 0, luneta, 128, 64, 1); // copiaza poza in buffer
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <ControlLCD+0x1ac>)
 800141e:	480c      	ldr	r0, [pc, #48]	; (8001450 <ControlLCD+0x198>)
 8001420:	2201      	movs	r2, #1
 8001422:	9202      	str	r2, [sp, #8]
 8001424:	2240      	movs	r2, #64	; 0x40
 8001426:	9201      	str	r2, [sp, #4]
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	f7ff fa20 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <ControlLCD+0x198>)
 8001436:	0018      	movs	r0, r3
 8001438:	f7fe ffdc 	bl	80003f4 <st7565_write_buffer>
		if (busy == 0){
 800143c:	e74d      	b.n	80012da <ControlLCD+0x22>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	20001eb8 	.word	0x20001eb8
 8001444:	20001eac 	.word	0x20001eac
 8001448:	20001e9c 	.word	0x20001e9c
 800144c:	20000408 	.word	0x20000408
 8001450:	20000000 	.word	0x20000000
 8001454:	20000808 	.word	0x20000808
 8001458:	20000c08 	.word	0x20000c08
 800145c:	20001008 	.word	0x20001008
 8001460:	20001408 	.word	0x20001408
 8001464:	20001808 	.word	0x20001808

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	e7fe      	b.n	8001470 <Error_Handler+0x8>
	...

08001474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_MspInit+0x50>)
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_MspInit+0x50>)
 8001480:	2101      	movs	r1, #1
 8001482:	430a      	orrs	r2, r1
 8001484:	619a      	str	r2, [r3, #24]
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_MspInit+0x50>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	2201      	movs	r2, #1
 800148c:	4013      	ands	r3, r2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_MspInit+0x50>)
 8001494:	69da      	ldr	r2, [r3, #28]
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_MspInit+0x50>)
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	0549      	lsls	r1, r1, #21
 800149c:	430a      	orrs	r2, r1
 800149e:	61da      	str	r2, [r3, #28]
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_MspInit+0x50>)
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	055b      	lsls	r3, r3, #21
 80014a8:	4013      	ands	r3, r2
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80014ae:	2302      	movs	r3, #2
 80014b0:	425b      	negs	r3, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	2103      	movs	r1, #3
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 ff46 	bl	8002348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	2414      	movs	r4, #20
 80014d2:	193b      	adds	r3, r7, r4
 80014d4:	0018      	movs	r0, r3
 80014d6:	2314      	movs	r3, #20
 80014d8:	001a      	movs	r2, r3
 80014da:	2100      	movs	r1, #0
 80014dc:	f006 f93d 	bl	800775a <memset>
  if(hadc->Instance==ADC1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a35      	ldr	r2, [pc, #212]	; (80015bc <HAL_ADC_MspInit+0xf4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d163      	bne.n	80015b2 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ea:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <HAL_ADC_MspInit+0xf8>)
 80014ec:	699a      	ldr	r2, [r3, #24]
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_ADC_MspInit+0xf8>)
 80014f0:	2180      	movs	r1, #128	; 0x80
 80014f2:	0089      	lsls	r1, r1, #2
 80014f4:	430a      	orrs	r2, r1
 80014f6:	619a      	str	r2, [r3, #24]
 80014f8:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <HAL_ADC_MspInit+0xf8>)
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <HAL_ADC_MspInit+0xf8>)
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_ADC_MspInit+0xf8>)
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	0309      	lsls	r1, r1, #12
 8001510:	430a      	orrs	r2, r1
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_ADC_MspInit+0xf8>)
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	031b      	lsls	r3, r3, #12
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	221c      	movs	r2, #28
 8001526:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001528:	193b      	adds	r3, r7, r4
 800152a:	2203      	movs	r2, #3
 800152c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	193b      	adds	r3, r7, r4
 8001536:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <HAL_ADC_MspInit+0xfc>)
 8001538:	0019      	movs	r1, r3
 800153a:	0010      	movs	r0, r2
 800153c:	f001 f8ec 	bl	8002718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 8001542:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_ADC_MspInit+0x104>)
 8001544:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 800156a:	2220      	movs	r2, #32
 800156c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 8001570:	22c0      	movs	r2, #192	; 0xc0
 8001572:	0192      	lsls	r2, r2, #6
 8001574:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 8001578:	0018      	movs	r0, r3
 800157a:	f000 ff17 	bl	80023ac <HAL_DMA_Init>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d001      	beq.n	8001586 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001582:	f7ff ff71 	bl	8001468 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_ADC_MspInit+0x108>)
 8001588:	23a8      	movs	r3, #168	; 0xa8
 800158a:	58d3      	ldr	r3, [r2, r3]
 800158c:	4910      	ldr	r1, [pc, #64]	; (80015d0 <HAL_ADC_MspInit+0x108>)
 800158e:	220f      	movs	r2, #15
 8001590:	4393      	bics	r3, r2
 8001592:	22a8      	movs	r2, #168	; 0xa8
 8001594:	508b      	str	r3, [r1, r2]
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_ADC_MspInit+0x108>)
 8001598:	23a8      	movs	r3, #168	; 0xa8
 800159a:	58d3      	ldr	r3, [r2, r3]
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <HAL_ADC_MspInit+0x108>)
 800159e:	2201      	movs	r2, #1
 80015a0:	4313      	orrs	r3, r2
 80015a2:	22a8      	movs	r2, #168	; 0xa8
 80015a4:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_ADC_MspInit+0x100>)
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b00b      	add	sp, #44	; 0x2c
 80015b8:	bd90      	pop	{r4, r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	40012400 	.word	0x40012400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000800 	.word	0x48000800
 80015c8:	20001cd8 	.word	0x20001cd8
 80015cc:	40020008 	.word	0x40020008
 80015d0:	40020000 	.word	0x40020000

080015d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b08b      	sub	sp, #44	; 0x2c
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	2414      	movs	r4, #20
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	0018      	movs	r0, r3
 80015e2:	2314      	movs	r3, #20
 80015e4:	001a      	movs	r2, r3
 80015e6:	2100      	movs	r1, #0
 80015e8:	f006 f8b7 	bl	800775a <memset>
  if(hspi->Instance==SPI1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <HAL_SPI_MspInit+0x90>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d132      	bne.n	800165c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_SPI_MspInit+0x94>)
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_SPI_MspInit+0x94>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0149      	lsls	r1, r1, #5
 8001600:	430a      	orrs	r2, r1
 8001602:	619a      	str	r2, [r3, #24]
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_SPI_MspInit+0x94>)
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_SPI_MspInit+0x94>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <HAL_SPI_MspInit+0x94>)
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	0289      	lsls	r1, r1, #10
 800161c:	430a      	orrs	r2, r1
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_SPI_MspInit+0x94>)
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	029b      	lsls	r3, r3, #10
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800162e:	0021      	movs	r1, r4
 8001630:	187b      	adds	r3, r7, r1
 8001632:	22a0      	movs	r2, #160	; 0xa0
 8001634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2202      	movs	r2, #2
 800163a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	187b      	adds	r3, r7, r1
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2203      	movs	r2, #3
 8001646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	187a      	adds	r2, r7, r1
 8001650:	2390      	movs	r3, #144	; 0x90
 8001652:	05db      	lsls	r3, r3, #23
 8001654:	0011      	movs	r1, r2
 8001656:	0018      	movs	r0, r3
 8001658:	f001 f85e 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b00b      	add	sp, #44	; 0x2c
 8001662:	bd90      	pop	{r4, r7, pc}
 8001664:	40013000 	.word	0x40013000
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <HAL_TIM_Base_MspInit+0xac>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d147      	bne.n	800170e <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167e:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_TIM_Base_MspInit+0xb0>)
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_TIM_Base_MspInit+0xb0>)
 8001684:	2102      	movs	r1, #2
 8001686:	430a      	orrs	r2, r1
 8001688:	61da      	str	r2, [r3, #28]
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_TIM_Base_MspInit+0xb0>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 8001698:	4a22      	ldr	r2, [pc, #136]	; (8001724 <HAL_TIM_Base_MspInit+0xb8>)
 800169a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 800169e:	2210      	movs	r2, #16
 80016a0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	0052      	lsls	r2, r2, #1
 80016b4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	00d2      	lsls	r2, r2, #3
 80016bc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 fe6d 	bl	80023ac <HAL_DMA_Init>
 80016d2:	1e03      	subs	r3, r0, #0
 80016d4:	d001      	beq.n	80016da <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80016d6:	f7ff fec7 	bl	8001468 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_DEFAULT);
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <HAL_TIM_Base_MspInit+0xbc>)
 80016dc:	23a8      	movs	r3, #168	; 0xa8
 80016de:	58d3      	ldr	r3, [r2, r3]
 80016e0:	4911      	ldr	r1, [pc, #68]	; (8001728 <HAL_TIM_Base_MspInit+0xbc>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <HAL_TIM_Base_MspInit+0xc0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	22a8      	movs	r2, #168	; 0xa8
 80016e8:	508b      	str	r3, [r1, r2]
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_TIM_Base_MspInit+0xbc>)
 80016ec:	490e      	ldr	r1, [pc, #56]	; (8001728 <HAL_TIM_Base_MspInit+0xbc>)
 80016ee:	23a8      	movs	r3, #168	; 0xa8
 80016f0:	58d3      	ldr	r3, [r2, r3]
 80016f2:	22a8      	movs	r2, #168	; 0xa8
 80016f4:	508b      	str	r3, [r1, r2]

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 8001706:	621a      	str	r2, [r3, #32]
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_TIM_Base_MspInit+0xb4>)
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	40000400 	.word	0x40000400
 800171c:	40021000 	.word	0x40021000
 8001720:	20001dc8 	.word	0x20001dc8
 8001724:	40020030 	.word	0x40020030
 8001728:	40020000 	.word	0x40020000
 800172c:	fffff0ff 	.word	0xfffff0ff

08001730 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	240c      	movs	r4, #12
 800173a:	193b      	adds	r3, r7, r4
 800173c:	0018      	movs	r0, r3
 800173e:	2314      	movs	r3, #20
 8001740:	001a      	movs	r2, r3
 8001742:	2100      	movs	r1, #0
 8001744:	f006 f809 	bl	800775a <memset>
  if(htim->Instance==TIM3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <HAL_TIM_MspPostInit+0x74>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d123      	bne.n	800179a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_TIM_MspPostInit+0x78>)
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_TIM_MspPostInit+0x78>)
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	02c9      	lsls	r1, r1, #11
 800175c:	430a      	orrs	r2, r1
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_TIM_MspPostInit+0x78>)
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	02db      	lsls	r3, r3, #11
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800176e:	0021      	movs	r1, r4
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2202      	movs	r2, #2
 8001774:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2202      	movs	r2, #2
 800177a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2201      	movs	r2, #1
 800178c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	187b      	adds	r3, r7, r1
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_TIM_MspPostInit+0x7c>)
 8001792:	0019      	movs	r1, r3
 8001794:	0010      	movs	r0, r2
 8001796:	f000 ffbf 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b009      	add	sp, #36	; 0x24
 80017a0:	bd90      	pop	{r4, r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40000400 	.word	0x40000400
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000400 	.word	0x48000400

080017b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08b      	sub	sp, #44	; 0x2c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	2414      	movs	r4, #20
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	0018      	movs	r0, r3
 80017be:	2314      	movs	r3, #20
 80017c0:	001a      	movs	r2, r3
 80017c2:	2100      	movs	r1, #0
 80017c4:	f005 ffc9 	bl	800775a <memset>
  if(huart->Instance==USART2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <HAL_UART_MspInit+0x90>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d132      	bne.n	8001838 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_UART_MspInit+0x94>)
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_UART_MspInit+0x94>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0289      	lsls	r1, r1, #10
 80017dc:	430a      	orrs	r2, r1
 80017de:	61da      	str	r2, [r3, #28]
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_UART_MspInit+0x94>)
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	029b      	lsls	r3, r3, #10
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_UART_MspInit+0x94>)
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_UART_MspInit+0x94>)
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0289      	lsls	r1, r1, #10
 80017f8:	430a      	orrs	r2, r1
 80017fa:	615a      	str	r2, [r3, #20]
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_MspInit+0x94>)
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	029b      	lsls	r3, r3, #10
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800180a:	0021      	movs	r1, r4
 800180c:	187b      	adds	r3, r7, r1
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	187b      	adds	r3, r7, r1
 8001814:	2202      	movs	r2, #2
 8001816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2201      	movs	r2, #1
 8001828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	187a      	adds	r2, r7, r1
 800182c:	2390      	movs	r3, #144	; 0x90
 800182e:	05db      	lsls	r3, r3, #23
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f000 ff70 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b00b      	add	sp, #44	; 0x2c
 800183e:	bd90      	pop	{r4, r7, pc}
 8001840:	40004400 	.word	0x40004400
 8001844:	40021000 	.word	0x40021000

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 f89a 	bl	8001990 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800185c:	f005 f8da 	bl	8006a14 <xTaskGetSchedulerState>
 8001860:	0003      	movs	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001866:	f005 fd67 	bl	8007338 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <DMA1_Ch1_IRQHandler+0x14>)
 8001876:	0018      	movs	r0, r3
 8001878:	f000 fe46 	bl	8002508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	20001cd8 	.word	0x20001cd8

08001888 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 800188e:	0018      	movs	r0, r3
 8001890:	f000 fe3a 	bl	8002508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	20001dc8 	.word	0x20001dc8

080018a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018ac:	480d      	ldr	r0, [pc, #52]	; (80018e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <LoopForever+0xe>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018c8:	4c0b      	ldr	r4, [pc, #44]	; (80018f8 <LoopForever+0x16>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018d6:	f7ff ffe3 	bl	80018a0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80018da:	f005 ff0f 	bl	80076fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018de:	f7ff f839 	bl	8000954 <main>

080018e2 <LoopForever>:

LoopForever:
    b LoopForever
 80018e2:	e7fe      	b.n	80018e2 <LoopForever>
  ldr   r0, =_estack
 80018e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20001c7c 	.word	0x20001c7c
  ldr r2, =_sidata
 80018f0:	08007a94 	.word	0x08007a94
  ldr r2, =_sbss
 80018f4:	20001c7c 	.word	0x20001c7c
  ldr r4, =_ebss
 80018f8:	200038c8 	.word	0x200038c8

080018fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_COMP_IRQHandler>
	...

08001900 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <HAL_Init+0x24>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_Init+0x24>)
 800190a:	2110      	movs	r1, #16
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f809 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001916:	f7ff fdad 	bl	8001474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40022000 	.word	0x40022000

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_InitTick+0x5c>)
 8001932:	681c      	ldr	r4, [r3, #0]
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_InitTick+0x60>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	0019      	movs	r1, r3
 800193a:	23fa      	movs	r3, #250	; 0xfa
 800193c:	0098      	lsls	r0, r3, #2
 800193e:	f7fe fbe3 	bl	8000108 <__udivsi3>
 8001942:	0003      	movs	r3, r0
 8001944:	0019      	movs	r1, r3
 8001946:	0020      	movs	r0, r4
 8001948:	f7fe fbde 	bl	8000108 <__udivsi3>
 800194c:	0003      	movs	r3, r0
 800194e:	0018      	movs	r0, r3
 8001950:	f000 fd1f 	bl	8002392 <HAL_SYSTICK_Config>
 8001954:	1e03      	subs	r3, r0, #0
 8001956:	d001      	beq.n	800195c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e00f      	b.n	800197c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d80b      	bhi.n	800197a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	2301      	movs	r3, #1
 8001966:	425b      	negs	r3, r3
 8001968:	2200      	movs	r2, #0
 800196a:	0018      	movs	r0, r3
 800196c:	f000 fcec 	bl	8002348 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_InitTick+0x64>)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b003      	add	sp, #12
 8001982:	bd90      	pop	{r4, r7, pc}
 8001984:	20001c08 	.word	0x20001c08
 8001988:	20001c10 	.word	0x20001c10
 800198c:	20001c0c 	.word	0x20001c0c

08001990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x1c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	001a      	movs	r2, r3
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_IncTick+0x20>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	18d2      	adds	r2, r2, r3
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_IncTick+0x20>)
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	20001c10 	.word	0x20001c10
 80019b0:	20001ebc 	.word	0x20001ebc

080019b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <HAL_GetTick+0x10>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	20001ebc 	.word	0x20001ebc

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff fff0 	bl	80019b4 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	001a      	movs	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	189b      	adds	r3, r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	f7ff ffe0 	bl	80019b4 <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	20001c10 	.word	0x20001c10

08001a10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	230f      	movs	r3, #15
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e125      	b.n	8001c7a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10a      	bne.n	8001a4c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2234      	movs	r2, #52	; 0x34
 8001a40:	2100      	movs	r1, #0
 8001a42:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff fd3e 	bl	80014c8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a50:	2210      	movs	r2, #16
 8001a52:	4013      	ands	r3, r2
 8001a54:	d000      	beq.n	8001a58 <HAL_ADC_Init+0x48>
 8001a56:	e103      	b.n	8001c60 <HAL_ADC_Init+0x250>
 8001a58:	230f      	movs	r3, #15
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d000      	beq.n	8001a64 <HAL_ADC_Init+0x54>
 8001a62:	e0fd      	b.n	8001c60 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a6e:	d000      	beq.n	8001a72 <HAL_ADC_Init+0x62>
 8001a70:	e0f6      	b.n	8001c60 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	4a83      	ldr	r2, [pc, #524]	; (8001c84 <HAL_ADC_Init+0x274>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d112      	bne.n	8001ab6 <HAL_ADC_Init+0xa6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d009      	beq.n	8001ab2 <HAL_ADC_Init+0xa2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_Init+0xa6>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_Init+0xa8>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d116      	bne.n	8001aea <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2218      	movs	r2, #24
 8001ac4:	4393      	bics	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	0899      	lsrs	r1, r3, #2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4964      	ldr	r1, [pc, #400]	; (8001c88 <HAL_ADC_Init+0x278>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7e1b      	ldrb	r3, [r3, #24]
 8001afe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7e5b      	ldrb	r3, [r3, #25]
 8001b04:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b06:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e9b      	ldrb	r3, [r3, #26]
 8001b0c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d002      	beq.n	8001b1e <HAL_ADC_Init+0x10e>
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	015b      	lsls	r3, r3, #5
 8001b1c:	e000      	b.n	8001b20 <HAL_ADC_Init+0x110>
 8001b1e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b20:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b26:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_Init+0x124>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e000      	b.n	8001b36 <HAL_ADC_Init+0x126>
 8001b34:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001b36:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2124      	movs	r1, #36	; 0x24
 8001b3c:	5c5b      	ldrb	r3, [r3, r1]
 8001b3e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b40:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7edb      	ldrb	r3, [r3, #27]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d115      	bne.n	8001b7c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e9b      	ldrb	r3, [r3, #26]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	0252      	lsls	r2, r2, #9
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	e00b      	b.n	8001b7c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	2220      	movs	r2, #32
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b74:	2201      	movs	r2, #1
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69da      	ldr	r2, [r3, #28]
 8001b80:	23c2      	movs	r3, #194	; 0xc2
 8001b82:	33ff      	adds	r3, #255	; 0xff
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d007      	beq.n	8001b98 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b90:	4313      	orrs	r3, r2
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68d9      	ldr	r1, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	055b      	lsls	r3, r3, #21
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d01b      	beq.n	8001bec <HAL_ADC_Init+0x1dc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d017      	beq.n	8001bec <HAL_ADC_Init+0x1dc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d013      	beq.n	8001bec <HAL_ADC_Init+0x1dc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d00f      	beq.n	8001bec <HAL_ADC_Init+0x1dc>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d00b      	beq.n	8001bec <HAL_ADC_Init+0x1dc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d007      	beq.n	8001bec <HAL_ADC_Init+0x1dc>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2b06      	cmp	r3, #6
 8001be2:	d003      	beq.n	8001bec <HAL_ADC_Init+0x1dc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	2b07      	cmp	r3, #7
 8001bea:	d112      	bne.n	8001c12 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2107      	movs	r1, #7
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6959      	ldr	r1, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	2207      	movs	r2, #7
 8001c08:	401a      	ands	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_ADC_Init+0x27c>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d10b      	bne.n	8001c3a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	4393      	bics	r3, r2
 8001c30:	2201      	movs	r2, #1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c38:	e01c      	b.n	8001c74 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	2212      	movs	r2, #18
 8001c40:	4393      	bics	r3, r2
 8001c42:	2210      	movs	r2, #16
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	2201      	movs	r2, #1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001c56:	230f      	movs	r3, #15
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c5e:	e009      	b.n	8001c74 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	2210      	movs	r2, #16
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c74:	230f      	movs	r3, #15
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b004      	add	sp, #16
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	fffffefd 	.word	0xfffffefd
 8001c88:	fffe0219 	.word	0xfffe0219
 8001c8c:	833fffe7 	.word	0x833fffe7

08001c90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9c:	2317      	movs	r3, #23
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2204      	movs	r2, #4
 8001cac:	4013      	ands	r3, r2
 8001cae:	d15e      	bne.n	8001d6e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2234      	movs	r2, #52	; 0x34
 8001cb4:	5c9b      	ldrb	r3, [r3, r2]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Start_DMA+0x2e>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e05e      	b.n	8001d7c <HAL_ADC_Start_DMA+0xec>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2234      	movs	r2, #52	; 0x34
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	7e5b      	ldrb	r3, [r3, #25]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d007      	beq.n	8001cde <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001cce:	2317      	movs	r3, #23
 8001cd0:	18fc      	adds	r4, r7, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 f983 	bl	8001fe0 <ADC_Enable>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cde:	2317      	movs	r3, #23
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d146      	bne.n	8001d76 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cec:	4a25      	ldr	r2, [pc, #148]	; (8001d84 <HAL_ADC_Start_DMA+0xf4>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2234      	movs	r2, #52	; 0x34
 8001d04:	2100      	movs	r1, #0
 8001d06:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_ADC_Start_DMA+0xf8>)
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_ADC_Start_DMA+0xfc>)
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_ADC_Start_DMA+0x100>)
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	221c      	movs	r2, #28
 8001d26:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2110      	movs	r1, #16
 8001d34:	430a      	orrs	r2, r1
 8001d36:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2101      	movs	r1, #1
 8001d44:	430a      	orrs	r2, r1
 8001d46:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3340      	adds	r3, #64	; 0x40
 8001d52:	0019      	movs	r1, r3
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f000 fb70 	bl	800243c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2104      	movs	r1, #4
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	e003      	b.n	8001d76 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d6e:	2317      	movs	r3, #23
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	2202      	movs	r2, #2
 8001d74:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d76:	2317      	movs	r3, #23
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	781b      	ldrb	r3, [r3, #0]
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b007      	add	sp, #28
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	fffff0fe 	.word	0xfffff0fe
 8001d88:	080020e9 	.word	0x080020e9
 8001d8c:	0800219d 	.word	0x0800219d
 8001d90:	080021bb 	.word	0x080021bb

08001d94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dce:	230f      	movs	r3, #15
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	055b      	lsls	r3, r3, #21
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d011      	beq.n	8001e0a <HAL_ADC_ConfigChannel+0x46>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d00d      	beq.n	8001e0a <HAL_ADC_ConfigChannel+0x46>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d009      	beq.n	8001e0a <HAL_ADC_ConfigChannel+0x46>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d005      	beq.n	8001e0a <HAL_ADC_ConfigChannel+0x46>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d001      	beq.n	8001e0a <HAL_ADC_ConfigChannel+0x46>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2234      	movs	r2, #52	; 0x34
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x54>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e0d0      	b.n	8001fba <HAL_ADC_ConfigChannel+0x1f6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2234      	movs	r2, #52	; 0x34
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2204      	movs	r2, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d000      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x6a>
 8001e2c:	e0b4      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a64      	ldr	r2, [pc, #400]	; (8001fc4 <HAL_ADC_ConfigChannel+0x200>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d100      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x76>
 8001e38:	e082      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	055b      	lsls	r3, r3, #21
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d037      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d033      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x108>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d02f      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d02b      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x108>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d027      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x108>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d023      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x108>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d01f      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x108>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	2b07      	cmp	r3, #7
 8001e92:	d01b      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2107      	movs	r1, #7
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d012      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2107      	movs	r1, #7
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6959      	ldr	r1, [r3, #20]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d007      	beq.n	8001ee4 <HAL_ADC_ConfigChannel+0x120>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b11      	cmp	r3, #17
 8001eda:	d003      	beq.n	8001ee4 <HAL_ADC_ConfigChannel+0x120>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b12      	cmp	r3, #18
 8001ee2:	d163      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ee4:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_ADC_ConfigChannel+0x204>)
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d009      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x140>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b11      	cmp	r3, #17
 8001ef6:	d102      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x13a>
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	03db      	lsls	r3, r3, #15
 8001efc:	e004      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x144>
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	045b      	lsls	r3, r3, #17
 8001f02:	e001      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x144>
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	041b      	lsls	r3, r3, #16
 8001f08:	4a2f      	ldr	r2, [pc, #188]	; (8001fc8 <HAL_ADC_ConfigChannel+0x204>)
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d14a      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_ADC_ConfigChannel+0x208>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	492d      	ldr	r1, [pc, #180]	; (8001fd0 <HAL_ADC_ConfigChannel+0x20c>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7fe f8f3 	bl	8000108 <__udivsi3>
 8001f22:	0003      	movs	r3, r0
 8001f24:	001a      	movs	r2, r3
 8001f26:	0013      	movs	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	189b      	adds	r3, r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f9      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x16e>
 8001f3e:	e035      	b.n	8001fac <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4099      	lsls	r1, r3
 8001f4e:	000b      	movs	r3, r1
 8001f50:	43d9      	mvns	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	400a      	ands	r2, r1
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d007      	beq.n	8001f72 <HAL_ADC_ConfigChannel+0x1ae>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b11      	cmp	r3, #17
 8001f68:	d003      	beq.n	8001f72 <HAL_ADC_ConfigChannel+0x1ae>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d11c      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_ADC_ConfigChannel+0x204>)
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d007      	beq.n	8001f8e <HAL_ADC_ConfigChannel+0x1ca>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b11      	cmp	r3, #17
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x1c6>
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_ADC_ConfigChannel+0x210>)
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x1cc>
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_ADC_ConfigChannel+0x214>)
 8001f8c:	e000      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x1cc>
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_ADC_ConfigChannel+0x218>)
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <HAL_ADC_ConfigChannel+0x204>)
 8001f92:	400b      	ands	r3, r1
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e009      	b.n	8001fac <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2234      	movs	r2, #52	; 0x34
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b004      	add	sp, #16
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	00001001 	.word	0x00001001
 8001fc8:	40012708 	.word	0x40012708
 8001fcc:	20001c08 	.word	0x20001c08
 8001fd0:	000f4240 	.word	0x000f4240
 8001fd4:	ffbfffff 	.word	0xffbfffff
 8001fd8:	feffffff 	.word	0xfeffffff
 8001fdc:	ff7fffff 	.word	0xff7fffff

08001fe0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d112      	bne.n	8002024 <ADC_Enable+0x44>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	2b01      	cmp	r3, #1
 800200a:	d009      	beq.n	8002020 <ADC_Enable+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	401a      	ands	r2, r3
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	429a      	cmp	r2, r3
 800201e:	d101      	bne.n	8002024 <ADC_Enable+0x44>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <ADC_Enable+0x46>
 8002024:	2300      	movs	r3, #0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d152      	bne.n	80020d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <ADC_Enable+0xfc>)
 8002032:	4013      	ands	r3, r2
 8002034:	d00d      	beq.n	8002052 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	2210      	movs	r2, #16
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	2201      	movs	r2, #1
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e03f      	b.n	80020d2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <ADC_Enable+0x100>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	491f      	ldr	r1, [pc, #124]	; (80020e4 <ADC_Enable+0x104>)
 8002068:	0018      	movs	r0, r3
 800206a:	f7fe f84d 	bl	8000108 <__udivsi3>
 800206e:	0003      	movs	r3, r0
 8002070:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002072:	e002      	b.n	800207a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3b01      	subs	r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f9      	bne.n	8002074 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002080:	f7ff fc98 	bl	80019b4 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002088:	e01b      	b.n	80020c2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800208a:	f7ff fc93 	bl	80019b4 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d914      	bls.n	80020c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2201      	movs	r2, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d00d      	beq.n	80020c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	2210      	movs	r2, #16
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b6:	2201      	movs	r2, #1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e007      	b.n	80020d2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d1dc      	bne.n	800208a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b004      	add	sp, #16
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	80000017 	.word	0x80000017
 80020e0:	20001c08 	.word	0x20001c08
 80020e4:	000f4240 	.word	0x000f4240

080020e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	2250      	movs	r2, #80	; 0x50
 80020fc:	4013      	ands	r3, r2
 80020fe:	d140      	bne.n	8002182 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	23c0      	movs	r3, #192	; 0xc0
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	4013      	ands	r3, r2
 800211a:	d12d      	bne.n	8002178 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002120:	2b00      	cmp	r3, #0
 8002122:	d129      	bne.n	8002178 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2208      	movs	r2, #8
 800212c:	4013      	ands	r3, r2
 800212e:	2b08      	cmp	r3, #8
 8002130:	d122      	bne.n	8002178 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2204      	movs	r2, #4
 800213a:	4013      	ands	r3, r2
 800213c:	d110      	bne.n	8002160 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	210c      	movs	r1, #12
 800214a:	438a      	bics	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	4a11      	ldr	r2, [pc, #68]	; (8002198 <ADC_DMAConvCplt+0xb0>)
 8002154:	4013      	ands	r3, r2
 8002156:	2201      	movs	r2, #1
 8002158:	431a      	orrs	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
 800215e:	e00b      	b.n	8002178 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	2220      	movs	r2, #32
 8002166:	431a      	orrs	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	2201      	movs	r2, #1
 8002172:	431a      	orrs	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	0018      	movs	r0, r3
 800217c:	f7ff fe0a 	bl	8001d94 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002180:	e005      	b.n	800218e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	0010      	movs	r0, r2
 800218c:	4798      	blx	r3
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b004      	add	sp, #16
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	fffffefe 	.word	0xfffffefe

0800219c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff fdf9 	bl	8001da4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b004      	add	sp, #16
 80021b8:	bd80      	pop	{r7, pc}

080021ba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	2240      	movs	r2, #64	; 0x40
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	2204      	movs	r2, #4
 80021da:	431a      	orrs	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff fde6 	bl	8001db4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b004      	add	sp, #16
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	0002      	movs	r2, r0
 80021f8:	1dfb      	adds	r3, r7, #7
 80021fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	1dfb      	adds	r3, r7, #7
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b7f      	cmp	r3, #127	; 0x7f
 8002202:	d809      	bhi.n	8002218 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002204:	1dfb      	adds	r3, r7, #7
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	001a      	movs	r2, r3
 800220a:	231f      	movs	r3, #31
 800220c:	401a      	ands	r2, r3
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__NVIC_EnableIRQ+0x30>)
 8002210:	2101      	movs	r1, #1
 8002212:	4091      	lsls	r1, r2
 8002214:	000a      	movs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
  }
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	0002      	movs	r2, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002232:	1dfb      	adds	r3, r7, #7
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b7f      	cmp	r3, #127	; 0x7f
 8002238:	d828      	bhi.n	800228c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800223a:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <__NVIC_SetPriority+0xd4>)
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b25b      	sxtb	r3, r3
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	33c0      	adds	r3, #192	; 0xc0
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	589b      	ldr	r3, [r3, r2]
 800224a:	1dfa      	adds	r2, r7, #7
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	0011      	movs	r1, r2
 8002250:	2203      	movs	r2, #3
 8002252:	400a      	ands	r2, r1
 8002254:	00d2      	lsls	r2, r2, #3
 8002256:	21ff      	movs	r1, #255	; 0xff
 8002258:	4091      	lsls	r1, r2
 800225a:	000a      	movs	r2, r1
 800225c:	43d2      	mvns	r2, r2
 800225e:	401a      	ands	r2, r3
 8002260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	22ff      	movs	r2, #255	; 0xff
 8002268:	401a      	ands	r2, r3
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	0018      	movs	r0, r3
 8002270:	2303      	movs	r3, #3
 8002272:	4003      	ands	r3, r0
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002278:	481f      	ldr	r0, [pc, #124]	; (80022f8 <__NVIC_SetPriority+0xd4>)
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b25b      	sxtb	r3, r3
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	430a      	orrs	r2, r1
 8002284:	33c0      	adds	r3, #192	; 0xc0
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800228a:	e031      	b.n	80022f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800228c:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <__NVIC_SetPriority+0xd8>)
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	0019      	movs	r1, r3
 8002294:	230f      	movs	r3, #15
 8002296:	400b      	ands	r3, r1
 8002298:	3b08      	subs	r3, #8
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3306      	adds	r3, #6
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	3304      	adds	r3, #4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1dfa      	adds	r2, r7, #7
 80022a8:	7812      	ldrb	r2, [r2, #0]
 80022aa:	0011      	movs	r1, r2
 80022ac:	2203      	movs	r2, #3
 80022ae:	400a      	ands	r2, r1
 80022b0:	00d2      	lsls	r2, r2, #3
 80022b2:	21ff      	movs	r1, #255	; 0xff
 80022b4:	4091      	lsls	r1, r2
 80022b6:	000a      	movs	r2, r1
 80022b8:	43d2      	mvns	r2, r2
 80022ba:	401a      	ands	r2, r3
 80022bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	019b      	lsls	r3, r3, #6
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	401a      	ands	r2, r3
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	0018      	movs	r0, r3
 80022cc:	2303      	movs	r3, #3
 80022ce:	4003      	ands	r3, r0
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022d4:	4809      	ldr	r0, [pc, #36]	; (80022fc <__NVIC_SetPriority+0xd8>)
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	001c      	movs	r4, r3
 80022dc:	230f      	movs	r3, #15
 80022de:	4023      	ands	r3, r4
 80022e0:	3b08      	subs	r3, #8
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	430a      	orrs	r2, r1
 80022e6:	3306      	adds	r3, #6
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	18c3      	adds	r3, r0, r3
 80022ec:	3304      	adds	r3, #4
 80022ee:	601a      	str	r2, [r3, #0]
}
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b003      	add	sp, #12
 80022f6:	bd90      	pop	{r4, r7, pc}
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	1e5a      	subs	r2, r3, #1
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	045b      	lsls	r3, r3, #17
 8002310:	429a      	cmp	r2, r3
 8002312:	d301      	bcc.n	8002318 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002314:	2301      	movs	r3, #1
 8002316:	e010      	b.n	800233a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <SysTick_Config+0x44>)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	3a01      	subs	r2, #1
 800231e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002320:	2301      	movs	r3, #1
 8002322:	425b      	negs	r3, r3
 8002324:	2103      	movs	r1, #3
 8002326:	0018      	movs	r0, r3
 8002328:	f7ff ff7c 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SysTick_Config+0x44>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SysTick_Config+0x44>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	210f      	movs	r1, #15
 8002354:	187b      	adds	r3, r7, r1
 8002356:	1c02      	adds	r2, r0, #0
 8002358:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	187b      	adds	r3, r7, r1
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b25b      	sxtb	r3, r3
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f7ff ff5d 	bl	8002224 <__NVIC_SetPriority>
}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	0002      	movs	r2, r0
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b25b      	sxtb	r3, r3
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff ff33 	bl	80021f0 <__NVIC_EnableIRQ>
}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b002      	add	sp, #8
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff ffaf 	bl	8002300 <SysTick_Config>
 80023a2:	0003      	movs	r3, r0
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e036      	b.n	8002430 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2221      	movs	r2, #33	; 0x21
 80023c6:	2102      	movs	r1, #2
 80023c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_DMA_Init+0x8c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f946 	bl	80026a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2221      	movs	r2, #33	; 0x21
 8002422:	2101      	movs	r1, #1
 8002424:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}  
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}
 8002438:	ffffc00f 	.word	0xffffc00f

0800243c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800244a:	2317      	movs	r3, #23
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_DMA_Start_IT+0x24>
 800245c:	2302      	movs	r3, #2
 800245e:	e04f      	b.n	8002500 <HAL_DMA_Start_IT+0xc4>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	2101      	movs	r1, #1
 8002466:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2221      	movs	r2, #33	; 0x21
 800246c:	5c9b      	ldrb	r3, [r3, r2]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d13a      	bne.n	80024ea <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2221      	movs	r2, #33	; 0x21
 8002478:	2102      	movs	r1, #2
 800247a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	438a      	bics	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f8d7 	bl	800264c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	210e      	movs	r1, #14
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e00f      	b.n	80024d8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	210a      	movs	r1, #10
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2104      	movs	r1, #4
 80024d4:	438a      	bics	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2101      	movs	r1, #1
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e007      	b.n	80024fa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	2100      	movs	r1, #0
 80024f0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80024f2:	2317      	movs	r3, #23
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2202      	movs	r2, #2
 80024f8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80024fa:	2317      	movs	r3, #23
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
} 
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	b006      	add	sp, #24
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2204      	movs	r2, #4
 8002526:	409a      	lsls	r2, r3
 8002528:	0013      	movs	r3, r2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4013      	ands	r3, r2
 800252e:	d024      	beq.n	800257a <HAL_DMA_IRQHandler+0x72>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2204      	movs	r2, #4
 8002534:	4013      	ands	r3, r2
 8002536:	d020      	beq.n	800257a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2220      	movs	r2, #32
 8002540:	4013      	ands	r3, r2
 8002542:	d107      	bne.n	8002554 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2104      	movs	r1, #4
 8002550:	438a      	bics	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	2104      	movs	r1, #4
 800255e:	4091      	lsls	r1, r2
 8002560:	000a      	movs	r2, r1
 8002562:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d100      	bne.n	800256e <HAL_DMA_IRQHandler+0x66>
 800256c:	e06a      	b.n	8002644 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	0010      	movs	r0, r2
 8002576:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002578:	e064      	b.n	8002644 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2202      	movs	r2, #2
 8002580:	409a      	lsls	r2, r3
 8002582:	0013      	movs	r3, r2
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	d02b      	beq.n	80025e2 <HAL_DMA_IRQHandler+0xda>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2202      	movs	r2, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d027      	beq.n	80025e2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2220      	movs	r2, #32
 800259a:	4013      	ands	r3, r2
 800259c:	d10b      	bne.n	80025b6 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	210a      	movs	r1, #10
 80025aa:	438a      	bics	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2221      	movs	r2, #33	; 0x21
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025be:	2102      	movs	r1, #2
 80025c0:	4091      	lsls	r1, r2
 80025c2:	000a      	movs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	2100      	movs	r1, #0
 80025cc:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d036      	beq.n	8002644 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	0010      	movs	r0, r2
 80025de:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025e0:	e030      	b.n	8002644 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2208      	movs	r2, #8
 80025e8:	409a      	lsls	r2, r3
 80025ea:	0013      	movs	r3, r2
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4013      	ands	r3, r2
 80025f0:	d028      	beq.n	8002644 <HAL_DMA_IRQHandler+0x13c>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2208      	movs	r2, #8
 80025f6:	4013      	ands	r3, r2
 80025f8:	d024      	beq.n	8002644 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	210e      	movs	r1, #14
 8002606:	438a      	bics	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	2101      	movs	r1, #1
 8002614:	4091      	lsls	r1, r2
 8002616:	000a      	movs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2221      	movs	r2, #33	; 0x21
 8002624:	2101      	movs	r1, #1
 8002626:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	0010      	movs	r0, r2
 8002640:	4798      	blx	r3
    }
   }
}  
 8002642:	e7ff      	b.n	8002644 <HAL_DMA_IRQHandler+0x13c>
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}

0800264c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	2101      	movs	r1, #1
 8002664:	4091      	lsls	r1, r2
 8002666:	000a      	movs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b10      	cmp	r3, #16
 8002678:	d108      	bne.n	800268c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800268a:	e007      	b.n	800269c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	60da      	str	r2, [r3, #12]
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b004      	add	sp, #16
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	001a      	movs	r2, r3
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <DMA_CalcBaseAndBitshift+0x60>)
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d810      	bhi.n	80026da <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a12      	ldr	r2, [pc, #72]	; (8002708 <DMA_CalcBaseAndBitshift+0x64>)
 80026be:	4694      	mov	ip, r2
 80026c0:	4463      	add	r3, ip
 80026c2:	2114      	movs	r1, #20
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7fd fd1f 	bl	8000108 <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	009a      	lsls	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <DMA_CalcBaseAndBitshift+0x68>)
 80026d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80026d8:	e00f      	b.n	80026fa <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <DMA_CalcBaseAndBitshift+0x6c>)
 80026e0:	4694      	mov	ip, r2
 80026e2:	4463      	add	r3, ip
 80026e4:	2114      	movs	r1, #20
 80026e6:	0018      	movs	r0, r3
 80026e8:	f7fd fd0e 	bl	8000108 <__udivsi3>
 80026ec:	0003      	movs	r3, r0
 80026ee:	009a      	lsls	r2, r3, #2
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a07      	ldr	r2, [pc, #28]	; (8002714 <DMA_CalcBaseAndBitshift+0x70>)
 80026f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b002      	add	sp, #8
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	40020407 	.word	0x40020407
 8002708:	bffdfff8 	.word	0xbffdfff8
 800270c:	40020000 	.word	0x40020000
 8002710:	bffdfbf8 	.word	0xbffdfbf8
 8002714:	40020400 	.word	0x40020400

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002726:	e155      	b.n	80029d4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4091      	lsls	r1, r2
 8002732:	000a      	movs	r2, r1
 8002734:	4013      	ands	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d100      	bne.n	8002740 <HAL_GPIO_Init+0x28>
 800273e:	e146      	b.n	80029ce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	4013      	ands	r3, r2
 8002748:	2b01      	cmp	r3, #1
 800274a:	d005      	beq.n	8002758 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2203      	movs	r2, #3
 8002752:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002754:	2b02      	cmp	r3, #2
 8002756:	d130      	bne.n	80027ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	409a      	lsls	r2, r3
 8002766:	0013      	movs	r3, r2
 8002768:	43da      	mvns	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	0013      	movs	r3, r2
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800278e:	2201      	movs	r2, #1
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	409a      	lsls	r2, r3
 8002794:	0013      	movs	r3, r2
 8002796:	43da      	mvns	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	2201      	movs	r2, #1
 80027a6:	401a      	ands	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	409a      	lsls	r2, r3
 80027ac:	0013      	movs	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2203      	movs	r2, #3
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d017      	beq.n	80027f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	409a      	lsls	r2, r3
 80027d4:	0013      	movs	r3, r2
 80027d6:	43da      	mvns	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	409a      	lsls	r2, r3
 80027e8:	0013      	movs	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2203      	movs	r2, #3
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d123      	bne.n	800284a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	58d3      	ldr	r3, [r2, r3]
 800280e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2207      	movs	r2, #7
 8002814:	4013      	ands	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	409a      	lsls	r2, r3
 800281c:	0013      	movs	r3, r2
 800281e:	43da      	mvns	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2107      	movs	r1, #7
 800282e:	400b      	ands	r3, r1
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	409a      	lsls	r2, r3
 8002834:	0013      	movs	r3, r2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	0092      	lsls	r2, r2, #2
 8002846:	6939      	ldr	r1, [r7, #16]
 8002848:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	2203      	movs	r2, #3
 8002856:	409a      	lsls	r2, r3
 8002858:	0013      	movs	r3, r2
 800285a:	43da      	mvns	r2, r3
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2203      	movs	r2, #3
 8002868:	401a      	ands	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	409a      	lsls	r2, r3
 8002870:	0013      	movs	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	23c0      	movs	r3, #192	; 0xc0
 8002884:	029b      	lsls	r3, r3, #10
 8002886:	4013      	ands	r3, r2
 8002888:	d100      	bne.n	800288c <HAL_GPIO_Init+0x174>
 800288a:	e0a0      	b.n	80029ce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288c:	4b57      	ldr	r3, [pc, #348]	; (80029ec <HAL_GPIO_Init+0x2d4>)
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	4b56      	ldr	r3, [pc, #344]	; (80029ec <HAL_GPIO_Init+0x2d4>)
 8002892:	2101      	movs	r1, #1
 8002894:	430a      	orrs	r2, r1
 8002896:	619a      	str	r2, [r3, #24]
 8002898:	4b54      	ldr	r3, [pc, #336]	; (80029ec <HAL_GPIO_Init+0x2d4>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2201      	movs	r2, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028a4:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <HAL_GPIO_Init+0x2d8>)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	589b      	ldr	r3, [r3, r2]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2203      	movs	r2, #3
 80028b6:	4013      	ands	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	409a      	lsls	r2, r3
 80028be:	0013      	movs	r3, r2
 80028c0:	43da      	mvns	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	2390      	movs	r3, #144	; 0x90
 80028cc:	05db      	lsls	r3, r3, #23
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_Init+0x1ee>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a47      	ldr	r2, [pc, #284]	; (80029f4 <HAL_GPIO_Init+0x2dc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0x1ea>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a46      	ldr	r2, [pc, #280]	; (80029f8 <HAL_GPIO_Init+0x2e0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_Init+0x1e6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a45      	ldr	r2, [pc, #276]	; (80029fc <HAL_GPIO_Init+0x2e4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x1e2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a44      	ldr	r2, [pc, #272]	; (8002a00 <HAL_GPIO_Init+0x2e8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_Init+0x1de>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e008      	b.n	8002908 <HAL_GPIO_Init+0x1f0>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x1f0>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e004      	b.n	8002908 <HAL_GPIO_Init+0x1f0>
 80028fe:	2302      	movs	r3, #2
 8002900:	e002      	b.n	8002908 <HAL_GPIO_Init+0x1f0>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x1f0>
 8002906:	2300      	movs	r3, #0
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	2103      	movs	r1, #3
 800290c:	400a      	ands	r2, r1
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4093      	lsls	r3, r2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002918:	4935      	ldr	r1, [pc, #212]	; (80029f0 <HAL_GPIO_Init+0x2d8>)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43da      	mvns	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	025b      	lsls	r3, r3, #9
 800293e:	4013      	ands	r3, r2
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800294a:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43da      	mvns	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	029b      	lsls	r3, r3, #10
 8002968:	4013      	ands	r3, r2
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43da      	mvns	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	035b      	lsls	r3, r3, #13
 8002992:	4013      	ands	r3, r2
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	43da      	mvns	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	039b      	lsls	r3, r3, #14
 80029bc:	4013      	ands	r3, r2
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	40da      	lsrs	r2, r3
 80029dc:	1e13      	subs	r3, r2, #0
 80029de:	d000      	beq.n	80029e2 <HAL_GPIO_Init+0x2ca>
 80029e0:	e6a2      	b.n	8002728 <HAL_GPIO_Init+0x10>
  } 
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b006      	add	sp, #24
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40010000 	.word	0x40010000
 80029f4:	48000400 	.word	0x48000400
 80029f8:	48000800 	.word	0x48000800
 80029fc:	48000c00 	.word	0x48000c00
 8002a00:	48001000 	.word	0x48001000
 8002a04:	40010400 	.word	0x40010400

08002a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	0008      	movs	r0, r1
 8002a12:	0011      	movs	r1, r2
 8002a14:	1cbb      	adds	r3, r7, #2
 8002a16:	1c02      	adds	r2, r0, #0
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	1c7b      	adds	r3, r7, #1
 8002a1c:	1c0a      	adds	r2, r1, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a20:	1c7b      	adds	r3, r7, #1
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a28:	1cbb      	adds	r3, r7, #2
 8002a2a:	881a      	ldrh	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a30:	e003      	b.n	8002a3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a32:	1cbb      	adds	r3, r7, #2
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f000 fb76 	bl	8003144 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d100      	bne.n	8002a64 <HAL_RCC_OscConfig+0x20>
 8002a62:	e08e      	b.n	8002b82 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a64:	4bc5      	ldr	r3, [pc, #788]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	220c      	movs	r2, #12
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d00e      	beq.n	8002a8e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a70:	4bc2      	ldr	r3, [pc, #776]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	220c      	movs	r2, #12
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d117      	bne.n	8002aac <HAL_RCC_OscConfig+0x68>
 8002a7c:	4bbf      	ldr	r3, [pc, #764]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	23c0      	movs	r3, #192	; 0xc0
 8002a82:	025b      	lsls	r3, r3, #9
 8002a84:	401a      	ands	r2, r3
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	025b      	lsls	r3, r3, #9
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d10e      	bne.n	8002aac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8e:	4bbb      	ldr	r3, [pc, #748]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	029b      	lsls	r3, r3, #10
 8002a96:	4013      	ands	r3, r2
 8002a98:	d100      	bne.n	8002a9c <HAL_RCC_OscConfig+0x58>
 8002a9a:	e071      	b.n	8002b80 <HAL_RCC_OscConfig+0x13c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d000      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x62>
 8002aa4:	e06c      	b.n	8002b80 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f000 fb4c 	bl	8003144 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x80>
 8002ab4:	4bb1      	ldr	r3, [pc, #708]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4bb0      	ldr	r3, [pc, #704]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	0249      	lsls	r1, r1, #9
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e02f      	b.n	8002b24 <HAL_RCC_OscConfig+0xe0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0xa2>
 8002acc:	4bab      	ldr	r3, [pc, #684]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4baa      	ldr	r3, [pc, #680]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002ad2:	49ab      	ldr	r1, [pc, #684]	; (8002d80 <HAL_RCC_OscConfig+0x33c>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	4ba8      	ldr	r3, [pc, #672]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4ba7      	ldr	r3, [pc, #668]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002ade:	49a9      	ldr	r1, [pc, #676]	; (8002d84 <HAL_RCC_OscConfig+0x340>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e01e      	b.n	8002b24 <HAL_RCC_OscConfig+0xe0>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d10e      	bne.n	8002b0c <HAL_RCC_OscConfig+0xc8>
 8002aee:	4ba3      	ldr	r3, [pc, #652]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4ba2      	ldr	r3, [pc, #648]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	02c9      	lsls	r1, r1, #11
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	4b9f      	ldr	r3, [pc, #636]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b9e      	ldr	r3, [pc, #632]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	0249      	lsls	r1, r1, #9
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0xe0>
 8002b0c:	4b9b      	ldr	r3, [pc, #620]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b9a      	ldr	r3, [pc, #616]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002b12:	499b      	ldr	r1, [pc, #620]	; (8002d80 <HAL_RCC_OscConfig+0x33c>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	4b98      	ldr	r3, [pc, #608]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b97      	ldr	r3, [pc, #604]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002b1e:	4999      	ldr	r1, [pc, #612]	; (8002d84 <HAL_RCC_OscConfig+0x340>)
 8002b20:	400a      	ands	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d014      	beq.n	8002b56 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe ff42 	bl	80019b4 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b36:	f7fe ff3d 	bl	80019b4 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b64      	cmp	r3, #100	; 0x64
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e2fd      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b48:	4b8c      	ldr	r3, [pc, #560]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	4013      	ands	r3, r2
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0xf2>
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7fe ff2d 	bl	80019b4 <HAL_GetTick>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe ff28 	bl	80019b4 <HAL_GetTick>
 8002b64:	0002      	movs	r2, r0
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e2e8      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x11c>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2202      	movs	r2, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <HAL_RCC_OscConfig+0x14a>
 8002b8c:	e06c      	b.n	8002c68 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b8e:	4b7b      	ldr	r3, [pc, #492]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	220c      	movs	r2, #12
 8002b94:	4013      	ands	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b98:	4b78      	ldr	r3, [pc, #480]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	220c      	movs	r2, #12
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d11f      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1a0>
 8002ba4:	4b75      	ldr	r3, [pc, #468]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	23c0      	movs	r3, #192	; 0xc0
 8002baa:	025b      	lsls	r3, r3, #9
 8002bac:	401a      	ands	r2, r3
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d116      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	4b71      	ldr	r3, [pc, #452]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_OscConfig+0x188>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e2bb      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	22f8      	movs	r2, #248	; 0xf8
 8002bd2:	4393      	bics	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00da      	lsls	r2, r3, #3
 8002bdc:	4b67      	ldr	r3, [pc, #412]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	e041      	b.n	8002c68 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d024      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bec:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fedc 	bl	80019b4 <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe fed7 	bl	80019b4 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e297      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d0f1      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1e:	4b57      	ldr	r3, [pc, #348]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	22f8      	movs	r2, #248	; 0xf8
 8002c24:	4393      	bics	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	00da      	lsls	r2, r3, #3
 8002c2e:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e018      	b.n	8002c68 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b51      	ldr	r3, [pc, #324]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	438a      	bics	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fe feb7 	bl	80019b4 <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fe feb2 	bl	80019b4 <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e272      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2202      	movs	r2, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	d1f1      	bne.n	8002c4c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d036      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d019      	beq.n	8002cae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7a:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002c80:	2101      	movs	r1, #1
 8002c82:	430a      	orrs	r2, r1
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7fe fe95 	bl	80019b4 <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c90:	f7fe fe90 	bl	80019b4 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e250      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d0f1      	beq.n	8002c90 <HAL_RCC_OscConfig+0x24c>
 8002cac:	e018      	b.n	8002ce0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cae:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	438a      	bics	r2, r1
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fe7b 	bl	80019b4 <HAL_GetTick>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fe76 	bl	80019b4 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e236      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd6:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2202      	movs	r2, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d1f1      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d100      	bne.n	8002cec <HAL_RCC_OscConfig+0x2a8>
 8002cea:	e0b5      	b.n	8002e58 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cec:	201f      	movs	r0, #31
 8002cee:	183b      	adds	r3, r7, r0
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf4:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	055b      	lsls	r3, r3, #21
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d110      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	0549      	lsls	r1, r1, #21
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	61da      	str	r2, [r3, #28]
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	055b      	lsls	r3, r3, #21
 8002d16:	4013      	ands	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d1c:	183b      	adds	r3, r7, r0
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_OscConfig+0x344>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d11a      	bne.n	8002d64 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <HAL_RCC_OscConfig+0x344>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <HAL_RCC_OscConfig+0x344>)
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	0049      	lsls	r1, r1, #1
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fe3a 	bl	80019b4 <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7fe fe35 	bl	80019b4 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b64      	cmp	r3, #100	; 0x64
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1f5      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x344>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4013      	ands	r3, r2
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10f      	bne.n	8002d8c <HAL_RCC_OscConfig+0x348>
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	4b02      	ldr	r3, [pc, #8]	; (8002d7c <HAL_RCC_OscConfig+0x338>)
 8002d72:	2101      	movs	r1, #1
 8002d74:	430a      	orrs	r2, r1
 8002d76:	621a      	str	r2, [r3, #32]
 8002d78:	e036      	b.n	8002de8 <HAL_RCC_OscConfig+0x3a4>
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	fffeffff 	.word	0xfffeffff
 8002d84:	fffbffff 	.word	0xfffbffff
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10c      	bne.n	8002dae <HAL_RCC_OscConfig+0x36a>
 8002d94:	4bca      	ldr	r3, [pc, #808]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	4bc9      	ldr	r3, [pc, #804]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	621a      	str	r2, [r3, #32]
 8002da0:	4bc7      	ldr	r3, [pc, #796]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	4bc6      	ldr	r3, [pc, #792]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002da6:	2104      	movs	r1, #4
 8002da8:	438a      	bics	r2, r1
 8002daa:	621a      	str	r2, [r3, #32]
 8002dac:	e01c      	b.n	8002de8 <HAL_RCC_OscConfig+0x3a4>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b05      	cmp	r3, #5
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x38c>
 8002db6:	4bc2      	ldr	r3, [pc, #776]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002db8:	6a1a      	ldr	r2, [r3, #32]
 8002dba:	4bc1      	ldr	r3, [pc, #772]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	621a      	str	r2, [r3, #32]
 8002dc2:	4bbf      	ldr	r3, [pc, #764]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	4bbe      	ldr	r3, [pc, #760]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	621a      	str	r2, [r3, #32]
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0x3a4>
 8002dd0:	4bbb      	ldr	r3, [pc, #748]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	4bba      	ldr	r3, [pc, #744]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	438a      	bics	r2, r1
 8002dda:	621a      	str	r2, [r3, #32]
 8002ddc:	4bb8      	ldr	r3, [pc, #736]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002dde:	6a1a      	ldr	r2, [r3, #32]
 8002de0:	4bb7      	ldr	r3, [pc, #732]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002de2:	2104      	movs	r1, #4
 8002de4:	438a      	bics	r2, r1
 8002de6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d014      	beq.n	8002e1a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df0:	f7fe fde0 	bl	80019b4 <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	e009      	b.n	8002e0e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fe fddb 	bl	80019b4 <HAL_GetTick>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	4aaf      	ldr	r2, [pc, #700]	; (80030c4 <HAL_RCC_OscConfig+0x680>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e19a      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	4bac      	ldr	r3, [pc, #688]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	2202      	movs	r2, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x3b6>
 8002e18:	e013      	b.n	8002e42 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fdcb 	bl	80019b4 <HAL_GetTick>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e22:	e009      	b.n	8002e38 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e24:	f7fe fdc6 	bl	80019b4 <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	4aa5      	ldr	r2, [pc, #660]	; (80030c4 <HAL_RCC_OscConfig+0x680>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e185      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	4ba1      	ldr	r3, [pc, #644]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e42:	231f      	movs	r3, #31
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4c:	4b9c      	ldr	r3, [pc, #624]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	4b9b      	ldr	r3, [pc, #620]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002e52:	499d      	ldr	r1, [pc, #628]	; (80030c8 <HAL_RCC_OscConfig+0x684>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d063      	beq.n	8002f2a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d12a      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e6a:	4b95      	ldr	r3, [pc, #596]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6e:	4b94      	ldr	r3, [pc, #592]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002e70:	2104      	movs	r1, #4
 8002e72:	430a      	orrs	r2, r1
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e76:	4b92      	ldr	r3, [pc, #584]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7a:	4b91      	ldr	r3, [pc, #580]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fd97 	bl	80019b4 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e8c:	f7fe fd92 	bl	80019b4 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e152      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e9e:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d0f1      	beq.n	8002e8c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ea8:	4b85      	ldr	r3, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	22f8      	movs	r2, #248	; 0xf8
 8002eae:	4393      	bics	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	00da      	lsls	r2, r3, #3
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ebe:	e034      	b.n	8002f2a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	3305      	adds	r3, #5
 8002ec6:	d111      	bne.n	8002eec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ec8:	4b7d      	ldr	r3, [pc, #500]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ecc:	4b7c      	ldr	r3, [pc, #496]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002ece:	2104      	movs	r1, #4
 8002ed0:	438a      	bics	r2, r1
 8002ed2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ed4:	4b7a      	ldr	r3, [pc, #488]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	22f8      	movs	r2, #248	; 0xf8
 8002eda:	4393      	bics	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	00da      	lsls	r2, r3, #3
 8002ee4:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eea:	e01e      	b.n	8002f2a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002eec:	4b74      	ldr	r3, [pc, #464]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef0:	4b73      	ldr	r3, [pc, #460]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ef8:	4b71      	ldr	r3, [pc, #452]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efc:	4b70      	ldr	r3, [pc, #448]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	438a      	bics	r2, r1
 8002f02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f04:	f7fe fd56 	bl	80019b4 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f0e:	f7fe fd51 	bl	80019b4 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e111      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f20:	4b67      	ldr	r3, [pc, #412]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	2202      	movs	r2, #2
 8002f26:	4013      	ands	r3, r2
 8002f28:	d1f1      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	4013      	ands	r3, r2
 8002f32:	d05c      	beq.n	8002fee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f34:	4b62      	ldr	r3, [pc, #392]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	220c      	movs	r2, #12
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d00e      	beq.n	8002f5e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f40:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	220c      	movs	r2, #12
 8002f46:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d114      	bne.n	8002f76 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f4c:	4b5c      	ldr	r3, [pc, #368]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	23c0      	movs	r3, #192	; 0xc0
 8002f52:	025b      	lsls	r3, r3, #9
 8002f54:	401a      	ands	r2, r3
 8002f56:	23c0      	movs	r3, #192	; 0xc0
 8002f58:	025b      	lsls	r3, r3, #9
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d10b      	bne.n	8002f76 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f5e:	4b58      	ldr	r3, [pc, #352]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	025b      	lsls	r3, r3, #9
 8002f66:	4013      	ands	r3, r2
 8002f68:	d040      	beq.n	8002fec <HAL_RCC_OscConfig+0x5a8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d03c      	beq.n	8002fec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0e6      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f7e:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f82:	4b4f      	ldr	r3, [pc, #316]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	0249      	lsls	r1, r1, #9
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fd12 	bl	80019b4 <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f96:	f7fe fd0d 	bl	80019b4 <HAL_GetTick>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0cd      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	025b      	lsls	r3, r3, #9
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x552>
 8002fb4:	e01b      	b.n	8002fee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002fb6:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002fbc:	4943      	ldr	r1, [pc, #268]	; (80030cc <HAL_RCC_OscConfig+0x688>)
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fcf7 	bl	80019b4 <HAL_GetTick>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fcc:	f7fe fcf2 	bl	80019b4 <HAL_GetTick>
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0b2      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002fde:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	025b      	lsls	r3, r3, #9
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x588>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002fec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d100      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x5b4>
 8002ff6:	e0a4      	b.n	8003142 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff8:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	220c      	movs	r2, #12
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b08      	cmp	r3, #8
 8003002:	d100      	bne.n	8003006 <HAL_RCC_OscConfig+0x5c2>
 8003004:	e078      	b.n	80030f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b02      	cmp	r3, #2
 800300c:	d14c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8003014:	492e      	ldr	r1, [pc, #184]	; (80030d0 <HAL_RCC_OscConfig+0x68c>)
 8003016:	400a      	ands	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fccb 	bl	80019b4 <HAL_GetTick>
 800301e:	0003      	movs	r3, r0
 8003020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fcc6 	bl	80019b4 <HAL_GetTick>
 8003028:	0002      	movs	r2, r0
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e086      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	049b      	lsls	r3, r3, #18
 800303e:	4013      	ands	r3, r2
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003042:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	220f      	movs	r2, #15
 8003048:	4393      	bics	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8003052:	430a      	orrs	r2, r1
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <HAL_RCC_OscConfig+0x690>)
 800305c:	4013      	ands	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	431a      	orrs	r2, r3
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003070:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0449      	lsls	r1, r1, #17
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fc99 	bl	80019b4 <HAL_GetTick>
 8003082:	0003      	movs	r3, r0
 8003084:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fc94 	bl	80019b4 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e054      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	049b      	lsls	r3, r3, #18
 80030a2:	4013      	ands	r3, r2
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x644>
 80030a6:	e04c      	b.n	8003142 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_RCC_OscConfig+0x67c>)
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <HAL_RCC_OscConfig+0x68c>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fe fc7e 	bl	80019b4 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030bc:	e015      	b.n	80030ea <HAL_RCC_OscConfig+0x6a6>
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	40021000 	.word	0x40021000
 80030c4:	00001388 	.word	0x00001388
 80030c8:	efffffff 	.word	0xefffffff
 80030cc:	fffeffff 	.word	0xfffeffff
 80030d0:	feffffff 	.word	0xfeffffff
 80030d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe fc6c 	bl	80019b4 <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e02c      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_RCC_OscConfig+0x708>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	049b      	lsls	r3, r3, #18
 80030f2:	4013      	ands	r3, r2
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x694>
 80030f6:	e024      	b.n	8003142 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e01f      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_OscConfig+0x708>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <HAL_RCC_OscConfig+0x708>)
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	23c0      	movs	r3, #192	; 0xc0
 8003114:	025b      	lsls	r3, r3, #9
 8003116:	401a      	ands	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	429a      	cmp	r2, r3
 800311e:	d10e      	bne.n	800313e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	220f      	movs	r2, #15
 8003124:	401a      	ands	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d107      	bne.n	800313e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	23f0      	movs	r3, #240	; 0xf0
 8003132:	039b      	lsls	r3, r3, #14
 8003134:	401a      	ands	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b008      	add	sp, #32
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0bf      	b.n	80032e4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b61      	ldr	r3, [pc, #388]	; (80032ec <HAL_RCC_ClockConfig+0x19c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2201      	movs	r2, #1
 800316a:	4013      	ands	r3, r2
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d911      	bls.n	8003196 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b5e      	ldr	r3, [pc, #376]	; (80032ec <HAL_RCC_ClockConfig+0x19c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2201      	movs	r2, #1
 8003178:	4393      	bics	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <HAL_RCC_ClockConfig+0x19c>)
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003184:	4b59      	ldr	r3, [pc, #356]	; (80032ec <HAL_RCC_ClockConfig+0x19c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4013      	ands	r3, r2
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d001      	beq.n	8003196 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0a6      	b.n	80032e4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2202      	movs	r2, #2
 800319c:	4013      	ands	r3, r2
 800319e:	d015      	beq.n	80031cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2204      	movs	r2, #4
 80031a6:	4013      	ands	r3, r2
 80031a8:	d006      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031aa:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 80031b0:	21e0      	movs	r1, #224	; 0xe0
 80031b2:	00c9      	lsls	r1, r1, #3
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b4d      	ldr	r3, [pc, #308]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	22f0      	movs	r2, #240	; 0xf0
 80031be:	4393      	bics	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2201      	movs	r2, #1
 80031d2:	4013      	ands	r3, r2
 80031d4:	d04c      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	029b      	lsls	r3, r3, #10
 80031e6:	4013      	ands	r3, r2
 80031e8:	d120      	bne.n	800322c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07a      	b.n	80032e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	049b      	lsls	r3, r3, #18
 80031fe:	4013      	ands	r3, r2
 8003200:	d114      	bne.n	800322c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06e      	b.n	80032e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b03      	cmp	r3, #3
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 8003210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	4013      	ands	r3, r2
 8003218:	d108      	bne.n	800322c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e062      	b.n	80032e4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2202      	movs	r2, #2
 8003224:	4013      	ands	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e05b      	b.n	80032e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322c:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	4393      	bics	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fe fbb8 	bl	80019b4 <HAL_GetTick>
 8003244:	0003      	movs	r3, r0
 8003246:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003248:	e009      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324a:	f7fe fbb3 	bl	80019b4 <HAL_GetTick>
 800324e:	0002      	movs	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <HAL_RCC_ClockConfig+0x1a4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e042      	b.n	80032e4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	220c      	movs	r2, #12
 8003264:	401a      	ands	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1ec      	bne.n	800324a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_RCC_ClockConfig+0x19c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2201      	movs	r2, #1
 8003276:	4013      	ands	r3, r2
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d211      	bcs.n	80032a2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_RCC_ClockConfig+0x19c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2201      	movs	r2, #1
 8003284:	4393      	bics	r3, r2
 8003286:	0019      	movs	r1, r3
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_RCC_ClockConfig+0x19c>)
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_RCC_ClockConfig+0x19c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e020      	b.n	80032e4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2204      	movs	r2, #4
 80032a8:	4013      	ands	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <HAL_RCC_ClockConfig+0x1a8>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032c0:	f000 f820 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c4:	0001      	movs	r1, r0
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_RCC_ClockConfig+0x1a0>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	220f      	movs	r2, #15
 80032ce:	4013      	ands	r3, r2
 80032d0:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_RCC_ClockConfig+0x1ac>)
 80032d2:	5cd3      	ldrb	r3, [r2, r3]
 80032d4:	000a      	movs	r2, r1
 80032d6:	40da      	lsrs	r2, r3
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1b0>)
 80032da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80032dc:	2003      	movs	r0, #3
 80032de:	f7fe fb23 	bl	8001928 <HAL_InitTick>
  
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b004      	add	sp, #16
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40022000 	.word	0x40022000
 80032f0:	40021000 	.word	0x40021000
 80032f4:	00001388 	.word	0x00001388
 80032f8:	fffff8ff 	.word	0xfffff8ff
 80032fc:	080079ec 	.word	0x080079ec
 8003300:	20001c08 	.word	0x20001c08

08003304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b08f      	sub	sp, #60	; 0x3c
 8003308:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800330a:	2314      	movs	r3, #20
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	4a38      	ldr	r2, [pc, #224]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xec>)
 8003310:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003312:	c313      	stmia	r3!, {r0, r1, r4}
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	4a36      	ldr	r2, [pc, #216]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800331c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800331e:	c313      	stmia	r3!, {r0, r1, r4}
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003328:	2300      	movs	r3, #0
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
 800332c:	2300      	movs	r3, #0
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	220c      	movs	r2, #12
 8003342:	4013      	ands	r3, r2
 8003344:	2b0c      	cmp	r3, #12
 8003346:	d047      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0xd4>
 8003348:	d849      	bhi.n	80033de <HAL_RCC_GetSysClockFreq+0xda>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d002      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x50>
 800334e:	2b08      	cmp	r3, #8
 8003350:	d003      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x56>
 8003352:	e044      	b.n	80033de <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003354:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003356:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003358:	e044      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	0c9b      	lsrs	r3, r3, #18
 800335e:	220f      	movs	r2, #15
 8003360:	4013      	ands	r3, r2
 8003362:	2214      	movs	r2, #20
 8003364:	18ba      	adds	r2, r7, r2
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800336a:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	220f      	movs	r2, #15
 8003370:	4013      	ands	r3, r2
 8003372:	1d3a      	adds	r2, r7, #4
 8003374:	5cd3      	ldrb	r3, [r2, r3]
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337a:	23c0      	movs	r3, #192	; 0xc0
 800337c:	025b      	lsls	r3, r3, #9
 800337e:	401a      	ands	r2, r3
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	025b      	lsls	r3, r3, #9
 8003384:	429a      	cmp	r2, r3
 8003386:	d109      	bne.n	800339c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338a:	481c      	ldr	r0, [pc, #112]	; (80033fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800338c:	f7fc febc 	bl	8000108 <__udivsi3>
 8003390:	0003      	movs	r3, r0
 8003392:	001a      	movs	r2, r3
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	4353      	muls	r3, r2
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
 800339a:	e01a      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800339c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339e:	23c0      	movs	r3, #192	; 0xc0
 80033a0:	025b      	lsls	r3, r3, #9
 80033a2:	401a      	ands	r2, r3
 80033a4:	23c0      	movs	r3, #192	; 0xc0
 80033a6:	025b      	lsls	r3, r3, #9
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d109      	bne.n	80033c0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ae:	4814      	ldr	r0, [pc, #80]	; (8003400 <HAL_RCC_GetSysClockFreq+0xfc>)
 80033b0:	f7fc feaa 	bl	8000108 <__udivsi3>
 80033b4:	0003      	movs	r3, r0
 80033b6:	001a      	movs	r2, r3
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	4353      	muls	r3, r2
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
 80033be:	e008      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c2:	480e      	ldr	r0, [pc, #56]	; (80033fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80033c4:	f7fc fea0 	bl	8000108 <__udivsi3>
 80033c8:	0003      	movs	r3, r0
 80033ca:	001a      	movs	r2, r3
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	4353      	muls	r3, r2
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80033d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033d6:	e005      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <HAL_RCC_GetSysClockFreq+0xfc>)
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033dc:	e002      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80033e6:	0018      	movs	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b00f      	add	sp, #60	; 0x3c
 80033ec:	bd90      	pop	{r4, r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	08007948 	.word	0x08007948
 80033f4:	08007958 	.word	0x08007958
 80033f8:	40021000 	.word	0x40021000
 80033fc:	007a1200 	.word	0x007a1200
 8003400:	02dc6c00 	.word	0x02dc6c00

08003404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b02      	ldr	r3, [pc, #8]	; (8003414 <HAL_RCC_GetHCLKFreq+0x10>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	20001c08 	.word	0x20001c08

08003418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800341c:	f7ff fff2 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003420:	0001      	movs	r1, r0
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	2207      	movs	r2, #7
 800342a:	4013      	ands	r3, r2
 800342c:	4a04      	ldr	r2, [pc, #16]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	40d9      	lsrs	r1, r3
 8003432:	000b      	movs	r3, r1
}    
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	40021000 	.word	0x40021000
 8003440:	080079fc 	.word	0x080079fc

08003444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	025b      	lsls	r3, r3, #9
 800345c:	4013      	ands	r3, r2
 800345e:	d100      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003460:	e08e      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003462:	2017      	movs	r0, #23
 8003464:	183b      	adds	r3, r7, r0
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346a:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	055b      	lsls	r3, r3, #21
 8003472:	4013      	ands	r3, r2
 8003474:	d110      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	4b6b      	ldr	r3, [pc, #428]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	4b6a      	ldr	r3, [pc, #424]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	0549      	lsls	r1, r1, #21
 8003480:	430a      	orrs	r2, r1
 8003482:	61da      	str	r2, [r3, #28]
 8003484:	4b67      	ldr	r3, [pc, #412]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	055b      	lsls	r3, r3, #21
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003492:	183b      	adds	r3, r7, r0
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	d11a      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a4:	4b60      	ldr	r3, [pc, #384]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b5f      	ldr	r3, [pc, #380]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	0049      	lsls	r1, r1, #1
 80034ae:	430a      	orrs	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fa7f 	bl	80019b4 <HAL_GetTick>
 80034b6:	0003      	movs	r3, r0
 80034b8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ba:	e008      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fe fa7a 	bl	80019b4 <HAL_GetTick>
 80034c0:	0002      	movs	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e0a6      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ce:	4b56      	ldr	r3, [pc, #344]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4013      	ands	r3, r2
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034da:	4b52      	ldr	r3, [pc, #328]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034dc:	6a1a      	ldr	r2, [r3, #32]
 80034de:	23c0      	movs	r3, #192	; 0xc0
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4013      	ands	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d034      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	23c0      	movs	r3, #192	; 0xc0
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4013      	ands	r3, r2
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d02c      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034fc:	4b49      	ldr	r3, [pc, #292]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a4a      	ldr	r2, [pc, #296]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003502:	4013      	ands	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	4b46      	ldr	r3, [pc, #280]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	0249      	lsls	r1, r1, #9
 8003510:	430a      	orrs	r2, r1
 8003512:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003514:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	4b42      	ldr	r3, [pc, #264]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800351a:	4945      	ldr	r1, [pc, #276]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800351c:	400a      	ands	r2, r1
 800351e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003520:	4b40      	ldr	r3, [pc, #256]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	4013      	ands	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fe fa41 	bl	80019b4 <HAL_GetTick>
 8003532:	0003      	movs	r3, r0
 8003534:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e009      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe fa3c 	bl	80019b4 <HAL_GetTick>
 800353c:	0002      	movs	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e067      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	2202      	movs	r2, #2
 8003552:	4013      	ands	r3, r2
 8003554:	d0f0      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003556:	4b33      	ldr	r3, [pc, #204]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4a34      	ldr	r2, [pc, #208]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800355c:	4013      	ands	r3, r2
 800355e:	0019      	movs	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003566:	430a      	orrs	r2, r1
 8003568:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800356a:	2317      	movs	r3, #23
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800357a:	492f      	ldr	r1, [pc, #188]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800357c:	400a      	ands	r2, r1
 800357e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2201      	movs	r2, #1
 8003586:	4013      	ands	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800358a:	4b26      	ldr	r3, [pc, #152]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	2203      	movs	r2, #3
 8003590:	4393      	bics	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	4b22      	ldr	r3, [pc, #136]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800359a:	430a      	orrs	r2, r1
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2202      	movs	r2, #2
 80035a4:	4013      	ands	r3, r2
 80035a6:	d009      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	4a23      	ldr	r2, [pc, #140]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035b8:	430a      	orrs	r2, r1
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	02db      	lsls	r3, r3, #11
 80035c4:	4013      	ands	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	0019      	movs	r1, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035d8:	430a      	orrs	r2, r1
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2220      	movs	r2, #32
 80035e2:	4013      	ands	r3, r2
 80035e4:	d009      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	2210      	movs	r2, #16
 80035ec:	4393      	bics	r3, r2
 80035ee:	0019      	movs	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035f6:	430a      	orrs	r2, r1
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4013      	ands	r3, r2
 8003604:	d009      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	2240      	movs	r2, #64	; 0x40
 800360c:	4393      	bics	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699a      	ldr	r2, [r3, #24]
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003616:	430a      	orrs	r2, r1
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b006      	add	sp, #24
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	40007000 	.word	0x40007000
 800362c:	fffffcff 	.word	0xfffffcff
 8003630:	fffeffff 	.word	0xfffeffff
 8003634:	00001388 	.word	0x00001388
 8003638:	efffffff 	.word	0xefffffff
 800363c:	fffcffff 	.word	0xfffcffff
 8003640:	fff3ffff 	.word	0xfff3ffff

08003644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0a8      	b.n	80037a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	2382      	movs	r3, #130	; 0x82
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	429a      	cmp	r2, r3
 8003668:	d009      	beq.n	800367e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	61da      	str	r2, [r3, #28]
 8003670:	e005      	b.n	800367e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	225d      	movs	r2, #93	; 0x5d
 8003688:	5c9b      	ldrb	r3, [r3, r2]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	225c      	movs	r2, #92	; 0x5c
 8003694:	2100      	movs	r1, #0
 8003696:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	0018      	movs	r0, r3
 800369c:	f7fd ff9a 	bl	80015d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	225d      	movs	r2, #93	; 0x5d
 80036a4:	2102      	movs	r1, #2
 80036a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2140      	movs	r1, #64	; 0x40
 80036b4:	438a      	bics	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	23e0      	movs	r3, #224	; 0xe0
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d902      	bls.n	80036ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e002      	b.n	80036d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	015b      	lsls	r3, r3, #5
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	23f0      	movs	r3, #240	; 0xf0
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	429a      	cmp	r2, r3
 80036da:	d008      	beq.n	80036ee <HAL_SPI_Init+0xaa>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	23e0      	movs	r3, #224	; 0xe0
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d002      	beq.n	80036ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	2382      	movs	r3, #130	; 0x82
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	401a      	ands	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	2384      	movs	r3, #132	; 0x84
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	400b      	ands	r3, r1
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2102      	movs	r1, #2
 800370a:	400b      	ands	r3, r1
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	2101      	movs	r1, #1
 8003714:	400b      	ands	r3, r1
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6999      	ldr	r1, [r3, #24]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	400b      	ands	r3, r1
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2138      	movs	r1, #56	; 0x38
 800372a:	400b      	ands	r3, r1
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	400b      	ands	r3, r1
 8003736:	431a      	orrs	r2, r3
 8003738:	0011      	movs	r1, r2
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	019b      	lsls	r3, r3, #6
 8003742:	401a      	ands	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	2204      	movs	r2, #4
 8003754:	401a      	ands	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2110      	movs	r1, #16
 800375c:	400b      	ands	r3, r1
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	2108      	movs	r1, #8
 8003766:	400b      	ands	r3, r1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68d9      	ldr	r1, [r3, #12]
 800376e:	23f0      	movs	r3, #240	; 0xf0
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	400b      	ands	r3, r1
 8003774:	431a      	orrs	r2, r3
 8003776:	0011      	movs	r1, r2
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	015b      	lsls	r3, r3, #5
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4907      	ldr	r1, [pc, #28]	; (80037b0 <HAL_SPI_Init+0x16c>)
 8003794:	400a      	ands	r2, r1
 8003796:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	225d      	movs	r2, #93	; 0x5d
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b004      	add	sp, #16
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	fffff7ff 	.word	0xfffff7ff

080037b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037c4:	231f      	movs	r3, #31
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	225c      	movs	r2, #92	; 0x5c
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_SPI_Transmit+0x26>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e140      	b.n	8003a5c <HAL_SPI_Transmit+0x2a8>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	225c      	movs	r2, #92	; 0x5c
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037e2:	f7fe f8e7 	bl	80019b4 <HAL_GetTick>
 80037e6:	0003      	movs	r3, r0
 80037e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80037ea:	2316      	movs	r3, #22
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	225d      	movs	r2, #93	; 0x5d
 80037f8:	5c9b      	ldrb	r3, [r3, r2]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d004      	beq.n	800380a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003800:	231f      	movs	r3, #31
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2202      	movs	r2, #2
 8003806:	701a      	strb	r2, [r3, #0]
    goto error;
 8003808:	e11d      	b.n	8003a46 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_SPI_Transmit+0x64>
 8003810:	1dbb      	adds	r3, r7, #6
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003818:	231f      	movs	r3, #31
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003820:	e111      	b.n	8003a46 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	225d      	movs	r2, #93	; 0x5d
 8003826:	2103      	movs	r1, #3
 8003828:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1dba      	adds	r2, r7, #6
 800383a:	8812      	ldrh	r2, [r2, #0]
 800383c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1dba      	adds	r2, r7, #6
 8003842:	8812      	ldrh	r2, [r2, #0]
 8003844:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2244      	movs	r2, #68	; 0x44
 8003850:	2100      	movs	r1, #0
 8003852:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2246      	movs	r2, #70	; 0x46
 8003858:	2100      	movs	r1, #0
 800385a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	429a      	cmp	r2, r3
 8003872:	d110      	bne.n	8003896 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2140      	movs	r1, #64	; 0x40
 8003880:	438a      	bics	r2, r1
 8003882:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	01c9      	lsls	r1, r1, #7
 8003892:	430a      	orrs	r2, r1
 8003894:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2240      	movs	r2, #64	; 0x40
 800389e:	4013      	ands	r3, r2
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d007      	beq.n	80038b4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2140      	movs	r1, #64	; 0x40
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	23e0      	movs	r3, #224	; 0xe0
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	429a      	cmp	r2, r3
 80038be:	d94e      	bls.n	800395e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <HAL_SPI_Transmit+0x11e>
 80038c8:	2316      	movs	r3, #22
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d13f      	bne.n	8003952 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	1c9a      	adds	r2, r3, #2
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038f6:	e02c      	b.n	8003952 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2202      	movs	r2, #2
 8003900:	4013      	ands	r3, r2
 8003902:	2b02      	cmp	r3, #2
 8003904:	d112      	bne.n	800392c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	881a      	ldrh	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	1c9a      	adds	r2, r3, #2
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	; 0x3e
 800392a:	e012      	b.n	8003952 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392c:	f7fe f842 	bl	80019b4 <HAL_GetTick>
 8003930:	0002      	movs	r2, r0
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d802      	bhi.n	8003942 <HAL_SPI_Transmit+0x18e>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	3301      	adds	r3, #1
 8003940:	d102      	bne.n	8003948 <HAL_SPI_Transmit+0x194>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003948:	231f      	movs	r3, #31
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2203      	movs	r2, #3
 800394e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003950:	e079      	b.n	8003a46 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1cd      	bne.n	80038f8 <HAL_SPI_Transmit+0x144>
 800395c:	e04f      	b.n	80039fe <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_SPI_Transmit+0x1bc>
 8003966:	2316      	movs	r3, #22
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d141      	bne.n	80039f4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003996:	e02d      	b.n	80039f4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2202      	movs	r2, #2
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d113      	bne.n	80039ce <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	7812      	ldrb	r2, [r2, #0]
 80039b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039cc:	e012      	b.n	80039f4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ce:	f7fd fff1 	bl	80019b4 <HAL_GetTick>
 80039d2:	0002      	movs	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d802      	bhi.n	80039e4 <HAL_SPI_Transmit+0x230>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	3301      	adds	r3, #1
 80039e2:	d102      	bne.n	80039ea <HAL_SPI_Transmit+0x236>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80039ea:	231f      	movs	r3, #31
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	2203      	movs	r2, #3
 80039f0:	701a      	strb	r2, [r3, #0]
          goto error;
 80039f2:	e028      	b.n	8003a46 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1cc      	bne.n	8003998 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	6839      	ldr	r1, [r7, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 f95d 	bl	8003cc4 <SPI_EndRxTxTransaction>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003a3a:	231f      	movs	r3, #31
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e000      	b.n	8003a46 <HAL_SPI_Transmit+0x292>
  }

error:
 8003a44:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	225d      	movs	r2, #93	; 0x5d
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	225c      	movs	r2, #92	; 0x5c
 8003a52:	2100      	movs	r1, #0
 8003a54:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003a56:	231f      	movs	r3, #31
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	781b      	ldrb	r3, [r3, #0]
}
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b008      	add	sp, #32
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	1dfb      	adds	r3, r7, #7
 8003a72:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a74:	f7fd ff9e 	bl	80019b4 <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	18d3      	adds	r3, r2, r3
 8003a82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a84:	f7fd ff96 	bl	80019b4 <HAL_GetTick>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a8c:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	015b      	lsls	r3, r3, #5
 8003a92:	0d1b      	lsrs	r3, r3, #20
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	4353      	muls	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9a:	e058      	b.n	8003b4e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	d055      	beq.n	8003b4e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aa2:	f7fd ff87 	bl	80019b4 <HAL_GetTick>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d902      	bls.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d142      	bne.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	21e0      	movs	r1, #224	; 0xe0
 8003ac4:	438a      	bics	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	2382      	movs	r3, #130	; 0x82
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d113      	bne.n	8003afc <SPI_WaitFlagStateUntilTimeout+0x98>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d005      	beq.n	8003aec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d107      	bne.n	8003afc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2140      	movs	r1, #64	; 0x40
 8003af8:	438a      	bics	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	019b      	lsls	r3, r3, #6
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d110      	bne.n	8003b2a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	491a      	ldr	r1, [pc, #104]	; (8003b7c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003b14:	400a      	ands	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	0189      	lsls	r1, r1, #6
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	225d      	movs	r2, #93	; 0x5d
 8003b2e:	2101      	movs	r1, #1
 8003b30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	225c      	movs	r2, #92	; 0x5c
 8003b36:	2100      	movs	r1, #0
 8003b38:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e017      	b.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	425a      	negs	r2, r3
 8003b5e:	4153      	adcs	r3, r2
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	001a      	movs	r2, r3
 8003b64:	1dfb      	adds	r3, r7, #7
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d197      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b008      	add	sp, #32
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	20001c08 	.word	0x20001c08
 8003b7c:	ffffdfff 	.word	0xffffdfff

08003b80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b8e:	2317      	movs	r3, #23
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b96:	f7fd ff0d 	bl	80019b4 <HAL_GetTick>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	18d3      	adds	r3, r2, r3
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003ba6:	f7fd ff05 	bl	80019b4 <HAL_GetTick>
 8003baa:	0003      	movs	r3, r0
 8003bac:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bb6:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	0013      	movs	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	00da      	lsls	r2, r3, #3
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	0d1b      	lsrs	r3, r3, #20
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc8:	4353      	muls	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bcc:	e068      	b.n	8003ca0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	23c0      	movs	r3, #192	; 0xc0
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d10a      	bne.n	8003bee <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	2117      	movs	r1, #23
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	d055      	beq.n	8003ca0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bf4:	f7fd fede 	bl	80019b4 <HAL_GetTick>
 8003bf8:	0002      	movs	r2, r0
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d902      	bls.n	8003c0a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d142      	bne.n	8003c90 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	21e0      	movs	r1, #224	; 0xe0
 8003c16:	438a      	bics	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	2382      	movs	r3, #130	; 0x82
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d113      	bne.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d005      	beq.n	8003c3e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d107      	bne.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2140      	movs	r1, #64	; 0x40
 8003c4a:	438a      	bics	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	019b      	lsls	r3, r3, #6
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d110      	bne.n	8003c7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4916      	ldr	r1, [pc, #88]	; (8003cc0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003c66:	400a      	ands	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2180      	movs	r1, #128	; 0x80
 8003c76:	0189      	lsls	r1, r1, #6
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	225d      	movs	r2, #93	; 0x5d
 8003c80:	2101      	movs	r1, #1
 8003c82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	225c      	movs	r2, #92	; 0x5c
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e010      	b.n	8003cb2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d18e      	bne.n	8003bce <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b00a      	add	sp, #40	; 0x28
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	20001c08 	.word	0x20001c08
 8003cc0:	ffffdfff 	.word	0xffffdfff

08003cc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	23c0      	movs	r3, #192	; 0xc0
 8003cd4:	0159      	lsls	r1, r3, #5
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	0013      	movs	r3, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f7ff ff4e 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout>
 8003ce4:	1e03      	subs	r3, r0, #0
 8003ce6:	d007      	beq.n	8003cf8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cec:	2220      	movs	r2, #32
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e027      	b.n	8003d48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	0013      	movs	r3, r2
 8003d02:	2200      	movs	r2, #0
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	f7ff fead 	bl	8003a64 <SPI_WaitFlagStateUntilTimeout>
 8003d0a:	1e03      	subs	r3, r0, #0
 8003d0c:	d007      	beq.n	8003d1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d12:	2220      	movs	r2, #32
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e014      	b.n	8003d48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	23c0      	movs	r3, #192	; 0xc0
 8003d22:	00d9      	lsls	r1, r3, #3
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	0013      	movs	r3, r2
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f7ff ff27 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d007      	beq.n	8003d46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e000      	b.n	8003d48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	0018      	movs	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b004      	add	sp, #16
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e042      	b.n	8003de8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	223d      	movs	r2, #61	; 0x3d
 8003d66:	5c9b      	ldrb	r3, [r3, r2]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223c      	movs	r2, #60	; 0x3c
 8003d72:	2100      	movs	r1, #0
 8003d74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7fd fc77 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	223d      	movs	r2, #61	; 0x3d
 8003d82:	2102      	movs	r1, #2
 8003d84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	0019      	movs	r1, r3
 8003d90:	0010      	movs	r0, r2
 8003d92:	f000 fad7 	bl	8004344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2246      	movs	r2, #70	; 0x46
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	223e      	movs	r2, #62	; 0x3e
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	223f      	movs	r2, #63	; 0x3f
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2240      	movs	r2, #64	; 0x40
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2241      	movs	r2, #65	; 0x41
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2242      	movs	r2, #66	; 0x42
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2243      	movs	r2, #67	; 0x43
 8003dca:	2101      	movs	r1, #1
 8003dcc:	5499      	strb	r1, [r3, r2]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2244      	movs	r2, #68	; 0x44
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2245      	movs	r2, #69	; 0x45
 8003dda:	2101      	movs	r1, #1
 8003ddc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	223d      	movs	r2, #61	; 0x3d
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	0018      	movs	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b002      	add	sp, #8
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e042      	b.n	8003e88 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223d      	movs	r2, #61	; 0x3d
 8003e06:	5c9b      	ldrb	r3, [r3, r2]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	223c      	movs	r2, #60	; 0x3c
 8003e12:	2100      	movs	r1, #0
 8003e14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 f839 	bl	8003e90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	223d      	movs	r2, #61	; 0x3d
 8003e22:	2102      	movs	r1, #2
 8003e24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	0019      	movs	r1, r3
 8003e30:	0010      	movs	r0, r2
 8003e32:	f000 fa87 	bl	8004344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2246      	movs	r2, #70	; 0x46
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223e      	movs	r2, #62	; 0x3e
 8003e42:	2101      	movs	r1, #1
 8003e44:	5499      	strb	r1, [r3, r2]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	223f      	movs	r2, #63	; 0x3f
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2240      	movs	r2, #64	; 0x40
 8003e52:	2101      	movs	r1, #1
 8003e54:	5499      	strb	r1, [r3, r2]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2241      	movs	r2, #65	; 0x41
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2242      	movs	r2, #66	; 0x42
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2243      	movs	r2, #67	; 0x43
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2244      	movs	r2, #68	; 0x44
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2245      	movs	r2, #69	; 0x45
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	223d      	movs	r2, #61	; 0x3d
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d108      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0x22>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	223e      	movs	r2, #62	; 0x3e
 8003eb4:	5c9b      	ldrb	r3, [r3, r2]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	1e5a      	subs	r2, r3, #1
 8003ebc:	4193      	sbcs	r3, r2
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	e01f      	b.n	8003f02 <HAL_TIM_PWM_Start+0x62>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d108      	bne.n	8003eda <HAL_TIM_PWM_Start+0x3a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	223f      	movs	r2, #63	; 0x3f
 8003ecc:	5c9b      	ldrb	r3, [r3, r2]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	1e5a      	subs	r2, r3, #1
 8003ed4:	4193      	sbcs	r3, r2
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	e013      	b.n	8003f02 <HAL_TIM_PWM_Start+0x62>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d108      	bne.n	8003ef2 <HAL_TIM_PWM_Start+0x52>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	5c9b      	ldrb	r3, [r3, r2]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	4193      	sbcs	r3, r2
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	e007      	b.n	8003f02 <HAL_TIM_PWM_Start+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2241      	movs	r2, #65	; 0x41
 8003ef6:	5c9b      	ldrb	r3, [r3, r2]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	4193      	sbcs	r3, r2
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e074      	b.n	8003ff4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_PWM_Start+0x7a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	223e      	movs	r2, #62	; 0x3e
 8003f14:	2102      	movs	r1, #2
 8003f16:	5499      	strb	r1, [r3, r2]
 8003f18:	e013      	b.n	8003f42 <HAL_TIM_PWM_Start+0xa2>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d104      	bne.n	8003f2a <HAL_TIM_PWM_Start+0x8a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	223f      	movs	r2, #63	; 0x3f
 8003f24:	2102      	movs	r1, #2
 8003f26:	5499      	strb	r1, [r3, r2]
 8003f28:	e00b      	b.n	8003f42 <HAL_TIM_PWM_Start+0xa2>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d104      	bne.n	8003f3a <HAL_TIM_PWM_Start+0x9a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2240      	movs	r2, #64	; 0x40
 8003f34:	2102      	movs	r1, #2
 8003f36:	5499      	strb	r1, [r3, r2]
 8003f38:	e003      	b.n	8003f42 <HAL_TIM_PWM_Start+0xa2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2241      	movs	r2, #65	; 0x41
 8003f3e:	2102      	movs	r1, #2
 8003f40:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6839      	ldr	r1, [r7, #0]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f000 fd10 	bl	8004970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <HAL_TIM_PWM_Start+0x15c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_TIM_PWM_Start+0xd8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a28      	ldr	r2, [pc, #160]	; (8004000 <HAL_TIM_PWM_Start+0x160>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_TIM_PWM_Start+0xd8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a26      	ldr	r2, [pc, #152]	; (8004004 <HAL_TIM_PWM_Start+0x164>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIM_PWM_Start+0xd8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a25      	ldr	r2, [pc, #148]	; (8004008 <HAL_TIM_PWM_Start+0x168>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d101      	bne.n	8003f7c <HAL_TIM_PWM_Start+0xdc>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_TIM_PWM_Start+0xde>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	0209      	lsls	r1, r1, #8
 8003f90:	430a      	orrs	r2, r1
 8003f92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <HAL_TIM_PWM_Start+0x15c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00f      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x11e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	05db      	lsls	r3, r3, #23
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d009      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x11e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <HAL_TIM_PWM_Start+0x16c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x11e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a11      	ldr	r2, [pc, #68]	; (8004000 <HAL_TIM_PWM_Start+0x160>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d111      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2207      	movs	r2, #7
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b06      	cmp	r3, #6
 8003fce:	d010      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe0:	e007      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40014000 	.word	0x40014000
 8004004:	40014400 	.word	0x40014400
 8004008:	40014800 	.word	0x40014800
 800400c:	40000400 	.word	0x40000400

08004010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2317      	movs	r3, #23
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	223c      	movs	r2, #60	; 0x3c
 8004028:	5c9b      	ldrb	r3, [r3, r2]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x22>
 800402e:	2302      	movs	r3, #2
 8004030:	e0ad      	b.n	800418e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	223c      	movs	r2, #60	; 0x3c
 8004036:	2101      	movs	r1, #1
 8004038:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d100      	bne.n	8004042 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004040:	e076      	b.n	8004130 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b0c      	cmp	r3, #12
 8004046:	d900      	bls.n	800404a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004048:	e095      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x166>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d04e      	beq.n	80040ee <HAL_TIM_PWM_ConfigChannel+0xde>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b08      	cmp	r3, #8
 8004054:	d900      	bls.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004056:	e08e      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_PWM_ConfigChannel+0x56>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d021      	beq.n	80040a8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004064:	e087      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	0011      	movs	r1, r2
 800406e:	0018      	movs	r0, r3
 8004070:	f000 f9e8 	bl	8004444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2108      	movs	r1, #8
 8004080:	430a      	orrs	r2, r1
 8004082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2104      	movs	r1, #4
 8004090:	438a      	bics	r2, r1
 8004092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6999      	ldr	r1, [r3, #24]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	619a      	str	r2, [r3, #24]
      break;
 80040a6:	e06b      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	0011      	movs	r1, r2
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 fa4f 	bl	8004554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	0109      	lsls	r1, r1, #4
 80040c4:	430a      	orrs	r2, r1
 80040c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4931      	ldr	r1, [pc, #196]	; (8004198 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80040d4:	400a      	ands	r2, r1
 80040d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6999      	ldr	r1, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	619a      	str	r2, [r3, #24]
      break;
 80040ec:	e048      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	0011      	movs	r1, r2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 fab0 	bl	800465c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2108      	movs	r1, #8
 8004108:	430a      	orrs	r2, r1
 800410a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2104      	movs	r1, #4
 8004118:	438a      	bics	r2, r1
 800411a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69d9      	ldr	r1, [r3, #28]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	61da      	str	r2, [r3, #28]
      break;
 800412e:	e027      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	0011      	movs	r1, r2
 8004138:	0018      	movs	r0, r3
 800413a:	f000 fb15 	bl	8004768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	0109      	lsls	r1, r1, #4
 800414c:	430a      	orrs	r2, r1
 800414e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	490f      	ldr	r1, [pc, #60]	; (8004198 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800415c:	400a      	ands	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69d9      	ldr	r1, [r3, #28]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	61da      	str	r2, [r3, #28]
      break;
 8004174:	e004      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004176:	2317      	movs	r3, #23
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
      break;
 800417e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	223c      	movs	r2, #60	; 0x3c
 8004184:	2100      	movs	r1, #0
 8004186:	5499      	strb	r1, [r3, r2]

  return status;
 8004188:	2317      	movs	r3, #23
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	781b      	ldrb	r3, [r3, #0]
}
 800418e:	0018      	movs	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	b006      	add	sp, #24
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	fffffbff 	.word	0xfffffbff

0800419c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	230f      	movs	r3, #15
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	223c      	movs	r2, #60	; 0x3c
 80041b2:	5c9b      	ldrb	r3, [r3, r2]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_TIM_ConfigClockSource+0x20>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e0bc      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x19a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	223c      	movs	r2, #60	; 0x3c
 80041c0:	2101      	movs	r1, #1
 80041c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	223d      	movs	r2, #61	; 0x3d
 80041c8:	2102      	movs	r1, #2
 80041ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2277      	movs	r2, #119	; 0x77
 80041d8:	4393      	bics	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a58      	ldr	r2, [pc, #352]	; (8004340 <HAL_TIM_ConfigClockSource+0x1a4>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2280      	movs	r2, #128	; 0x80
 80041f2:	0192      	lsls	r2, r2, #6
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d040      	beq.n	800427a <HAL_TIM_ConfigClockSource+0xde>
 80041f8:	2280      	movs	r2, #128	; 0x80
 80041fa:	0192      	lsls	r2, r2, #6
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d900      	bls.n	8004202 <HAL_TIM_ConfigClockSource+0x66>
 8004200:	e088      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x178>
 8004202:	2280      	movs	r2, #128	; 0x80
 8004204:	0152      	lsls	r2, r2, #5
 8004206:	4293      	cmp	r3, r2
 8004208:	d100      	bne.n	800420c <HAL_TIM_ConfigClockSource+0x70>
 800420a:	e088      	b.n	800431e <HAL_TIM_ConfigClockSource+0x182>
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	0152      	lsls	r2, r2, #5
 8004210:	4293      	cmp	r3, r2
 8004212:	d900      	bls.n	8004216 <HAL_TIM_ConfigClockSource+0x7a>
 8004214:	e07e      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x178>
 8004216:	2b70      	cmp	r3, #112	; 0x70
 8004218:	d018      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xb0>
 800421a:	d900      	bls.n	800421e <HAL_TIM_ConfigClockSource+0x82>
 800421c:	e07a      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x178>
 800421e:	2b60      	cmp	r3, #96	; 0x60
 8004220:	d04f      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x126>
 8004222:	d900      	bls.n	8004226 <HAL_TIM_ConfigClockSource+0x8a>
 8004224:	e076      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x178>
 8004226:	2b50      	cmp	r3, #80	; 0x50
 8004228:	d03b      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x106>
 800422a:	d900      	bls.n	800422e <HAL_TIM_ConfigClockSource+0x92>
 800422c:	e072      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x178>
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d057      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x146>
 8004232:	d900      	bls.n	8004236 <HAL_TIM_ConfigClockSource+0x9a>
 8004234:	e06e      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x178>
 8004236:	2b30      	cmp	r3, #48	; 0x30
 8004238:	d063      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x166>
 800423a:	d86b      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x178>
 800423c:	2b20      	cmp	r3, #32
 800423e:	d060      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x166>
 8004240:	d868      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x178>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d05d      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x166>
 8004246:	2b10      	cmp	r3, #16
 8004248:	d05b      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x166>
 800424a:	e063      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6899      	ldr	r1, [r3, #8]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f000 fb68 	bl	8004930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2277      	movs	r2, #119	; 0x77
 800426c:	4313      	orrs	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	609a      	str	r2, [r3, #8]
      break;
 8004278:	e052      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6899      	ldr	r1, [r3, #8]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f000 fb51 	bl	8004930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2180      	movs	r1, #128	; 0x80
 800429a:	01c9      	lsls	r1, r1, #7
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
      break;
 80042a0:	e03e      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	001a      	movs	r2, r3
 80042b0:	f000 fac4 	bl	800483c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2150      	movs	r1, #80	; 0x50
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 fb1e 	bl	80048fc <TIM_ITRx_SetConfig>
      break;
 80042c0:	e02e      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	001a      	movs	r2, r3
 80042d0:	f000 fae2 	bl	8004898 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2160      	movs	r1, #96	; 0x60
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 fb0e 	bl	80048fc <TIM_ITRx_SetConfig>
      break;
 80042e0:	e01e      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	001a      	movs	r2, r3
 80042f0:	f000 faa4 	bl	800483c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2140      	movs	r1, #64	; 0x40
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 fafe 	bl	80048fc <TIM_ITRx_SetConfig>
      break;
 8004300:	e00e      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	0019      	movs	r1, r3
 800430c:	0010      	movs	r0, r2
 800430e:	f000 faf5 	bl	80048fc <TIM_ITRx_SetConfig>
      break;
 8004312:	e005      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004314:	230f      	movs	r3, #15
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]
      break;
 800431c:	e000      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800431e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	223d      	movs	r2, #61	; 0x3d
 8004324:	2101      	movs	r1, #1
 8004326:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	223c      	movs	r2, #60	; 0x3c
 800432c:	2100      	movs	r1, #0
 800432e:	5499      	strb	r1, [r3, r2]

  return status;
 8004330:	230f      	movs	r3, #15
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	781b      	ldrb	r3, [r3, #0]
}
 8004336:	0018      	movs	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	b004      	add	sp, #16
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	ffff00ff 	.word	0xffff00ff

08004344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a34      	ldr	r2, [pc, #208]	; (8004428 <TIM_Base_SetConfig+0xe4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d008      	beq.n	800436e <TIM_Base_SetConfig+0x2a>
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	05db      	lsls	r3, r3, #23
 8004362:	429a      	cmp	r2, r3
 8004364:	d003      	beq.n	800436e <TIM_Base_SetConfig+0x2a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a30      	ldr	r2, [pc, #192]	; (800442c <TIM_Base_SetConfig+0xe8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d108      	bne.n	8004380 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2270      	movs	r2, #112	; 0x70
 8004372:	4393      	bics	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a29      	ldr	r2, [pc, #164]	; (8004428 <TIM_Base_SetConfig+0xe4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <TIM_Base_SetConfig+0x76>
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	05db      	lsls	r3, r3, #23
 800438e:	429a      	cmp	r2, r3
 8004390:	d013      	beq.n	80043ba <TIM_Base_SetConfig+0x76>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a25      	ldr	r2, [pc, #148]	; (800442c <TIM_Base_SetConfig+0xe8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_Base_SetConfig+0x76>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a24      	ldr	r2, [pc, #144]	; (8004430 <TIM_Base_SetConfig+0xec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0x76>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a23      	ldr	r2, [pc, #140]	; (8004434 <TIM_Base_SetConfig+0xf0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0x76>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a22      	ldr	r2, [pc, #136]	; (8004438 <TIM_Base_SetConfig+0xf4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0x76>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a21      	ldr	r2, [pc, #132]	; (800443c <TIM_Base_SetConfig+0xf8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a20      	ldr	r2, [pc, #128]	; (8004440 <TIM_Base_SetConfig+0xfc>)
 80043be:	4013      	ands	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2280      	movs	r2, #128	; 0x80
 80043d0:	4393      	bics	r3, r2
 80043d2:	001a      	movs	r2, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <TIM_Base_SetConfig+0xe4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00b      	beq.n	8004412 <TIM_Base_SetConfig+0xce>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <TIM_Base_SetConfig+0xf0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <TIM_Base_SetConfig+0xce>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <TIM_Base_SetConfig+0xf4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d003      	beq.n	8004412 <TIM_Base_SetConfig+0xce>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a0b      	ldr	r2, [pc, #44]	; (800443c <TIM_Base_SetConfig+0xf8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d103      	bne.n	800441a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	615a      	str	r2, [r3, #20]
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	b004      	add	sp, #16
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40002000 	.word	0x40002000
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800
 8004440:	fffffcff 	.word	0xfffffcff

08004444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	2201      	movs	r2, #1
 8004454:	4393      	bics	r3, r2
 8004456:	001a      	movs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2270      	movs	r2, #112	; 0x70
 8004472:	4393      	bics	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2203      	movs	r2, #3
 800447a:	4393      	bics	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2202      	movs	r2, #2
 800448c:	4393      	bics	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a27      	ldr	r2, [pc, #156]	; (800453c <TIM_OC1_SetConfig+0xf8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_OC1_SetConfig+0x76>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <TIM_OC1_SetConfig+0xfc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <TIM_OC1_SetConfig+0x76>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a25      	ldr	r2, [pc, #148]	; (8004544 <TIM_OC1_SetConfig+0x100>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_OC1_SetConfig+0x76>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a24      	ldr	r2, [pc, #144]	; (8004548 <TIM_OC1_SetConfig+0x104>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d10c      	bne.n	80044d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2208      	movs	r2, #8
 80044be:	4393      	bics	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2204      	movs	r2, #4
 80044d0:	4393      	bics	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a19      	ldr	r2, [pc, #100]	; (800453c <TIM_OC1_SetConfig+0xf8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00b      	beq.n	80044f4 <TIM_OC1_SetConfig+0xb0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <TIM_OC1_SetConfig+0xfc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <TIM_OC1_SetConfig+0xb0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a17      	ldr	r2, [pc, #92]	; (8004544 <TIM_OC1_SetConfig+0x100>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_OC1_SetConfig+0xb0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a16      	ldr	r2, [pc, #88]	; (8004548 <TIM_OC1_SetConfig+0x104>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d111      	bne.n	8004518 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <TIM_OC1_SetConfig+0x108>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4a14      	ldr	r2, [pc, #80]	; (8004550 <TIM_OC1_SetConfig+0x10c>)
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b006      	add	sp, #24
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800
 800454c:	fffffeff 	.word	0xfffffeff
 8004550:	fffffdff 	.word	0xfffffdff

08004554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	2210      	movs	r2, #16
 8004564:	4393      	bics	r3, r2
 8004566:	001a      	movs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a2e      	ldr	r2, [pc, #184]	; (800463c <TIM_OC2_SetConfig+0xe8>)
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a2d      	ldr	r2, [pc, #180]	; (8004640 <TIM_OC2_SetConfig+0xec>)
 800458a:	4013      	ands	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2220      	movs	r2, #32
 800459e:	4393      	bics	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a24      	ldr	r2, [pc, #144]	; (8004644 <TIM_OC2_SetConfig+0xf0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d10d      	bne.n	80045d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2280      	movs	r2, #128	; 0x80
 80045ba:	4393      	bics	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2240      	movs	r2, #64	; 0x40
 80045ce:	4393      	bics	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <TIM_OC2_SetConfig+0xf0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00b      	beq.n	80045f2 <TIM_OC2_SetConfig+0x9e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1a      	ldr	r2, [pc, #104]	; (8004648 <TIM_OC2_SetConfig+0xf4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <TIM_OC2_SetConfig+0x9e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a19      	ldr	r2, [pc, #100]	; (800464c <TIM_OC2_SetConfig+0xf8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_OC2_SetConfig+0x9e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a18      	ldr	r2, [pc, #96]	; (8004650 <TIM_OC2_SetConfig+0xfc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d113      	bne.n	800461a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4a17      	ldr	r2, [pc, #92]	; (8004654 <TIM_OC2_SetConfig+0x100>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4a16      	ldr	r2, [pc, #88]	; (8004658 <TIM_OC2_SetConfig+0x104>)
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	621a      	str	r2, [r3, #32]
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b006      	add	sp, #24
 800463a:	bd80      	pop	{r7, pc}
 800463c:	ffff8fff 	.word	0xffff8fff
 8004640:	fffffcff 	.word	0xfffffcff
 8004644:	40012c00 	.word	0x40012c00
 8004648:	40014000 	.word	0x40014000
 800464c:	40014400 	.word	0x40014400
 8004650:	40014800 	.word	0x40014800
 8004654:	fffffbff 	.word	0xfffffbff
 8004658:	fffff7ff 	.word	0xfffff7ff

0800465c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4a35      	ldr	r2, [pc, #212]	; (8004740 <TIM_OC3_SetConfig+0xe4>)
 800466c:	401a      	ands	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2270      	movs	r2, #112	; 0x70
 8004688:	4393      	bics	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2203      	movs	r2, #3
 8004690:	4393      	bics	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	4a28      	ldr	r2, [pc, #160]	; (8004744 <TIM_OC3_SetConfig+0xe8>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a24      	ldr	r2, [pc, #144]	; (8004748 <TIM_OC3_SetConfig+0xec>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d10d      	bne.n	80046d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	4a23      	ldr	r2, [pc, #140]	; (800474c <TIM_OC3_SetConfig+0xf0>)
 80046be:	4013      	ands	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <TIM_OC3_SetConfig+0xf4>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <TIM_OC3_SetConfig+0xec>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00b      	beq.n	80046f6 <TIM_OC3_SetConfig+0x9a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <TIM_OC3_SetConfig+0xf8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d007      	beq.n	80046f6 <TIM_OC3_SetConfig+0x9a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1b      	ldr	r2, [pc, #108]	; (8004758 <TIM_OC3_SetConfig+0xfc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_OC3_SetConfig+0x9a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a1a      	ldr	r2, [pc, #104]	; (800475c <TIM_OC3_SetConfig+0x100>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d113      	bne.n	800471e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4a19      	ldr	r2, [pc, #100]	; (8004760 <TIM_OC3_SetConfig+0x104>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4a18      	ldr	r2, [pc, #96]	; (8004764 <TIM_OC3_SetConfig+0x108>)
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	46bd      	mov	sp, r7
 800473c:	b006      	add	sp, #24
 800473e:	bd80      	pop	{r7, pc}
 8004740:	fffffeff 	.word	0xfffffeff
 8004744:	fffffdff 	.word	0xfffffdff
 8004748:	40012c00 	.word	0x40012c00
 800474c:	fffff7ff 	.word	0xfffff7ff
 8004750:	fffffbff 	.word	0xfffffbff
 8004754:	40014000 	.word	0x40014000
 8004758:	40014400 	.word	0x40014400
 800475c:	40014800 	.word	0x40014800
 8004760:	ffffefff 	.word	0xffffefff
 8004764:	ffffdfff 	.word	0xffffdfff

08004768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a28      	ldr	r2, [pc, #160]	; (8004818 <TIM_OC4_SetConfig+0xb0>)
 8004778:	401a      	ands	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a22      	ldr	r2, [pc, #136]	; (800481c <TIM_OC4_SetConfig+0xb4>)
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a21      	ldr	r2, [pc, #132]	; (8004820 <TIM_OC4_SetConfig+0xb8>)
 800479c:	4013      	ands	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <TIM_OC4_SetConfig+0xbc>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	031b      	lsls	r3, r3, #12
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a19      	ldr	r2, [pc, #100]	; (8004828 <TIM_OC4_SetConfig+0xc0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00b      	beq.n	80047e0 <TIM_OC4_SetConfig+0x78>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a18      	ldr	r2, [pc, #96]	; (800482c <TIM_OC4_SetConfig+0xc4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d007      	beq.n	80047e0 <TIM_OC4_SetConfig+0x78>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a17      	ldr	r2, [pc, #92]	; (8004830 <TIM_OC4_SetConfig+0xc8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d003      	beq.n	80047e0 <TIM_OC4_SetConfig+0x78>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a16      	ldr	r2, [pc, #88]	; (8004834 <TIM_OC4_SetConfig+0xcc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d109      	bne.n	80047f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	4a15      	ldr	r2, [pc, #84]	; (8004838 <TIM_OC4_SetConfig+0xd0>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b006      	add	sp, #24
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	ffffefff 	.word	0xffffefff
 800481c:	ffff8fff 	.word	0xffff8fff
 8004820:	fffffcff 	.word	0xfffffcff
 8004824:	ffffdfff 	.word	0xffffdfff
 8004828:	40012c00 	.word	0x40012c00
 800482c:	40014000 	.word	0x40014000
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800
 8004838:	ffffbfff 	.word	0xffffbfff

0800483c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	2201      	movs	r2, #1
 8004854:	4393      	bics	r3, r2
 8004856:	001a      	movs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	22f0      	movs	r2, #240	; 0xf0
 8004866:	4393      	bics	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	220a      	movs	r2, #10
 8004878:	4393      	bics	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b006      	add	sp, #24
 8004896:	bd80      	pop	{r7, pc}

08004898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	2210      	movs	r2, #16
 80048aa:	4393      	bics	r3, r2
 80048ac:	001a      	movs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	4a0d      	ldr	r2, [pc, #52]	; (80048f8 <TIM_TI2_ConfigInputStage+0x60>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	031b      	lsls	r3, r3, #12
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	22a0      	movs	r2, #160	; 0xa0
 80048d4:	4393      	bics	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b006      	add	sp, #24
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	ffff0fff 	.word	0xffff0fff

080048fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2270      	movs	r2, #112	; 0x70
 8004910:	4393      	bics	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	2207      	movs	r2, #7
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	609a      	str	r2, [r3, #8]
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b004      	add	sp, #16
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <TIM_ETR_SetConfig+0x3c>)
 8004948:	4013      	ands	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	021a      	lsls	r2, r3, #8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	431a      	orrs	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4313      	orrs	r3, r2
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	609a      	str	r2, [r3, #8]
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b006      	add	sp, #24
 800496a:	bd80      	pop	{r7, pc}
 800496c:	ffff00ff 	.word	0xffff00ff

08004970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	221f      	movs	r2, #31
 8004980:	4013      	ands	r3, r2
 8004982:	2201      	movs	r2, #1
 8004984:	409a      	lsls	r2, r3
 8004986:	0013      	movs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	43d2      	mvns	r2, r2
 8004992:	401a      	ands	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1a      	ldr	r2, [r3, #32]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	211f      	movs	r1, #31
 80049a0:	400b      	ands	r3, r1
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4099      	lsls	r1, r3
 80049a6:	000b      	movs	r3, r1
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b006      	add	sp, #24
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	223c      	movs	r2, #60	; 0x3c
 80049c6:	5c9b      	ldrb	r3, [r3, r2]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e047      	b.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	223c      	movs	r2, #60	; 0x3c
 80049d4:	2101      	movs	r1, #1
 80049d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	223d      	movs	r2, #61	; 0x3d
 80049dc:	2102      	movs	r1, #2
 80049de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2270      	movs	r2, #112	; 0x70
 80049f4:	4393      	bics	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00f      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	05db      	lsls	r3, r3, #23
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d009      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a10      	ldr	r2, [pc, #64]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d10c      	bne.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2280      	movs	r2, #128	; 0x80
 8004a38:	4393      	bics	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	223d      	movs	r2, #61	; 0x3d
 8004a52:	2101      	movs	r1, #1
 8004a54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	223c      	movs	r2, #60	; 0x3c
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b004      	add	sp, #16
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40014000 	.word	0x40014000

08004a74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e044      	b.n	8004b10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d107      	bne.n	8004a9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2274      	movs	r2, #116	; 0x74
 8004a92:	2100      	movs	r1, #0
 8004a94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7fc fe89 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2224      	movs	r2, #36	; 0x24
 8004aa2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f000 f830 	bl	8004b1c <UART_SetConfig>
 8004abc:	0003      	movs	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e024      	b.n	8004b10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f000 fa0b 	bl	8004eec <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	490d      	ldr	r1, [pc, #52]	; (8004b18 <HAL_UART_Init+0xa4>)
 8004ae2:	400a      	ands	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	212a      	movs	r1, #42	; 0x2a
 8004af2:	438a      	bics	r2, r1
 8004af4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2101      	movs	r1, #1
 8004b02:	430a      	orrs	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f000 faa3 	bl	8005054 <UART_CheckIdleState>
 8004b0e:	0003      	movs	r3, r0
}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b002      	add	sp, #8
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	ffffb7ff 	.word	0xffffb7ff

08004b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b24:	231e      	movs	r3, #30
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4abe      	ldr	r2, [pc, #760]	; (8004e44 <UART_SetConfig+0x328>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4ab9      	ldr	r2, [pc, #740]	; (8004e48 <UART_SetConfig+0x32c>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4ab0      	ldr	r2, [pc, #704]	; (8004e4c <UART_SetConfig+0x330>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4aac      	ldr	r2, [pc, #688]	; (8004e50 <UART_SetConfig+0x334>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d127      	bne.n	8004bf2 <UART_SetConfig+0xd6>
 8004ba2:	4bac      	ldr	r3, [pc, #688]	; (8004e54 <UART_SetConfig+0x338>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d00d      	beq.n	8004bca <UART_SetConfig+0xae>
 8004bae:	d81b      	bhi.n	8004be8 <UART_SetConfig+0xcc>
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d014      	beq.n	8004bde <UART_SetConfig+0xc2>
 8004bb4:	d818      	bhi.n	8004be8 <UART_SetConfig+0xcc>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <UART_SetConfig+0xa4>
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d00a      	beq.n	8004bd4 <UART_SetConfig+0xb8>
 8004bbe:	e013      	b.n	8004be8 <UART_SetConfig+0xcc>
 8004bc0:	231f      	movs	r3, #31
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e0bd      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004bca:	231f      	movs	r3, #31
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	2202      	movs	r2, #2
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e0b8      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004bd4:	231f      	movs	r3, #31
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	2204      	movs	r2, #4
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e0b3      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004bde:	231f      	movs	r3, #31
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	2208      	movs	r2, #8
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	e0ae      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004be8:	231f      	movs	r3, #31
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	2210      	movs	r2, #16
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e0a9      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a98      	ldr	r2, [pc, #608]	; (8004e58 <UART_SetConfig+0x33c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d134      	bne.n	8004c66 <UART_SetConfig+0x14a>
 8004bfc:	4b95      	ldr	r3, [pc, #596]	; (8004e54 <UART_SetConfig+0x338>)
 8004bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c00:	23c0      	movs	r3, #192	; 0xc0
 8004c02:	029b      	lsls	r3, r3, #10
 8004c04:	4013      	ands	r3, r2
 8004c06:	22c0      	movs	r2, #192	; 0xc0
 8004c08:	0292      	lsls	r2, r2, #10
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d017      	beq.n	8004c3e <UART_SetConfig+0x122>
 8004c0e:	22c0      	movs	r2, #192	; 0xc0
 8004c10:	0292      	lsls	r2, r2, #10
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d822      	bhi.n	8004c5c <UART_SetConfig+0x140>
 8004c16:	2280      	movs	r2, #128	; 0x80
 8004c18:	0292      	lsls	r2, r2, #10
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d019      	beq.n	8004c52 <UART_SetConfig+0x136>
 8004c1e:	2280      	movs	r2, #128	; 0x80
 8004c20:	0292      	lsls	r2, r2, #10
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d81a      	bhi.n	8004c5c <UART_SetConfig+0x140>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <UART_SetConfig+0x118>
 8004c2a:	2280      	movs	r2, #128	; 0x80
 8004c2c:	0252      	lsls	r2, r2, #9
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00a      	beq.n	8004c48 <UART_SetConfig+0x12c>
 8004c32:	e013      	b.n	8004c5c <UART_SetConfig+0x140>
 8004c34:	231f      	movs	r3, #31
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e083      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004c3e:	231f      	movs	r3, #31
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	2202      	movs	r2, #2
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e07e      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004c48:	231f      	movs	r3, #31
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e079      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004c52:	231f      	movs	r3, #31
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	2208      	movs	r2, #8
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	e074      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004c5c:	231f      	movs	r3, #31
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	2210      	movs	r2, #16
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e06f      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a7c      	ldr	r2, [pc, #496]	; (8004e5c <UART_SetConfig+0x340>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d134      	bne.n	8004cda <UART_SetConfig+0x1be>
 8004c70:	4b78      	ldr	r3, [pc, #480]	; (8004e54 <UART_SetConfig+0x338>)
 8004c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c74:	23c0      	movs	r3, #192	; 0xc0
 8004c76:	031b      	lsls	r3, r3, #12
 8004c78:	4013      	ands	r3, r2
 8004c7a:	22c0      	movs	r2, #192	; 0xc0
 8004c7c:	0312      	lsls	r2, r2, #12
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d017      	beq.n	8004cb2 <UART_SetConfig+0x196>
 8004c82:	22c0      	movs	r2, #192	; 0xc0
 8004c84:	0312      	lsls	r2, r2, #12
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d822      	bhi.n	8004cd0 <UART_SetConfig+0x1b4>
 8004c8a:	2280      	movs	r2, #128	; 0x80
 8004c8c:	0312      	lsls	r2, r2, #12
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d019      	beq.n	8004cc6 <UART_SetConfig+0x1aa>
 8004c92:	2280      	movs	r2, #128	; 0x80
 8004c94:	0312      	lsls	r2, r2, #12
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d81a      	bhi.n	8004cd0 <UART_SetConfig+0x1b4>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <UART_SetConfig+0x18c>
 8004c9e:	2280      	movs	r2, #128	; 0x80
 8004ca0:	02d2      	lsls	r2, r2, #11
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00a      	beq.n	8004cbc <UART_SetConfig+0x1a0>
 8004ca6:	e013      	b.n	8004cd0 <UART_SetConfig+0x1b4>
 8004ca8:	231f      	movs	r3, #31
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e049      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004cb2:	231f      	movs	r3, #31
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e044      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004cbc:	231f      	movs	r3, #31
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e03f      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004cc6:	231f      	movs	r3, #31
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	2208      	movs	r2, #8
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e03a      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004cd0:	231f      	movs	r3, #31
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e035      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a60      	ldr	r2, [pc, #384]	; (8004e60 <UART_SetConfig+0x344>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d104      	bne.n	8004cee <UART_SetConfig+0x1d2>
 8004ce4:	231f      	movs	r3, #31
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e02b      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a5c      	ldr	r2, [pc, #368]	; (8004e64 <UART_SetConfig+0x348>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d104      	bne.n	8004d02 <UART_SetConfig+0x1e6>
 8004cf8:	231f      	movs	r3, #31
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e021      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a58      	ldr	r2, [pc, #352]	; (8004e68 <UART_SetConfig+0x34c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d104      	bne.n	8004d16 <UART_SetConfig+0x1fa>
 8004d0c:	231f      	movs	r3, #31
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e017      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a54      	ldr	r2, [pc, #336]	; (8004e6c <UART_SetConfig+0x350>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d104      	bne.n	8004d2a <UART_SetConfig+0x20e>
 8004d20:	231f      	movs	r3, #31
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	e00d      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a50      	ldr	r2, [pc, #320]	; (8004e70 <UART_SetConfig+0x354>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d104      	bne.n	8004d3e <UART_SetConfig+0x222>
 8004d34:	231f      	movs	r3, #31
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	e003      	b.n	8004d46 <UART_SetConfig+0x22a>
 8004d3e:	231f      	movs	r3, #31
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	2210      	movs	r2, #16
 8004d44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d15d      	bne.n	8004e0e <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8004d52:	231f      	movs	r3, #31
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d015      	beq.n	8004d88 <UART_SetConfig+0x26c>
 8004d5c:	dc18      	bgt.n	8004d90 <UART_SetConfig+0x274>
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d00d      	beq.n	8004d7e <UART_SetConfig+0x262>
 8004d62:	dc15      	bgt.n	8004d90 <UART_SetConfig+0x274>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <UART_SetConfig+0x252>
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d005      	beq.n	8004d78 <UART_SetConfig+0x25c>
 8004d6c:	e010      	b.n	8004d90 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d6e:	f7fe fb53 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8004d72:	0003      	movs	r3, r0
 8004d74:	61bb      	str	r3, [r7, #24]
        break;
 8004d76:	e012      	b.n	8004d9e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d78:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <UART_SetConfig+0x358>)
 8004d7a:	61bb      	str	r3, [r7, #24]
        break;
 8004d7c:	e00f      	b.n	8004d9e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7e:	f7fe fac1 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004d82:	0003      	movs	r3, r0
 8004d84:	61bb      	str	r3, [r7, #24]
        break;
 8004d86:	e00a      	b.n	8004d9e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	61bb      	str	r3, [r7, #24]
        break;
 8004d8e:	e006      	b.n	8004d9e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d94:	231e      	movs	r3, #30
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	2201      	movs	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]
        break;
 8004d9c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d100      	bne.n	8004da6 <UART_SetConfig+0x28a>
 8004da4:	e095      	b.n	8004ed2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	005a      	lsls	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	18d2      	adds	r2, r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	0019      	movs	r1, r3
 8004db8:	0010      	movs	r0, r2
 8004dba:	f7fb f9a5 	bl	8000108 <__udivsi3>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b0f      	cmp	r3, #15
 8004dc8:	d91c      	bls.n	8004e04 <UART_SetConfig+0x2e8>
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	025b      	lsls	r3, r3, #9
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d217      	bcs.n	8004e04 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	200e      	movs	r0, #14
 8004dda:	183b      	adds	r3, r7, r0
 8004ddc:	210f      	movs	r1, #15
 8004dde:	438a      	bics	r2, r1
 8004de0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2207      	movs	r2, #7
 8004dea:	4013      	ands	r3, r2
 8004dec:	b299      	uxth	r1, r3
 8004dee:	183b      	adds	r3, r7, r0
 8004df0:	183a      	adds	r2, r7, r0
 8004df2:	8812      	ldrh	r2, [r2, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	183a      	adds	r2, r7, r0
 8004dfe:	8812      	ldrh	r2, [r2, #0]
 8004e00:	60da      	str	r2, [r3, #12]
 8004e02:	e066      	b.n	8004ed2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004e04:	231e      	movs	r3, #30
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	e061      	b.n	8004ed2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e0e:	231f      	movs	r3, #31
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d02f      	beq.n	8004e78 <UART_SetConfig+0x35c>
 8004e18:	dc32      	bgt.n	8004e80 <UART_SetConfig+0x364>
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d00d      	beq.n	8004e3a <UART_SetConfig+0x31e>
 8004e1e:	dc2f      	bgt.n	8004e80 <UART_SetConfig+0x364>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <UART_SetConfig+0x30e>
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d005      	beq.n	8004e34 <UART_SetConfig+0x318>
 8004e28:	e02a      	b.n	8004e80 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e2a:	f7fe faf5 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	61bb      	str	r3, [r7, #24]
        break;
 8004e32:	e02c      	b.n	8004e8e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <UART_SetConfig+0x358>)
 8004e36:	61bb      	str	r3, [r7, #24]
        break;
 8004e38:	e029      	b.n	8004e8e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fe fa63 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	61bb      	str	r3, [r7, #24]
        break;
 8004e42:	e024      	b.n	8004e8e <UART_SetConfig+0x372>
 8004e44:	efff69f3 	.word	0xefff69f3
 8004e48:	ffffcfff 	.word	0xffffcfff
 8004e4c:	fffff4ff 	.word	0xfffff4ff
 8004e50:	40013800 	.word	0x40013800
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40004400 	.word	0x40004400
 8004e5c:	40004800 	.word	0x40004800
 8004e60:	40004c00 	.word	0x40004c00
 8004e64:	40005000 	.word	0x40005000
 8004e68:	40011400 	.word	0x40011400
 8004e6c:	40011800 	.word	0x40011800
 8004e70:	40011c00 	.word	0x40011c00
 8004e74:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	61bb      	str	r3, [r7, #24]
        break;
 8004e7e:	e006      	b.n	8004e8e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e84:	231e      	movs	r3, #30
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
        break;
 8004e8c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01e      	beq.n	8004ed2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	085a      	lsrs	r2, r3, #1
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	18d2      	adds	r2, r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	0019      	movs	r1, r3
 8004ea4:	0010      	movs	r0, r2
 8004ea6:	f7fb f92f 	bl	8000108 <__udivsi3>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b0f      	cmp	r3, #15
 8004eb4:	d909      	bls.n	8004eca <UART_SetConfig+0x3ae>
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	025b      	lsls	r3, r3, #9
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d204      	bcs.n	8004eca <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	60da      	str	r2, [r3, #12]
 8004ec8:	e003      	b.n	8004ed2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004eca:	231e      	movs	r3, #30
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	2201      	movs	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ede:	231e      	movs	r3, #30
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	781b      	ldrb	r3, [r3, #0]
}
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b008      	add	sp, #32
 8004eea:	bd80      	pop	{r7, pc}

08004eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2201      	movs	r2, #1
 8004efa:	4013      	ands	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4a4a      	ldr	r2, [pc, #296]	; (8005030 <UART_AdvFeatureConfig+0x144>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4a43      	ldr	r2, [pc, #268]	; (8005034 <UART_AdvFeatureConfig+0x148>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4a3b      	ldr	r2, [pc, #236]	; (8005038 <UART_AdvFeatureConfig+0x14c>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2208      	movs	r2, #8
 8004f60:	4013      	ands	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4a34      	ldr	r2, [pc, #208]	; (800503c <UART_AdvFeatureConfig+0x150>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	0019      	movs	r1, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2210      	movs	r2, #16
 8004f82:	4013      	ands	r3, r2
 8004f84:	d00b      	beq.n	8004f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4a2c      	ldr	r2, [pc, #176]	; (8005040 <UART_AdvFeatureConfig+0x154>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	0019      	movs	r1, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	4a25      	ldr	r2, [pc, #148]	; (8005044 <UART_AdvFeatureConfig+0x158>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2240      	movs	r2, #64	; 0x40
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d01d      	beq.n	8005006 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <UART_AdvFeatureConfig+0x15c>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	035b      	lsls	r3, r3, #13
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d10b      	bne.n	8005006 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4a15      	ldr	r2, [pc, #84]	; (800504c <UART_AdvFeatureConfig+0x160>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2280      	movs	r2, #128	; 0x80
 800500c:	4013      	ands	r3, r2
 800500e:	d00b      	beq.n	8005028 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4a0e      	ldr	r2, [pc, #56]	; (8005050 <UART_AdvFeatureConfig+0x164>)
 8005018:	4013      	ands	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }
}
 8005028:	46c0      	nop			; (mov r8, r8)
 800502a:	46bd      	mov	sp, r7
 800502c:	b002      	add	sp, #8
 800502e:	bd80      	pop	{r7, pc}
 8005030:	fffdffff 	.word	0xfffdffff
 8005034:	fffeffff 	.word	0xfffeffff
 8005038:	fffbffff 	.word	0xfffbffff
 800503c:	ffff7fff 	.word	0xffff7fff
 8005040:	ffffefff 	.word	0xffffefff
 8005044:	ffffdfff 	.word	0xffffdfff
 8005048:	ffefffff 	.word	0xffefffff
 800504c:	ff9fffff 	.word	0xff9fffff
 8005050:	fff7ffff 	.word	0xfff7ffff

08005054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af02      	add	r7, sp, #8
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	2100      	movs	r1, #0
 8005062:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005064:	f7fc fca6 	bl	80019b4 <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2208      	movs	r2, #8
 8005074:	4013      	ands	r3, r2
 8005076:	2b08      	cmp	r3, #8
 8005078:	d10c      	bne.n	8005094 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2280      	movs	r2, #128	; 0x80
 800507e:	0391      	lsls	r1, r2, #14
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <UART_CheckIdleState+0x8c>)
 8005084:	9200      	str	r2, [sp, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	f000 f82c 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 800508c:	1e03      	subs	r3, r0, #0
 800508e:	d001      	beq.n	8005094 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e021      	b.n	80050d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2204      	movs	r2, #4
 800509c:	4013      	ands	r3, r2
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d10c      	bne.n	80050bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	03d1      	lsls	r1, r2, #15
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	4a0d      	ldr	r2, [pc, #52]	; (80050e0 <UART_CheckIdleState+0x8c>)
 80050ac:	9200      	str	r2, [sp, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f000 f818 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 80050b4:	1e03      	subs	r3, r0, #0
 80050b6:	d001      	beq.n	80050bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e00d      	b.n	80050d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2274      	movs	r2, #116	; 0x74
 80050d2:	2100      	movs	r1, #0
 80050d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b004      	add	sp, #16
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	01ffffff 	.word	0x01ffffff

080050e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b094      	sub	sp, #80	; 0x50
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	1dfb      	adds	r3, r7, #7
 80050f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	e0a3      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050f8:	3301      	adds	r3, #1
 80050fa:	d100      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80050fc:	e09f      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fe:	f7fc fc59 	bl	80019b4 <HAL_GetTick>
 8005102:	0002      	movs	r2, r0
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <UART_WaitOnFlagUntilTimeout+0x30>
 800510e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005110:	2b00      	cmp	r3, #0
 8005112:	d13d      	bne.n	8005190 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005114:	f3ef 8310 	mrs	r3, PRIMASK
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800511c:	647b      	str	r3, [r7, #68]	; 0x44
 800511e:	2301      	movs	r3, #1
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	494c      	ldr	r1, [pc, #304]	; (8005268 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005136:	400a      	ands	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	f383 8810 	msr	PRIMASK, r3
}
 8005144:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005146:	f3ef 8310 	mrs	r3, PRIMASK
 800514a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800514c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514e:	643b      	str	r3, [r7, #64]	; 0x40
 8005150:	2301      	movs	r3, #1
 8005152:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	f383 8810 	msr	PRIMASK, r3
}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2101      	movs	r1, #1
 8005168:	438a      	bics	r2, r1
 800516a:	609a      	str	r2, [r3, #8]
 800516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005172:	f383 8810 	msr	PRIMASK, r3
}
 8005176:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2274      	movs	r2, #116	; 0x74
 8005188:	2100      	movs	r1, #0
 800518a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e067      	b.n	8005260 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2204      	movs	r2, #4
 8005198:	4013      	ands	r3, r2
 800519a:	d050      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	401a      	ands	r2, r3
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d146      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2280      	movs	r2, #128	; 0x80
 80051b6:	0112      	lsls	r2, r2, #4
 80051b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ba:	f3ef 8310 	mrs	r3, PRIMASK
 80051be:	613b      	str	r3, [r7, #16]
  return(result);
 80051c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f383 8810 	msr	PRIMASK, r3
}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4923      	ldr	r1, [pc, #140]	; (8005268 <UART_WaitOnFlagUntilTimeout+0x184>)
 80051dc:	400a      	ands	r2, r1
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f383 8810 	msr	PRIMASK, r3
}
 80051ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ec:	f3ef 8310 	mrs	r3, PRIMASK
 80051f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80051f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80051f6:	2301      	movs	r3, #1
 80051f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f383 8810 	msr	PRIMASK, r3
}
 8005200:	46c0      	nop			; (mov r8, r8)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2101      	movs	r1, #1
 800520e:	438a      	bics	r2, r1
 8005210:	609a      	str	r2, [r3, #8]
 8005212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	f383 8810 	msr	PRIMASK, r3
}
 800521c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2280      	movs	r2, #128	; 0x80
 800522e:	2120      	movs	r1, #32
 8005230:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2274      	movs	r2, #116	; 0x74
 8005236:	2100      	movs	r1, #0
 8005238:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e010      	b.n	8005260 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	425a      	negs	r2, r3
 800524e:	4153      	adcs	r3, r2
 8005250:	b2db      	uxtb	r3, r3
 8005252:	001a      	movs	r2, r3
 8005254:	1dfb      	adds	r3, r7, #7
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d100      	bne.n	800525e <UART_WaitOnFlagUntilTimeout+0x17a>
 800525c:	e74b      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	b014      	add	sp, #80	; 0x50
 8005266:	bd80      	pop	{r7, pc}
 8005268:	fffffe5f 	.word	0xfffffe5f

0800526c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005272:	f3ef 8305 	mrs	r3, IPSR
 8005276:	60bb      	str	r3, [r7, #8]
  return(result);
 8005278:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527e:	f3ef 8310 	mrs	r3, PRIMASK
 8005282:	607b      	str	r3, [r7, #4]
  return(result);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <osKernelInitialize+0x2e>
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <osKernelInitialize+0x54>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d103      	bne.n	800529a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005292:	2306      	movs	r3, #6
 8005294:	425b      	negs	r3, r3
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e00c      	b.n	80052b4 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <osKernelInitialize+0x54>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d105      	bne.n	80052ae <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80052a2:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <osKernelInitialize+0x54>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e002      	b.n	80052b4 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80052ae:	2301      	movs	r3, #1
 80052b0:	425b      	negs	r3, r3
 80052b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	0018      	movs	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b004      	add	sp, #16
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	20001ec0 	.word	0x20001ec0

080052c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ca:	f3ef 8305 	mrs	r3, IPSR
 80052ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80052d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d6:	f3ef 8310 	mrs	r3, PRIMASK
 80052da:	607b      	str	r3, [r7, #4]
  return(result);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <osKernelStart+0x2e>
 80052e2:	4b0e      	ldr	r3, [pc, #56]	; (800531c <osKernelStart+0x58>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d103      	bne.n	80052f2 <osKernelStart+0x2e>
    stat = osErrorISR;
 80052ea:	2306      	movs	r3, #6
 80052ec:	425b      	negs	r3, r3
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e00e      	b.n	8005310 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <osKernelStart+0x58>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d107      	bne.n	800530a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80052fa:	4b08      	ldr	r3, [pc, #32]	; (800531c <osKernelStart+0x58>)
 80052fc:	2202      	movs	r2, #2
 80052fe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005300:	f000 ff94 	bl	800622c <vTaskStartScheduler>
      stat = osOK;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e002      	b.n	8005310 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800530a:	2301      	movs	r3, #1
 800530c:	425b      	negs	r3, r3
 800530e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005310:	68fb      	ldr	r3, [r7, #12]
}
 8005312:	0018      	movs	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	b004      	add	sp, #16
 8005318:	bd80      	pop	{r7, pc}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	20001ec0 	.word	0x20001ec0

08005320 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b090      	sub	sp, #64	; 0x40
 8005324:	af04      	add	r7, sp, #16
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005330:	f3ef 8305 	mrs	r3, IPSR
 8005334:	61fb      	str	r3, [r7, #28]
  return(result);
 8005336:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005338:	2b00      	cmp	r3, #0
 800533a:	d000      	beq.n	800533e <osThreadNew+0x1e>
 800533c:	e090      	b.n	8005460 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533e:	f3ef 8310 	mrs	r3, PRIMASK
 8005342:	61bb      	str	r3, [r7, #24]
  return(result);
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <osThreadNew+0x34>
 800534a:	4b48      	ldr	r3, [pc, #288]	; (800546c <osThreadNew+0x14c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d100      	bne.n	8005354 <osThreadNew+0x34>
 8005352:	e085      	b.n	8005460 <osThreadNew+0x140>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d100      	bne.n	800535c <osThreadNew+0x3c>
 800535a:	e081      	b.n	8005460 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005360:	2318      	movs	r3, #24
 8005362:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8005364:	2117      	movs	r1, #23
 8005366:	187b      	adds	r3, r7, r1
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800536c:	187b      	adds	r3, r7, r1
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005370:	2301      	movs	r3, #1
 8005372:	425b      	negs	r3, r3
 8005374:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d044      	beq.n	8005406 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <osThreadNew+0x6a>
        name = attr->name;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	2b00      	cmp	r3, #0
 800539c:	d007      	beq.n	80053ae <osThreadNew+0x8e>
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	2b38      	cmp	r3, #56	; 0x38
 80053a2:	d804      	bhi.n	80053ae <osThreadNew+0x8e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	4013      	ands	r3, r2
 80053ac:	d001      	beq.n	80053b2 <osThreadNew+0x92>
        return (NULL);
 80053ae:	2300      	movs	r3, #0
 80053b0:	e057      	b.n	8005462 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	089b      	lsrs	r3, r3, #2
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00e      	beq.n	80053e8 <osThreadNew+0xc8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2bbb      	cmp	r3, #187	; 0xbb
 80053d0:	d90a      	bls.n	80053e8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d006      	beq.n	80053e8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <osThreadNew+0xc8>
        mem = 1;
 80053e2:	2301      	movs	r3, #1
 80053e4:	623b      	str	r3, [r7, #32]
 80053e6:	e010      	b.n	800540a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10c      	bne.n	800540a <osThreadNew+0xea>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <osThreadNew+0xea>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d104      	bne.n	800540a <osThreadNew+0xea>
          mem = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	623b      	str	r3, [r7, #32]
 8005404:	e001      	b.n	800540a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d112      	bne.n	8005436 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005418:	68bd      	ldr	r5, [r7, #8]
 800541a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800541c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	9302      	str	r3, [sp, #8]
 8005422:	9201      	str	r2, [sp, #4]
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	002b      	movs	r3, r5
 800542a:	0022      	movs	r2, r4
 800542c:	f000 fd49 	bl	8005ec2 <xTaskCreateStatic>
 8005430:	0003      	movs	r3, r0
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	e014      	b.n	8005460 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d111      	bne.n	8005460 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	b29a      	uxth	r2, r3
 8005440:	68bc      	ldr	r4, [r7, #8]
 8005442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	2310      	movs	r3, #16
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	0023      	movs	r3, r4
 8005452:	f000 fd79 	bl	8005f48 <xTaskCreate>
 8005456:	0003      	movs	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <osThreadNew+0x140>
          hTask = NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005460:	693b      	ldr	r3, [r7, #16]
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b00c      	add	sp, #48	; 0x30
 8005468:	bdb0      	pop	{r4, r5, r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	20001ec0 	.word	0x20001ec0

08005470 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005478:	f3ef 8305 	mrs	r3, IPSR
 800547c:	613b      	str	r3, [r7, #16]
  return(result);
 800547e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005480:	2b00      	cmp	r3, #0
 8005482:	d109      	bne.n	8005498 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005484:	f3ef 8310 	mrs	r3, PRIMASK
 8005488:	60fb      	str	r3, [r7, #12]
  return(result);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <osDelay+0x30>
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <osDelay+0x4c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d103      	bne.n	80054a0 <osDelay+0x30>
    stat = osErrorISR;
 8005498:	2306      	movs	r3, #6
 800549a:	425b      	negs	r3, r3
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e008      	b.n	80054b2 <osDelay+0x42>
  }
  else {
    stat = osOK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <osDelay+0x42>
      vTaskDelay(ticks);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f000 fe97 	bl	80061e0 <vTaskDelay>
    }
  }

  return (stat);
 80054b2:	697b      	ldr	r3, [r7, #20]
}
 80054b4:	0018      	movs	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b006      	add	sp, #24
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	20001ec0 	.word	0x20001ec0

080054c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4a06      	ldr	r2, [pc, #24]	; (80054e8 <vApplicationGetIdleTaskMemory+0x28>)
 80054d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a05      	ldr	r2, [pc, #20]	; (80054ec <vApplicationGetIdleTaskMemory+0x2c>)
 80054d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2280      	movs	r2, #128	; 0x80
 80054dc:	601a      	str	r2, [r3, #0]
}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b004      	add	sp, #16
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	20001ec4 	.word	0x20001ec4
 80054ec:	20001f80 	.word	0x20001f80

080054f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a06      	ldr	r2, [pc, #24]	; (8005518 <vApplicationGetTimerTaskMemory+0x28>)
 8005500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a05      	ldr	r2, [pc, #20]	; (800551c <vApplicationGetTimerTaskMemory+0x2c>)
 8005506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	0052      	lsls	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b004      	add	sp, #16
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20002180 	.word	0x20002180
 800551c:	2000223c 	.word	0x2000223c

08005520 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3308      	adds	r3, #8
 800552c:	001a      	movs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	4252      	negs	r2, r2
 8005538:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3308      	adds	r3, #8
 800553e:	001a      	movs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3308      	adds	r3, #8
 8005548:	001a      	movs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	b002      	add	sp, #8
 800555a:	bd80      	pop	{r7, pc}

0800555c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b002      	add	sp, #8
 8005570:	bd80      	pop	{r7, pc}

08005572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	601a      	str	r2, [r3, #0]
}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b004      	add	sp, #16
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3301      	adds	r3, #1
 80055ca:	d103      	bne.n	80055d4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e00c      	b.n	80055ee <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3308      	adds	r3, #8
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e002      	b.n	80055e2 <vListInsert+0x2c>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d2f6      	bcs.n	80055dc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b004      	add	sp, #16
 8005620:	bd80      	pop	{r7, pc}

08005622 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6892      	ldr	r2, [r2, #8]
 8005638:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6852      	ldr	r2, [r2, #4]
 8005642:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d103      	bne.n	8005656 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1e5a      	subs	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
}
 800566a:	0018      	movs	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	b004      	add	sp, #16
 8005670:	bd80      	pop	{r7, pc}

08005672 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <xQueueGenericReset+0x18>
 8005686:	b672      	cpsid	i
 8005688:	e7fe      	b.n	8005688 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800568a:	f001 fdf9 	bl	8007280 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	434b      	muls	r3, r1
 800569c:	18d2      	adds	r2, r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b8:	1e59      	subs	r1, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	434b      	muls	r3, r1
 80056c0:	18d2      	adds	r2, r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2244      	movs	r2, #68	; 0x44
 80056ca:	21ff      	movs	r1, #255	; 0xff
 80056cc:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2245      	movs	r2, #69	; 0x45
 80056d2:	21ff      	movs	r1, #255	; 0xff
 80056d4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10d      	bne.n	80056f8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3310      	adds	r3, #16
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 fff5 	bl	80066d8 <xTaskRemoveFromEventList>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d00c      	beq.n	800570c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056f2:	f001 fdb5 	bl	8007260 <vPortYield>
 80056f6:	e009      	b.n	800570c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3310      	adds	r3, #16
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7ff ff0f 	bl	8005520 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3324      	adds	r3, #36	; 0x24
 8005706:	0018      	movs	r0, r3
 8005708:	f7ff ff0a 	bl	8005520 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800570c:	f001 fdca 	bl	80072a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005710:	2301      	movs	r3, #1
}
 8005712:	0018      	movs	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	b004      	add	sp, #16
 8005718:	bd80      	pop	{r7, pc}

0800571a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800571a:	b590      	push	{r4, r7, lr}
 800571c:	b089      	sub	sp, #36	; 0x24
 800571e:	af02      	add	r7, sp, #8
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <xQueueGenericCreateStatic+0x18>
 800572e:	b672      	cpsid	i
 8005730:	e7fe      	b.n	8005730 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <xQueueGenericCreateStatic+0x22>
 8005738:	b672      	cpsid	i
 800573a:	e7fe      	b.n	800573a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <xQueueGenericCreateStatic+0x2e>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <xQueueGenericCreateStatic+0x32>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <xQueueGenericCreateStatic+0x34>
 800574c:	2300      	movs	r3, #0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <xQueueGenericCreateStatic+0x3c>
 8005752:	b672      	cpsid	i
 8005754:	e7fe      	b.n	8005754 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <xQueueGenericCreateStatic+0x48>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <xQueueGenericCreateStatic+0x4c>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <xQueueGenericCreateStatic+0x4e>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <xQueueGenericCreateStatic+0x56>
 800576c:	b672      	cpsid	i
 800576e:	e7fe      	b.n	800576e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005770:	2350      	movs	r3, #80	; 0x50
 8005772:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b50      	cmp	r3, #80	; 0x50
 8005778:	d001      	beq.n	800577e <xQueueGenericCreateStatic+0x64>
 800577a:	b672      	cpsid	i
 800577c:	e7fe      	b.n	800577c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2246      	movs	r2, #70	; 0x46
 800578c:	2101      	movs	r1, #1
 800578e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005790:	2328      	movs	r3, #40	; 0x28
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	781c      	ldrb	r4, [r3, #0]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	0023      	movs	r3, r4
 80057a2:	f000 f805 	bl	80057b0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80057a6:	697b      	ldr	r3, [r7, #20]
	}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b007      	add	sp, #28
 80057ae:	bd90      	pop	{r4, r7, pc}

080057b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	001a      	movs	r2, r3
 80057be:	1cfb      	adds	r3, r7, #3
 80057c0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d103      	bne.n	80057d0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e002      	b.n	80057d6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2101      	movs	r1, #1
 80057e6:	0018      	movs	r0, r3
 80057e8:	f7ff ff43 	bl	8005672 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	1cfa      	adds	r2, r7, #3
 80057f0:	214c      	movs	r1, #76	; 0x4c
 80057f2:	7812      	ldrb	r2, [r2, #0]
 80057f4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b004      	add	sp, #16
 80057fc:	bd80      	pop	{r7, pc}

080057fe <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b08a      	sub	sp, #40	; 0x28
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800580c:	2300      	movs	r3, #0
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <xQueueGenericSend+0x20>
 800581a:	b672      	cpsid	i
 800581c:	e7fe      	b.n	800581c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <xQueueGenericSend+0x2e>
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <xQueueGenericSend+0x32>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <xQueueGenericSend+0x34>
 8005830:	2300      	movs	r3, #0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <xQueueGenericSend+0x3c>
 8005836:	b672      	cpsid	i
 8005838:	e7fe      	b.n	8005838 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d103      	bne.n	8005848 <xQueueGenericSend+0x4a>
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <xQueueGenericSend+0x4e>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <xQueueGenericSend+0x50>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <xQueueGenericSend+0x58>
 8005852:	b672      	cpsid	i
 8005854:	e7fe      	b.n	8005854 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005856:	f001 f8dd 	bl	8006a14 <xTaskGetSchedulerState>
 800585a:	1e03      	subs	r3, r0, #0
 800585c:	d102      	bne.n	8005864 <xQueueGenericSend+0x66>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <xQueueGenericSend+0x6a>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <xQueueGenericSend+0x6c>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <xQueueGenericSend+0x74>
 800586e:	b672      	cpsid	i
 8005870:	e7fe      	b.n	8005870 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005872:	f001 fd05 	bl	8007280 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <xQueueGenericSend+0x8a>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d11e      	bne.n	80058c6 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	0018      	movs	r0, r3
 8005890:	f000 f99f 	bl	8005bd2 <prvCopyDataToQueue>
 8005894:	0003      	movs	r3, r0
 8005896:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d009      	beq.n	80058b4 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 ff17 	bl	80066d8 <xTaskRemoveFromEventList>
 80058aa:	1e03      	subs	r3, r0, #0
 80058ac:	d007      	beq.n	80058be <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058ae:	f001 fcd7 	bl	8007260 <vPortYield>
 80058b2:	e004      	b.n	80058be <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058ba:	f001 fcd1 	bl	8007260 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058be:	f001 fcf1 	bl	80072a4 <vPortExitCritical>
				return pdPASS;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e05b      	b.n	800597e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d103      	bne.n	80058d4 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058cc:	f001 fcea 	bl	80072a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e054      	b.n	800597e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058da:	2314      	movs	r3, #20
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	0018      	movs	r0, r3
 80058e0:	f000 ff56 	bl	8006790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058e4:	2301      	movs	r3, #1
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058e8:	f001 fcdc 	bl	80072a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058ec:	f000 fcfc 	bl	80062e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058f0:	f001 fcc6 	bl	8007280 <vPortEnterCritical>
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	2244      	movs	r2, #68	; 0x44
 80058f8:	5c9b      	ldrb	r3, [r3, r2]
 80058fa:	b25b      	sxtb	r3, r3
 80058fc:	3301      	adds	r3, #1
 80058fe:	d103      	bne.n	8005908 <xQueueGenericSend+0x10a>
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2244      	movs	r2, #68	; 0x44
 8005904:	2100      	movs	r1, #0
 8005906:	5499      	strb	r1, [r3, r2]
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	2245      	movs	r2, #69	; 0x45
 800590c:	5c9b      	ldrb	r3, [r3, r2]
 800590e:	b25b      	sxtb	r3, r3
 8005910:	3301      	adds	r3, #1
 8005912:	d103      	bne.n	800591c <xQueueGenericSend+0x11e>
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	2245      	movs	r2, #69	; 0x45
 8005918:	2100      	movs	r1, #0
 800591a:	5499      	strb	r1, [r3, r2]
 800591c:	f001 fcc2 	bl	80072a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005920:	1d3a      	adds	r2, r7, #4
 8005922:	2314      	movs	r3, #20
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	0011      	movs	r1, r2
 8005928:	0018      	movs	r0, r3
 800592a:	f000 ff45 	bl	80067b8 <xTaskCheckForTimeOut>
 800592e:	1e03      	subs	r3, r0, #0
 8005930:	d11e      	bne.n	8005970 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 fa51 	bl	8005ddc <prvIsQueueFull>
 800593a:	1e03      	subs	r3, r0, #0
 800593c:	d011      	beq.n	8005962 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	3310      	adds	r3, #16
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	0011      	movs	r1, r2
 8005946:	0018      	movs	r0, r3
 8005948:	f000 fe82 	bl	8006650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	0018      	movs	r0, r3
 8005950:	f000 f9d0 	bl	8005cf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005954:	f000 fcd4 	bl	8006300 <xTaskResumeAll>
 8005958:	1e03      	subs	r3, r0, #0
 800595a:	d18a      	bne.n	8005872 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800595c:	f001 fc80 	bl	8007260 <vPortYield>
 8005960:	e787      	b.n	8005872 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	0018      	movs	r0, r3
 8005966:	f000 f9c5 	bl	8005cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800596a:	f000 fcc9 	bl	8006300 <xTaskResumeAll>
 800596e:	e780      	b.n	8005872 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	0018      	movs	r0, r3
 8005974:	f000 f9be 	bl	8005cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005978:	f000 fcc2 	bl	8006300 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800597c:	2300      	movs	r3, #0
		}
	}
}
 800597e:	0018      	movs	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	b00a      	add	sp, #40	; 0x28
 8005984:	bd80      	pop	{r7, pc}

08005986 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005986:	b590      	push	{r4, r7, lr}
 8005988:	b089      	sub	sp, #36	; 0x24
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <xQueueGenericSendFromISR+0x1c>
 800599e:	b672      	cpsid	i
 80059a0:	e7fe      	b.n	80059a0 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <xQueueGenericSendFromISR+0x2a>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <xQueueGenericSendFromISR+0x2e>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <xQueueGenericSendFromISR+0x30>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <xQueueGenericSendFromISR+0x38>
 80059ba:	b672      	cpsid	i
 80059bc:	e7fe      	b.n	80059bc <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d103      	bne.n	80059cc <xQueueGenericSendFromISR+0x46>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <xQueueGenericSendFromISR+0x4a>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <xQueueGenericSendFromISR+0x4c>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <xQueueGenericSendFromISR+0x54>
 80059d6:	b672      	cpsid	i
 80059d8:	e7fe      	b.n	80059d8 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059da:	f001 fc7b 	bl	80072d4 <ulSetInterruptMaskFromISR>
 80059de:	0003      	movs	r3, r0
 80059e0:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <xQueueGenericSendFromISR+0x6e>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d12e      	bne.n	8005a52 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059f4:	2413      	movs	r4, #19
 80059f6:	193b      	adds	r3, r7, r4
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	2145      	movs	r1, #69	; 0x45
 80059fc:	5c52      	ldrb	r2, [r2, r1]
 80059fe:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	0018      	movs	r0, r3
 8005a08:	f000 f8e3 	bl	8005bd2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a0c:	193b      	adds	r3, r7, r4
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b25b      	sxtb	r3, r3
 8005a12:	3301      	adds	r3, #1
 8005a14:	d111      	bne.n	8005a3a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	3324      	adds	r3, #36	; 0x24
 8005a22:	0018      	movs	r0, r3
 8005a24:	f000 fe58 	bl	80066d8 <xTaskRemoveFromEventList>
 8005a28:	1e03      	subs	r3, r0, #0
 8005a2a:	d00f      	beq.n	8005a4c <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00c      	beq.n	8005a4c <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e008      	b.n	8005a4c <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a3a:	2313      	movs	r3, #19
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	b259      	sxtb	r1, r3
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2245      	movs	r2, #69	; 0x45
 8005a4a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]
		{
 8005a50:	e001      	b.n	8005a56 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f001 fc41 	bl	80072e0 <vClearInterruptMaskFromISR>

	return xReturn;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b009      	add	sp, #36	; 0x24
 8005a66:	bd90      	pop	{r4, r7, pc}

08005a68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <xQueueReceive+0x1e>
 8005a82:	b672      	cpsid	i
 8005a84:	e7fe      	b.n	8005a84 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <xQueueReceive+0x2c>
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <xQueueReceive+0x30>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <xQueueReceive+0x32>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <xQueueReceive+0x3a>
 8005a9e:	b672      	cpsid	i
 8005aa0:	e7fe      	b.n	8005aa0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aa2:	f000 ffb7 	bl	8006a14 <xTaskGetSchedulerState>
 8005aa6:	1e03      	subs	r3, r0, #0
 8005aa8:	d102      	bne.n	8005ab0 <xQueueReceive+0x48>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <xQueueReceive+0x4c>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <xQueueReceive+0x4e>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <xQueueReceive+0x56>
 8005aba:	b672      	cpsid	i
 8005abc:	e7fe      	b.n	8005abc <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005abe:	f001 fbdf 	bl	8007280 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01a      	beq.n	8005b04 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	0011      	movs	r1, r2
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f000 f8e7 	bl	8005ca8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	1e5a      	subs	r2, r3, #1
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	3310      	adds	r3, #16
 8005aee:	0018      	movs	r0, r3
 8005af0:	f000 fdf2 	bl	80066d8 <xTaskRemoveFromEventList>
 8005af4:	1e03      	subs	r3, r0, #0
 8005af6:	d001      	beq.n	8005afc <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005af8:	f001 fbb2 	bl	8007260 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005afc:	f001 fbd2 	bl	80072a4 <vPortExitCritical>
				return pdPASS;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e062      	b.n	8005bca <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b0a:	f001 fbcb 	bl	80072a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e05b      	b.n	8005bca <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b18:	2314      	movs	r3, #20
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f000 fe37 	bl	8006790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b22:	2301      	movs	r3, #1
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b26:	f001 fbbd 	bl	80072a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b2a:	f000 fbdd 	bl	80062e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b2e:	f001 fba7 	bl	8007280 <vPortEnterCritical>
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	2244      	movs	r2, #68	; 0x44
 8005b36:	5c9b      	ldrb	r3, [r3, r2]
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	d103      	bne.n	8005b46 <xQueueReceive+0xde>
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	2244      	movs	r2, #68	; 0x44
 8005b42:	2100      	movs	r1, #0
 8005b44:	5499      	strb	r1, [r3, r2]
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	2245      	movs	r2, #69	; 0x45
 8005b4a:	5c9b      	ldrb	r3, [r3, r2]
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	3301      	adds	r3, #1
 8005b50:	d103      	bne.n	8005b5a <xQueueReceive+0xf2>
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	2245      	movs	r2, #69	; 0x45
 8005b56:	2100      	movs	r1, #0
 8005b58:	5499      	strb	r1, [r3, r2]
 8005b5a:	f001 fba3 	bl	80072a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b5e:	1d3a      	adds	r2, r7, #4
 8005b60:	2314      	movs	r3, #20
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	0011      	movs	r1, r2
 8005b66:	0018      	movs	r0, r3
 8005b68:	f000 fe26 	bl	80067b8 <xTaskCheckForTimeOut>
 8005b6c:	1e03      	subs	r3, r0, #0
 8005b6e:	d11e      	bne.n	8005bae <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 f91c 	bl	8005db0 <prvIsQueueEmpty>
 8005b78:	1e03      	subs	r3, r0, #0
 8005b7a:	d011      	beq.n	8005ba0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	3324      	adds	r3, #36	; 0x24
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	0011      	movs	r1, r2
 8005b84:	0018      	movs	r0, r3
 8005b86:	f000 fd63 	bl	8006650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 f8b1 	bl	8005cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b92:	f000 fbb5 	bl	8006300 <xTaskResumeAll>
 8005b96:	1e03      	subs	r3, r0, #0
 8005b98:	d191      	bne.n	8005abe <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005b9a:	f001 fb61 	bl	8007260 <vPortYield>
 8005b9e:	e78e      	b.n	8005abe <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 f8a6 	bl	8005cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ba8:	f000 fbaa 	bl	8006300 <xTaskResumeAll>
 8005bac:	e787      	b.n	8005abe <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f000 f89f 	bl	8005cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bb6:	f000 fba3 	bl	8006300 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 f8f7 	bl	8005db0 <prvIsQueueEmpty>
 8005bc2:	1e03      	subs	r3, r0, #0
 8005bc4:	d100      	bne.n	8005bc8 <xQueueReceive+0x160>
 8005bc6:	e77a      	b.n	8005abe <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b00a      	add	sp, #40	; 0x28
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10e      	bne.n	8005c0e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d14e      	bne.n	8005c96 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f000 ff25 	bl	8006a4c <xTaskPriorityDisinherit>
 8005c02:	0003      	movs	r3, r0
 8005c04:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	e043      	b.n	8005c96 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d119      	bne.n	8005c48 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6898      	ldr	r0, [r3, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	0019      	movs	r1, r3
 8005c20:	f001 fd92 	bl	8007748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	18d2      	adds	r2, r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d32b      	bcc.n	8005c96 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	609a      	str	r2, [r3, #8]
 8005c46:	e026      	b.n	8005c96 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68d8      	ldr	r0, [r3, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	0019      	movs	r1, r3
 8005c54:	f001 fd78 	bl	8007748 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	425b      	negs	r3, r3
 8005c62:	18d2      	adds	r2, r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d207      	bcs.n	8005c84 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	425b      	negs	r3, r3
 8005c7e:	18d2      	adds	r2, r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d105      	bne.n	8005c96 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c9e:	697b      	ldr	r3, [r7, #20]
}
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	b006      	add	sp, #24
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d018      	beq.n	8005cec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	18d2      	adds	r2, r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d303      	bcc.n	8005cdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68d9      	ldr	r1, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f001 fd2e 	bl	8007748 <memcpy>
	}
}
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b002      	add	sp, #8
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cfc:	f001 fac0 	bl	8007280 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d00:	230f      	movs	r3, #15
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	2145      	movs	r1, #69	; 0x45
 8005d08:	5c52      	ldrb	r2, [r2, r1]
 8005d0a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d0c:	e013      	b.n	8005d36 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d016      	beq.n	8005d44 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3324      	adds	r3, #36	; 0x24
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f000 fcdc 	bl	80066d8 <xTaskRemoveFromEventList>
 8005d20:	1e03      	subs	r3, r0, #0
 8005d22:	d001      	beq.n	8005d28 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d24:	f000 fd98 	bl	8006858 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d28:	210f      	movs	r1, #15
 8005d2a:	187b      	adds	r3, r7, r1
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	187b      	adds	r3, r7, r1
 8005d34:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d36:	230f      	movs	r3, #15
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	dce5      	bgt.n	8005d0e <prvUnlockQueue+0x1a>
 8005d42:	e000      	b.n	8005d46 <prvUnlockQueue+0x52>
					break;
 8005d44:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2245      	movs	r2, #69	; 0x45
 8005d4a:	21ff      	movs	r1, #255	; 0xff
 8005d4c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005d4e:	f001 faa9 	bl	80072a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d52:	f001 fa95 	bl	8007280 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d56:	230e      	movs	r3, #14
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	2144      	movs	r1, #68	; 0x44
 8005d5e:	5c52      	ldrb	r2, [r2, r1]
 8005d60:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d62:	e013      	b.n	8005d8c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d016      	beq.n	8005d9a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3310      	adds	r3, #16
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 fcb1 	bl	80066d8 <xTaskRemoveFromEventList>
 8005d76:	1e03      	subs	r3, r0, #0
 8005d78:	d001      	beq.n	8005d7e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005d7a:	f000 fd6d 	bl	8006858 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d7e:	210e      	movs	r1, #14
 8005d80:	187b      	adds	r3, r7, r1
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d8c:	230e      	movs	r3, #14
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b25b      	sxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	dce5      	bgt.n	8005d64 <prvUnlockQueue+0x70>
 8005d98:	e000      	b.n	8005d9c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005d9a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2244      	movs	r2, #68	; 0x44
 8005da0:	21ff      	movs	r1, #255	; 0xff
 8005da2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005da4:	f001 fa7e 	bl	80072a4 <vPortExitCritical>
}
 8005da8:	46c0      	nop			; (mov r8, r8)
 8005daa:	46bd      	mov	sp, r7
 8005dac:	b004      	add	sp, #16
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005db8:	f001 fa62 	bl	8007280 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e001      	b.n	8005dce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dce:	f001 fa69 	bl	80072a4 <vPortExitCritical>

	return xReturn;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
}
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b004      	add	sp, #16
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005de4:	f001 fa4c 	bl	8007280 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d102      	bne.n	8005dfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	e001      	b.n	8005dfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dfe:	f001 fa51 	bl	80072a4 <vPortExitCritical>

	return xReturn;
 8005e02:	68fb      	ldr	r3, [r7, #12]
}
 8005e04:	0018      	movs	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b004      	add	sp, #16
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e015      	b.n	8005e48 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e1c:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <vQueueAddToRegistry+0x4c>)
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	00d2      	lsls	r2, r2, #3
 8005e22:	58d3      	ldr	r3, [r2, r3]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10c      	bne.n	8005e42 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e28:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <vQueueAddToRegistry+0x4c>)
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	00d2      	lsls	r2, r2, #3
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e32:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <vQueueAddToRegistry+0x4c>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	18d3      	adds	r3, r2, r3
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e40:	e006      	b.n	8005e50 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b07      	cmp	r3, #7
 8005e4c:	d9e6      	bls.n	8005e1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	46c0      	nop			; (mov r8, r8)
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b004      	add	sp, #16
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	2000263c 	.word	0x2000263c

08005e5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e6c:	f001 fa08 	bl	8007280 <vPortEnterCritical>
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2244      	movs	r2, #68	; 0x44
 8005e74:	5c9b      	ldrb	r3, [r3, r2]
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	3301      	adds	r3, #1
 8005e7a:	d103      	bne.n	8005e84 <vQueueWaitForMessageRestricted+0x28>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2244      	movs	r2, #68	; 0x44
 8005e80:	2100      	movs	r1, #0
 8005e82:	5499      	strb	r1, [r3, r2]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2245      	movs	r2, #69	; 0x45
 8005e88:	5c9b      	ldrb	r3, [r3, r2]
 8005e8a:	b25b      	sxtb	r3, r3
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	d103      	bne.n	8005e98 <vQueueWaitForMessageRestricted+0x3c>
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2245      	movs	r2, #69	; 0x45
 8005e94:	2100      	movs	r1, #0
 8005e96:	5499      	strb	r1, [r3, r2]
 8005e98:	f001 fa04 	bl	80072a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	3324      	adds	r3, #36	; 0x24
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	0018      	movs	r0, r3
 8005eae:	f000 fbed 	bl	800668c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7ff ff1d 	bl	8005cf4 <prvUnlockQueue>
	}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b006      	add	sp, #24
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ec2:	b590      	push	{r4, r7, lr}
 8005ec4:	b08d      	sub	sp, #52	; 0x34
 8005ec6:	af04      	add	r7, sp, #16
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <xTaskCreateStatic+0x18>
 8005ed6:	b672      	cpsid	i
 8005ed8:	e7fe      	b.n	8005ed8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <xTaskCreateStatic+0x22>
 8005ee0:	b672      	cpsid	i
 8005ee2:	e7fe      	b.n	8005ee2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ee4:	23bc      	movs	r3, #188	; 0xbc
 8005ee6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2bbc      	cmp	r3, #188	; 0xbc
 8005eec:	d001      	beq.n	8005ef2 <xTaskCreateStatic+0x30>
 8005eee:	b672      	cpsid	i
 8005ef0:	e7fe      	b.n	8005ef0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d020      	beq.n	8005f3a <xTaskCreateStatic+0x78>
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01d      	beq.n	8005f3a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	22b9      	movs	r2, #185	; 0xb9
 8005f0c:	2102      	movs	r1, #2
 8005f0e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f10:	683c      	ldr	r4, [r7, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	9303      	str	r3, [sp, #12]
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	9302      	str	r3, [sp, #8]
 8005f20:	2318      	movs	r3, #24
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	0023      	movs	r3, r4
 8005f2c:	f000 f858 	bl	8005fe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	0018      	movs	r0, r3
 8005f34:	f000 f8ec 	bl	8006110 <prvAddNewTaskToReadyList>
 8005f38:	e001      	b.n	8005f3e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
	}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b009      	add	sp, #36	; 0x24
 8005f46:	bd90      	pop	{r4, r7, pc}

08005f48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	b08d      	sub	sp, #52	; 0x34
 8005f4c:	af04      	add	r7, sp, #16
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	1dbb      	adds	r3, r7, #6
 8005f56:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f58:	1dbb      	adds	r3, r7, #6
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f001 fa26 	bl	80073b0 <pvPortMalloc>
 8005f64:	0003      	movs	r3, r0
 8005f66:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d010      	beq.n	8005f90 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f6e:	20bc      	movs	r0, #188	; 0xbc
 8005f70:	f001 fa1e 	bl	80073b0 <pvPortMalloc>
 8005f74:	0003      	movs	r3, r0
 8005f76:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
 8005f84:	e006      	b.n	8005f94 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f001 fab7 	bl	80074fc <vPortFree>
 8005f8e:	e001      	b.n	8005f94 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01a      	beq.n	8005fd0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	22b9      	movs	r2, #185	; 0xb9
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fa2:	1dbb      	adds	r3, r7, #6
 8005fa4:	881a      	ldrh	r2, [r3, #0]
 8005fa6:	683c      	ldr	r4, [r7, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	2300      	movs	r3, #0
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	9302      	str	r3, [sp, #8]
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	0023      	movs	r3, r4
 8005fbe:	f000 f80f 	bl	8005fe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f000 f8a3 	bl	8006110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	e002      	b.n	8005fd6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	425b      	negs	r3, r3
 8005fd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
	}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b009      	add	sp, #36	; 0x24
 8005fde:	bd90      	pop	{r4, r7, pc}

08005fe0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	001a      	movs	r2, r3
 8005ff8:	21a5      	movs	r1, #165	; 0xa5
 8005ffa:	f001 fbae 	bl	800775a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	493e      	ldr	r1, [pc, #248]	; (8006100 <prvInitialiseNewTask+0x120>)
 8006006:	468c      	mov	ip, r1
 8006008:	4463      	add	r3, ip
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	18d3      	adds	r3, r2, r3
 800600e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2207      	movs	r2, #7
 8006014:	4393      	bics	r3, r2
 8006016:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2207      	movs	r2, #7
 800601c:	4013      	ands	r3, r2
 800601e:	d001      	beq.n	8006024 <prvInitialiseNewTask+0x44>
 8006020:	b672      	cpsid	i
 8006022:	e7fe      	b.n	8006022 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e013      	b.n	8006052 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	18d3      	adds	r3, r2, r3
 8006030:	7818      	ldrb	r0, [r3, #0]
 8006032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006034:	2134      	movs	r1, #52	; 0x34
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	185b      	adds	r3, r3, r1
 800603c:	1c02      	adds	r2, r0, #0
 800603e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	18d3      	adds	r3, r2, r3
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d006      	beq.n	800605a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3301      	adds	r3, #1
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b0f      	cmp	r3, #15
 8006056:	d9e8      	bls.n	800602a <prvInitialiseNewTask+0x4a>
 8006058:	e000      	b.n	800605c <prvInitialiseNewTask+0x7c>
		{
			break;
 800605a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	2243      	movs	r2, #67	; 0x43
 8006060:	2100      	movs	r1, #0
 8006062:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	2b37      	cmp	r3, #55	; 0x37
 8006068:	d901      	bls.n	800606e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800606a:	2337      	movs	r3, #55	; 0x37
 800606c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	6a3a      	ldr	r2, [r7, #32]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	2200      	movs	r2, #0
 800607e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	3304      	adds	r3, #4
 8006084:	0018      	movs	r0, r3
 8006086:	f7ff fa69 	bl	800555c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	3318      	adds	r3, #24
 800608e:	0018      	movs	r0, r3
 8006090:	f7ff fa64 	bl	800555c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006098:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	2238      	movs	r2, #56	; 0x38
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	22b4      	movs	r2, #180	; 0xb4
 80060ae:	2100      	movs	r1, #0
 80060b0:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	22b8      	movs	r2, #184	; 0xb8
 80060b6:	2100      	movs	r1, #0
 80060b8:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	3354      	adds	r3, #84	; 0x54
 80060be:	2260      	movs	r2, #96	; 0x60
 80060c0:	2100      	movs	r1, #0
 80060c2:	0018      	movs	r0, r3
 80060c4:	f001 fb49 	bl	800775a <memset>
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	4a0e      	ldr	r2, [pc, #56]	; (8006104 <prvInitialiseNewTask+0x124>)
 80060cc:	659a      	str	r2, [r3, #88]	; 0x58
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	4a0d      	ldr	r2, [pc, #52]	; (8006108 <prvInitialiseNewTask+0x128>)
 80060d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	4a0d      	ldr	r2, [pc, #52]	; (800610c <prvInitialiseNewTask+0x12c>)
 80060d8:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	68f9      	ldr	r1, [r7, #12]
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	0018      	movs	r0, r3
 80060e2:	f001 f833 	bl	800714c <pxPortInitialiseStack>
 80060e6:	0002      	movs	r2, r0
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f8:	46c0      	nop			; (mov r8, r8)
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b006      	add	sp, #24
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	3fffffff 	.word	0x3fffffff
 8006104:	08007a4c 	.word	0x08007a4c
 8006108:	08007a6c 	.word	0x08007a6c
 800610c:	08007a2c 	.word	0x08007a2c

08006110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006118:	f001 f8b2 	bl	8007280 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800611c:	4b2a      	ldr	r3, [pc, #168]	; (80061c8 <prvAddNewTaskToReadyList+0xb8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	4b29      	ldr	r3, [pc, #164]	; (80061c8 <prvAddNewTaskToReadyList+0xb8>)
 8006124:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800612e:	4b27      	ldr	r3, [pc, #156]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006134:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <prvAddNewTaskToReadyList+0xb8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d110      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800613c:	f000 fba6 	bl	800688c <prvInitialiseTaskLists>
 8006140:	e00d      	b.n	800615e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006142:	4b23      	ldr	r3, [pc, #140]	; (80061d0 <prvAddNewTaskToReadyList+0xc0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	429a      	cmp	r2, r3
 8006156:	d802      	bhi.n	800615e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006158:	4b1c      	ldr	r3, [pc, #112]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800615e:	4b1d      	ldr	r3, [pc, #116]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006166:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006168:	4b1a      	ldr	r3, [pc, #104]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d903      	bls.n	8006184 <prvAddNewTaskToReadyList+0x74>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	0013      	movs	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	189b      	adds	r3, r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a12      	ldr	r2, [pc, #72]	; (80061dc <prvAddNewTaskToReadyList+0xcc>)
 8006192:	189a      	adds	r2, r3, r2
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	0019      	movs	r1, r3
 800619a:	0010      	movs	r0, r2
 800619c:	f7ff f9e9 	bl	8005572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061a0:	f001 f880 	bl	80072a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <prvAddNewTaskToReadyList+0xc0>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d201      	bcs.n	80061be <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061ba:	f001 f851 	bl	8007260 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b002      	add	sp, #8
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	20002b50 	.word	0x20002b50
 80061cc:	2000267c 	.word	0x2000267c
 80061d0:	20002b5c 	.word	0x20002b5c
 80061d4:	20002b6c 	.word	0x20002b6c
 80061d8:	20002b58 	.word	0x20002b58
 80061dc:	20002680 	.word	0x20002680

080061e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d010      	beq.n	8006214 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <vTaskDelay+0x48>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <vTaskDelay+0x1e>
 80061fa:	b672      	cpsid	i
 80061fc:	e7fe      	b.n	80061fc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80061fe:	f000 f873 	bl	80062e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2100      	movs	r1, #0
 8006206:	0018      	movs	r0, r3
 8006208:	f000 fc7c 	bl	8006b04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800620c:	f000 f878 	bl	8006300 <xTaskResumeAll>
 8006210:	0003      	movs	r3, r0
 8006212:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800621a:	f001 f821 	bl	8007260 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	46bd      	mov	sp, r7
 8006222:	b004      	add	sp, #16
 8006224:	bd80      	pop	{r7, pc}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	20002b78 	.word	0x20002b78

0800622c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800622c:	b590      	push	{r4, r7, lr}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800623a:	003a      	movs	r2, r7
 800623c:	1d39      	adds	r1, r7, #4
 800623e:	2308      	movs	r3, #8
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	0018      	movs	r0, r3
 8006244:	f7ff f93c 	bl	80054c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006248:	683c      	ldr	r4, [r7, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	491e      	ldr	r1, [pc, #120]	; (80062c8 <vTaskStartScheduler+0x9c>)
 8006250:	481e      	ldr	r0, [pc, #120]	; (80062cc <vTaskStartScheduler+0xa0>)
 8006252:	9202      	str	r2, [sp, #8]
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	2300      	movs	r3, #0
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	0022      	movs	r2, r4
 800625e:	f7ff fe30 	bl	8005ec2 <xTaskCreateStatic>
 8006262:	0002      	movs	r2, r0
 8006264:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <vTaskStartScheduler+0xa4>)
 8006266:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006268:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <vTaskStartScheduler+0xa4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006270:	2301      	movs	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e001      	b.n	800627a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d103      	bne.n	8006288 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006280:	f000 fc94 	bl	8006bac <xTimerCreateTimerTask>
 8006284:	0003      	movs	r3, r0
 8006286:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d113      	bne.n	80062b6 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800628e:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <vTaskStartScheduler+0xa8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3354      	adds	r3, #84	; 0x54
 8006296:	001a      	movs	r2, r3
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <vTaskStartScheduler+0xac>)
 800629a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800629c:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <vTaskStartScheduler+0xb0>)
 800629e:	2201      	movs	r2, #1
 80062a0:	4252      	negs	r2, r2
 80062a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <vTaskStartScheduler+0xb4>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062aa:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <vTaskStartScheduler+0xb8>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062b0:	f000 ffb2 	bl	8007218 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062b4:	e004      	b.n	80062c0 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3301      	adds	r3, #1
 80062ba:	d101      	bne.n	80062c0 <vTaskStartScheduler+0x94>
 80062bc:	b672      	cpsid	i
 80062be:	e7fe      	b.n	80062be <vTaskStartScheduler+0x92>
}
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b005      	add	sp, #20
 80062c6:	bd90      	pop	{r4, r7, pc}
 80062c8:	08007968 	.word	0x08007968
 80062cc:	0800686d 	.word	0x0800686d
 80062d0:	20002b74 	.word	0x20002b74
 80062d4:	2000267c 	.word	0x2000267c
 80062d8:	20001c18 	.word	0x20001c18
 80062dc:	20002b70 	.word	0x20002b70
 80062e0:	20002b5c 	.word	0x20002b5c
 80062e4:	20002b54 	.word	0x20002b54

080062e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <vTaskSuspendAll+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	4b02      	ldr	r3, [pc, #8]	; (80062fc <vTaskSuspendAll+0x14>)
 80062f4:	601a      	str	r2, [r3, #0]
}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20002b78 	.word	0x20002b78

08006300 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800630e:	4b3a      	ldr	r3, [pc, #232]	; (80063f8 <xTaskResumeAll+0xf8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <xTaskResumeAll+0x1a>
 8006316:	b672      	cpsid	i
 8006318:	e7fe      	b.n	8006318 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800631a:	f000 ffb1 	bl	8007280 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800631e:	4b36      	ldr	r3, [pc, #216]	; (80063f8 <xTaskResumeAll+0xf8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	1e5a      	subs	r2, r3, #1
 8006324:	4b34      	ldr	r3, [pc, #208]	; (80063f8 <xTaskResumeAll+0xf8>)
 8006326:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006328:	4b33      	ldr	r3, [pc, #204]	; (80063f8 <xTaskResumeAll+0xf8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d15b      	bne.n	80063e8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006330:	4b32      	ldr	r3, [pc, #200]	; (80063fc <xTaskResumeAll+0xfc>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d057      	beq.n	80063e8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006338:	e02f      	b.n	800639a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800633a:	4b31      	ldr	r3, [pc, #196]	; (8006400 <xTaskResumeAll+0x100>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3318      	adds	r3, #24
 8006346:	0018      	movs	r0, r3
 8006348:	f7ff f96b 	bl	8005622 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3304      	adds	r3, #4
 8006350:	0018      	movs	r0, r3
 8006352:	f7ff f966 	bl	8005622 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635a:	4b2a      	ldr	r3, [pc, #168]	; (8006404 <xTaskResumeAll+0x104>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d903      	bls.n	800636a <xTaskResumeAll+0x6a>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006366:	4b27      	ldr	r3, [pc, #156]	; (8006404 <xTaskResumeAll+0x104>)
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636e:	0013      	movs	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	189b      	adds	r3, r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4a24      	ldr	r2, [pc, #144]	; (8006408 <xTaskResumeAll+0x108>)
 8006378:	189a      	adds	r2, r3, r2
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3304      	adds	r3, #4
 800637e:	0019      	movs	r1, r3
 8006380:	0010      	movs	r0, r2
 8006382:	f7ff f8f6 	bl	8005572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638a:	4b20      	ldr	r3, [pc, #128]	; (800640c <xTaskResumeAll+0x10c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	429a      	cmp	r2, r3
 8006392:	d302      	bcc.n	800639a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006394:	4b1e      	ldr	r3, [pc, #120]	; (8006410 <xTaskResumeAll+0x110>)
 8006396:	2201      	movs	r2, #1
 8006398:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800639a:	4b19      	ldr	r3, [pc, #100]	; (8006400 <xTaskResumeAll+0x100>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1cb      	bne.n	800633a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063a8:	f000 fb10 	bl	80069cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063ac:	4b19      	ldr	r3, [pc, #100]	; (8006414 <xTaskResumeAll+0x114>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00f      	beq.n	80063d8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063b8:	f000 f83c 	bl	8006434 <xTaskIncrementTick>
 80063bc:	1e03      	subs	r3, r0, #0
 80063be:	d002      	beq.n	80063c6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80063c0:	4b13      	ldr	r3, [pc, #76]	; (8006410 <xTaskResumeAll+0x110>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f2      	bne.n	80063b8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80063d2:	4b10      	ldr	r3, [pc, #64]	; (8006414 <xTaskResumeAll+0x114>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063d8:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <xTaskResumeAll+0x110>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063e4:	f000 ff3c 	bl	8007260 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063e8:	f000 ff5c 	bl	80072a4 <vPortExitCritical>

	return xAlreadyYielded;
 80063ec:	68bb      	ldr	r3, [r7, #8]
}
 80063ee:	0018      	movs	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b004      	add	sp, #16
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	20002b78 	.word	0x20002b78
 80063fc:	20002b50 	.word	0x20002b50
 8006400:	20002b10 	.word	0x20002b10
 8006404:	20002b58 	.word	0x20002b58
 8006408:	20002680 	.word	0x20002680
 800640c:	2000267c 	.word	0x2000267c
 8006410:	20002b64 	.word	0x20002b64
 8006414:	20002b60 	.word	0x20002b60

08006418 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800641e:	4b04      	ldr	r3, [pc, #16]	; (8006430 <xTaskGetTickCount+0x18>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006424:	687b      	ldr	r3, [r7, #4]
}
 8006426:	0018      	movs	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	b002      	add	sp, #8
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	20002b54 	.word	0x20002b54

08006434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800643e:	4b4c      	ldr	r3, [pc, #304]	; (8006570 <xTaskIncrementTick+0x13c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d000      	beq.n	8006448 <xTaskIncrementTick+0x14>
 8006446:	e083      	b.n	8006550 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006448:	4b4a      	ldr	r3, [pc, #296]	; (8006574 <xTaskIncrementTick+0x140>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006450:	4b48      	ldr	r3, [pc, #288]	; (8006574 <xTaskIncrementTick+0x140>)
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d117      	bne.n	800648c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800645c:	4b46      	ldr	r3, [pc, #280]	; (8006578 <xTaskIncrementTick+0x144>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <xTaskIncrementTick+0x36>
 8006466:	b672      	cpsid	i
 8006468:	e7fe      	b.n	8006468 <xTaskIncrementTick+0x34>
 800646a:	4b43      	ldr	r3, [pc, #268]	; (8006578 <xTaskIncrementTick+0x144>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	4b42      	ldr	r3, [pc, #264]	; (800657c <xTaskIncrementTick+0x148>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b40      	ldr	r3, [pc, #256]	; (8006578 <xTaskIncrementTick+0x144>)
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	4b40      	ldr	r3, [pc, #256]	; (800657c <xTaskIncrementTick+0x148>)
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	4b40      	ldr	r3, [pc, #256]	; (8006580 <xTaskIncrementTick+0x14c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	4b3e      	ldr	r3, [pc, #248]	; (8006580 <xTaskIncrementTick+0x14c>)
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f000 faa0 	bl	80069cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800648c:	4b3d      	ldr	r3, [pc, #244]	; (8006584 <xTaskIncrementTick+0x150>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	429a      	cmp	r2, r3
 8006494:	d34e      	bcc.n	8006534 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006496:	4b38      	ldr	r3, [pc, #224]	; (8006578 <xTaskIncrementTick+0x144>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <xTaskIncrementTick+0x70>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <xTaskIncrementTick+0x72>
 80064a4:	2300      	movs	r3, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064aa:	4b36      	ldr	r3, [pc, #216]	; (8006584 <xTaskIncrementTick+0x150>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	4252      	negs	r2, r2
 80064b0:	601a      	str	r2, [r3, #0]
					break;
 80064b2:	e03f      	b.n	8006534 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064b4:	4b30      	ldr	r3, [pc, #192]	; (8006578 <xTaskIncrementTick+0x144>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d203      	bcs.n	80064d4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064cc:	4b2d      	ldr	r3, [pc, #180]	; (8006584 <xTaskIncrementTick+0x150>)
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
						break;
 80064d2:	e02f      	b.n	8006534 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	3304      	adds	r3, #4
 80064d8:	0018      	movs	r0, r3
 80064da:	f7ff f8a2 	bl	8005622 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	3318      	adds	r3, #24
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7ff f899 	bl	8005622 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	4b24      	ldr	r3, [pc, #144]	; (8006588 <xTaskIncrementTick+0x154>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d903      	bls.n	8006504 <xTaskIncrementTick+0xd0>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006500:	4b21      	ldr	r3, [pc, #132]	; (8006588 <xTaskIncrementTick+0x154>)
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	0013      	movs	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	189b      	adds	r3, r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4a1e      	ldr	r2, [pc, #120]	; (800658c <xTaskIncrementTick+0x158>)
 8006512:	189a      	adds	r2, r3, r2
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	3304      	adds	r3, #4
 8006518:	0019      	movs	r1, r3
 800651a:	0010      	movs	r0, r2
 800651c:	f7ff f829 	bl	8005572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <xTaskIncrementTick+0x15c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	429a      	cmp	r2, r3
 800652c:	d3b3      	bcc.n	8006496 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006532:	e7b0      	b.n	8006496 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006534:	4b16      	ldr	r3, [pc, #88]	; (8006590 <xTaskIncrementTick+0x15c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653a:	4914      	ldr	r1, [pc, #80]	; (800658c <xTaskIncrementTick+0x158>)
 800653c:	0013      	movs	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	189b      	adds	r3, r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	585b      	ldr	r3, [r3, r1]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d907      	bls.n	800655a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800654a:	2301      	movs	r3, #1
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e004      	b.n	800655a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006550:	4b10      	ldr	r3, [pc, #64]	; (8006594 <xTaskIncrementTick+0x160>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <xTaskIncrementTick+0x160>)
 8006558:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800655a:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <xTaskIncrementTick+0x164>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8006562:	2301      	movs	r3, #1
 8006564:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006566:	697b      	ldr	r3, [r7, #20]
}
 8006568:	0018      	movs	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	b006      	add	sp, #24
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20002b78 	.word	0x20002b78
 8006574:	20002b54 	.word	0x20002b54
 8006578:	20002b08 	.word	0x20002b08
 800657c:	20002b0c 	.word	0x20002b0c
 8006580:	20002b68 	.word	0x20002b68
 8006584:	20002b70 	.word	0x20002b70
 8006588:	20002b58 	.word	0x20002b58
 800658c:	20002680 	.word	0x20002680
 8006590:	2000267c 	.word	0x2000267c
 8006594:	20002b60 	.word	0x20002b60
 8006598:	20002b64 	.word	0x20002b64

0800659c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065a2:	4b25      	ldr	r3, [pc, #148]	; (8006638 <vTaskSwitchContext+0x9c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <vTaskSwitchContext+0xa0>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065b0:	e03d      	b.n	800662e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80065b2:	4b22      	ldr	r3, [pc, #136]	; (800663c <vTaskSwitchContext+0xa0>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065b8:	4b21      	ldr	r3, [pc, #132]	; (8006640 <vTaskSwitchContext+0xa4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	e007      	b.n	80065d0 <vTaskSwitchContext+0x34>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <vTaskSwitchContext+0x2e>
 80065c6:	b672      	cpsid	i
 80065c8:	e7fe      	b.n	80065c8 <vTaskSwitchContext+0x2c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	607b      	str	r3, [r7, #4]
 80065d0:	491c      	ldr	r1, [pc, #112]	; (8006644 <vTaskSwitchContext+0xa8>)
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	0013      	movs	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	189b      	adds	r3, r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	585b      	ldr	r3, [r3, r1]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0ee      	beq.n	80065c0 <vTaskSwitchContext+0x24>
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	0013      	movs	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	189b      	adds	r3, r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4a15      	ldr	r2, [pc, #84]	; (8006644 <vTaskSwitchContext+0xa8>)
 80065ee:	189b      	adds	r3, r3, r2
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	605a      	str	r2, [r3, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	3308      	adds	r3, #8
 8006604:	429a      	cmp	r2, r3
 8006606:	d104      	bne.n	8006612 <vTaskSwitchContext+0x76>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <vTaskSwitchContext+0xac>)
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	4b08      	ldr	r3, [pc, #32]	; (8006640 <vTaskSwitchContext+0xa4>)
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <vTaskSwitchContext+0xac>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3354      	adds	r3, #84	; 0x54
 8006628:	001a      	movs	r2, r3
 800662a:	4b08      	ldr	r3, [pc, #32]	; (800664c <vTaskSwitchContext+0xb0>)
 800662c:	601a      	str	r2, [r3, #0]
}
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b002      	add	sp, #8
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	20002b78 	.word	0x20002b78
 800663c:	20002b64 	.word	0x20002b64
 8006640:	20002b58 	.word	0x20002b58
 8006644:	20002680 	.word	0x20002680
 8006648:	2000267c 	.word	0x2000267c
 800664c:	20001c18 	.word	0x20001c18

08006650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <vTaskPlaceOnEventList+0x14>
 8006660:	b672      	cpsid	i
 8006662:	e7fe      	b.n	8006662 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006664:	4b08      	ldr	r3, [pc, #32]	; (8006688 <vTaskPlaceOnEventList+0x38>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3318      	adds	r3, #24
 800666a:	001a      	movs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	0011      	movs	r1, r2
 8006670:	0018      	movs	r0, r3
 8006672:	f7fe ffa0 	bl	80055b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2101      	movs	r1, #1
 800667a:	0018      	movs	r0, r3
 800667c:	f000 fa42 	bl	8006b04 <prvAddCurrentTaskToDelayedList>
}
 8006680:	46c0      	nop			; (mov r8, r8)
 8006682:	46bd      	mov	sp, r7
 8006684:	b002      	add	sp, #8
 8006686:	bd80      	pop	{r7, pc}
 8006688:	2000267c 	.word	0x2000267c

0800668c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <vTaskPlaceOnEventListRestricted+0x16>
 800669e:	b672      	cpsid	i
 80066a0:	e7fe      	b.n	80066a0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066a2:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <vTaskPlaceOnEventListRestricted+0x48>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3318      	adds	r3, #24
 80066a8:	001a      	movs	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	0011      	movs	r1, r2
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7fe ff5f 	bl	8005572 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80066ba:	2301      	movs	r3, #1
 80066bc:	425b      	negs	r3, r3
 80066be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	0011      	movs	r1, r2
 80066c6:	0018      	movs	r0, r3
 80066c8:	f000 fa1c 	bl	8006b04 <prvAddCurrentTaskToDelayedList>
	}
 80066cc:	46c0      	nop			; (mov r8, r8)
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b004      	add	sp, #16
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	2000267c 	.word	0x2000267c

080066d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <xTaskRemoveFromEventList+0x1a>
 80066ee:	b672      	cpsid	i
 80066f0:	e7fe      	b.n	80066f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	3318      	adds	r3, #24
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7fe ff93 	bl	8005622 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <xTaskRemoveFromEventList+0xa0>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11d      	bne.n	8006740 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3304      	adds	r3, #4
 8006708:	0018      	movs	r0, r3
 800670a:	f7fe ff8a 	bl	8005622 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006712:	4b1a      	ldr	r3, [pc, #104]	; (800677c <xTaskRemoveFromEventList+0xa4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d903      	bls.n	8006722 <xTaskRemoveFromEventList+0x4a>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	4b17      	ldr	r3, [pc, #92]	; (800677c <xTaskRemoveFromEventList+0xa4>)
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006726:	0013      	movs	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	189b      	adds	r3, r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4a14      	ldr	r2, [pc, #80]	; (8006780 <xTaskRemoveFromEventList+0xa8>)
 8006730:	189a      	adds	r2, r3, r2
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	3304      	adds	r3, #4
 8006736:	0019      	movs	r1, r3
 8006738:	0010      	movs	r0, r2
 800673a:	f7fe ff1a 	bl	8005572 <vListInsertEnd>
 800673e:	e007      	b.n	8006750 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	3318      	adds	r3, #24
 8006744:	001a      	movs	r2, r3
 8006746:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <xTaskRemoveFromEventList+0xac>)
 8006748:	0011      	movs	r1, r2
 800674a:	0018      	movs	r0, r3
 800674c:	f7fe ff11 	bl	8005572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <xTaskRemoveFromEventList+0xb0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	429a      	cmp	r2, r3
 800675c:	d905      	bls.n	800676a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800675e:	2301      	movs	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <xTaskRemoveFromEventList+0xb4>)
 8006764:	2201      	movs	r2, #1
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	e001      	b.n	800676e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800676e:	68fb      	ldr	r3, [r7, #12]
}
 8006770:	0018      	movs	r0, r3
 8006772:	46bd      	mov	sp, r7
 8006774:	b004      	add	sp, #16
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20002b78 	.word	0x20002b78
 800677c:	20002b58 	.word	0x20002b58
 8006780:	20002680 	.word	0x20002680
 8006784:	20002b10 	.word	0x20002b10
 8006788:	2000267c 	.word	0x2000267c
 800678c:	20002b64 	.word	0x20002b64

08006790 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <vTaskInternalSetTimeOutState+0x20>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <vTaskInternalSetTimeOutState+0x24>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	605a      	str	r2, [r3, #4]
}
 80067a8:	46c0      	nop			; (mov r8, r8)
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b002      	add	sp, #8
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20002b68 	.word	0x20002b68
 80067b4:	20002b54 	.word	0x20002b54

080067b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <xTaskCheckForTimeOut+0x14>
 80067c8:	b672      	cpsid	i
 80067ca:	e7fe      	b.n	80067ca <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <xTaskCheckForTimeOut+0x1e>
 80067d2:	b672      	cpsid	i
 80067d4:	e7fe      	b.n	80067d4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80067d6:	f000 fd53 	bl	8007280 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067da:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <xTaskCheckForTimeOut+0x98>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3301      	adds	r3, #1
 80067f0:	d102      	bne.n	80067f8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	e024      	b.n	8006842 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b15      	ldr	r3, [pc, #84]	; (8006854 <xTaskCheckForTimeOut+0x9c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d007      	beq.n	8006814 <xTaskCheckForTimeOut+0x5c>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800680e:	2301      	movs	r3, #1
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	e016      	b.n	8006842 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	429a      	cmp	r2, r3
 800681c:	d20c      	bcs.n	8006838 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	1ad2      	subs	r2, r2, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0018      	movs	r0, r3
 800682e:	f7ff ffaf 	bl	8006790 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	e004      	b.n	8006842 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800683e:	2301      	movs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006842:	f000 fd2f 	bl	80072a4 <vPortExitCritical>

	return xReturn;
 8006846:	697b      	ldr	r3, [r7, #20]
}
 8006848:	0018      	movs	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	b006      	add	sp, #24
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20002b54 	.word	0x20002b54
 8006854:	20002b68 	.word	0x20002b68

08006858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800685c:	4b02      	ldr	r3, [pc, #8]	; (8006868 <vTaskMissedYield+0x10>)
 800685e:	2201      	movs	r2, #1
 8006860:	601a      	str	r2, [r3, #0]
}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20002b64 	.word	0x20002b64

0800686c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006874:	f000 f84e 	bl	8006914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006878:	4b03      	ldr	r3, [pc, #12]	; (8006888 <prvIdleTask+0x1c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d9f9      	bls.n	8006874 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006880:	f000 fcee 	bl	8007260 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006884:	e7f6      	b.n	8006874 <prvIdleTask+0x8>
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	20002680 	.word	0x20002680

0800688c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	e00c      	b.n	80068b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	0013      	movs	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	189b      	adds	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4a14      	ldr	r2, [pc, #80]	; (80068f4 <prvInitialiseTaskLists+0x68>)
 80068a4:	189b      	adds	r3, r3, r2
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7fe fe3a 	bl	8005520 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3301      	adds	r3, #1
 80068b0:	607b      	str	r3, [r7, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b37      	cmp	r3, #55	; 0x37
 80068b6:	d9ef      	bls.n	8006898 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068b8:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <prvInitialiseTaskLists+0x6c>)
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7fe fe30 	bl	8005520 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068c0:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <prvInitialiseTaskLists+0x70>)
 80068c2:	0018      	movs	r0, r3
 80068c4:	f7fe fe2c 	bl	8005520 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068c8:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <prvInitialiseTaskLists+0x74>)
 80068ca:	0018      	movs	r0, r3
 80068cc:	f7fe fe28 	bl	8005520 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068d0:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <prvInitialiseTaskLists+0x78>)
 80068d2:	0018      	movs	r0, r3
 80068d4:	f7fe fe24 	bl	8005520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068d8:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <prvInitialiseTaskLists+0x7c>)
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fe fe20 	bl	8005520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068e0:	4b0a      	ldr	r3, [pc, #40]	; (800690c <prvInitialiseTaskLists+0x80>)
 80068e2:	4a05      	ldr	r2, [pc, #20]	; (80068f8 <prvInitialiseTaskLists+0x6c>)
 80068e4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068e6:	4b0a      	ldr	r3, [pc, #40]	; (8006910 <prvInitialiseTaskLists+0x84>)
 80068e8:	4a04      	ldr	r2, [pc, #16]	; (80068fc <prvInitialiseTaskLists+0x70>)
 80068ea:	601a      	str	r2, [r3, #0]
}
 80068ec:	46c0      	nop			; (mov r8, r8)
 80068ee:	46bd      	mov	sp, r7
 80068f0:	b002      	add	sp, #8
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20002680 	.word	0x20002680
 80068f8:	20002ae0 	.word	0x20002ae0
 80068fc:	20002af4 	.word	0x20002af4
 8006900:	20002b10 	.word	0x20002b10
 8006904:	20002b24 	.word	0x20002b24
 8006908:	20002b3c 	.word	0x20002b3c
 800690c:	20002b08 	.word	0x20002b08
 8006910:	20002b0c 	.word	0x20002b0c

08006914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800691a:	e01a      	b.n	8006952 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800691c:	f000 fcb0 	bl	8007280 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006920:	4b10      	ldr	r3, [pc, #64]	; (8006964 <prvCheckTasksWaitingTermination+0x50>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3304      	adds	r3, #4
 800692c:	0018      	movs	r0, r3
 800692e:	f7fe fe78 	bl	8005622 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006932:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <prvCheckTasksWaitingTermination+0x54>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	1e5a      	subs	r2, r3, #1
 8006938:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <prvCheckTasksWaitingTermination+0x54>)
 800693a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800693c:	4b0b      	ldr	r3, [pc, #44]	; (800696c <prvCheckTasksWaitingTermination+0x58>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	1e5a      	subs	r2, r3, #1
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <prvCheckTasksWaitingTermination+0x58>)
 8006944:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006946:	f000 fcad 	bl	80072a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	0018      	movs	r0, r3
 800694e:	f000 f80f 	bl	8006970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006952:	4b06      	ldr	r3, [pc, #24]	; (800696c <prvCheckTasksWaitingTermination+0x58>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e0      	bne.n	800691c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800695a:	46c0      	nop			; (mov r8, r8)
 800695c:	46c0      	nop			; (mov r8, r8)
 800695e:	46bd      	mov	sp, r7
 8006960:	b002      	add	sp, #8
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20002b24 	.word	0x20002b24
 8006968:	20002b50 	.word	0x20002b50
 800696c:	20002b38 	.word	0x20002b38

08006970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3354      	adds	r3, #84	; 0x54
 800697c:	0018      	movs	r0, r3
 800697e:	f000 ff01 	bl	8007784 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	22b9      	movs	r2, #185	; 0xb9
 8006986:	5c9b      	ldrb	r3, [r3, r2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006990:	0018      	movs	r0, r3
 8006992:	f000 fdb3 	bl	80074fc <vPortFree>
				vPortFree( pxTCB );
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0018      	movs	r0, r3
 800699a:	f000 fdaf 	bl	80074fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800699e:	e010      	b.n	80069c2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	22b9      	movs	r2, #185	; 0xb9
 80069a4:	5c9b      	ldrb	r3, [r3, r2]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d104      	bne.n	80069b4 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 fda5 	bl	80074fc <vPortFree>
	}
 80069b2:	e006      	b.n	80069c2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	22b9      	movs	r2, #185	; 0xb9
 80069b8:	5c9b      	ldrb	r3, [r3, r2]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d001      	beq.n	80069c2 <prvDeleteTCB+0x52>
 80069be:	b672      	cpsid	i
 80069c0:	e7fe      	b.n	80069c0 <prvDeleteTCB+0x50>
	}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b002      	add	sp, #8
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d2:	4b0e      	ldr	r3, [pc, #56]	; (8006a0c <prvResetNextTaskUnblockTime+0x40>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <prvResetNextTaskUnblockTime+0x14>
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <prvResetNextTaskUnblockTime+0x16>
 80069e0:	2300      	movs	r3, #0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <prvResetNextTaskUnblockTime+0x44>)
 80069e8:	2201      	movs	r2, #1
 80069ea:	4252      	negs	r2, r2
 80069ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069ee:	e008      	b.n	8006a02 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <prvResetNextTaskUnblockTime+0x40>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <prvResetNextTaskUnblockTime+0x44>)
 8006a00:	601a      	str	r2, [r3, #0]
}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b002      	add	sp, #8
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	20002b08 	.word	0x20002b08
 8006a10:	20002b70 	.word	0x20002b70

08006a14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <xTaskGetSchedulerState+0x30>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d102      	bne.n	8006a28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a22:	2301      	movs	r3, #1
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	e008      	b.n	8006a3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a28:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <xTaskGetSchedulerState+0x34>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a30:	2302      	movs	r3, #2
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	e001      	b.n	8006a3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a36:	2300      	movs	r3, #0
 8006a38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a3a:	687b      	ldr	r3, [r7, #4]
	}
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	b002      	add	sp, #8
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20002b5c 	.word	0x20002b5c
 8006a48:	20002b78 	.word	0x20002b78

08006a4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d044      	beq.n	8006aec <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a62:	4b25      	ldr	r3, [pc, #148]	; (8006af8 <xTaskPriorityDisinherit+0xac>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d001      	beq.n	8006a70 <xTaskPriorityDisinherit+0x24>
 8006a6c:	b672      	cpsid	i
 8006a6e:	e7fe      	b.n	8006a6e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <xTaskPriorityDisinherit+0x30>
 8006a78:	b672      	cpsid	i
 8006a7a:	e7fe      	b.n	8006a7a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a80:	1e5a      	subs	r2, r3, #1
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d02c      	beq.n	8006aec <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d128      	bne.n	8006aec <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f7fe fdbf 	bl	8005622 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	2238      	movs	r2, #56	; 0x38
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <xTaskPriorityDisinherit+0xb0>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d903      	bls.n	8006acc <xTaskPriorityDisinherit+0x80>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <xTaskPriorityDisinherit+0xb0>)
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad0:	0013      	movs	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	189b      	adds	r3, r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <xTaskPriorityDisinherit+0xb4>)
 8006ada:	189a      	adds	r2, r3, r2
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	0019      	movs	r1, r3
 8006ae2:	0010      	movs	r0, r2
 8006ae4:	f7fe fd45 	bl	8005572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006aec:	68fb      	ldr	r3, [r7, #12]
	}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b004      	add	sp, #16
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	46c0      	nop			; (mov r8, r8)
 8006af8:	2000267c 	.word	0x2000267c
 8006afc:	20002b58 	.word	0x20002b58
 8006b00:	20002680 	.word	0x20002680

08006b04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b0e:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b14:	4b20      	ldr	r3, [pc, #128]	; (8006b98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7fe fd81 	bl	8005622 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3301      	adds	r3, #1
 8006b24:	d10b      	bne.n	8006b3e <prvAddCurrentTaskToDelayedList+0x3a>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d008      	beq.n	8006b3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b2c:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <prvAddCurrentTaskToDelayedList+0x98>)
 8006b34:	0011      	movs	r1, r2
 8006b36:	0018      	movs	r0, r3
 8006b38:	f7fe fd1b 	bl	8005572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b3c:	e026      	b.n	8006b8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	18d3      	adds	r3, r2, r3
 8006b44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b46:	4b14      	ldr	r3, [pc, #80]	; (8006b98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d209      	bcs.n	8006b6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b56:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	0019      	movs	r1, r3
 8006b62:	0010      	movs	r0, r2
 8006b64:	f7fe fd27 	bl	80055b6 <vListInsert>
}
 8006b68:	e010      	b.n	8006b8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3304      	adds	r3, #4
 8006b74:	0019      	movs	r1, r3
 8006b76:	0010      	movs	r0, r2
 8006b78:	f7fe fd1d 	bl	80055b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d202      	bcs.n	8006b8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	601a      	str	r2, [r3, #0]
}
 8006b8c:	46c0      	nop			; (mov r8, r8)
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b004      	add	sp, #16
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20002b54 	.word	0x20002b54
 8006b98:	2000267c 	.word	0x2000267c
 8006b9c:	20002b3c 	.word	0x20002b3c
 8006ba0:	20002b0c 	.word	0x20002b0c
 8006ba4:	20002b08 	.word	0x20002b08
 8006ba8:	20002b70 	.word	0x20002b70

08006bac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b089      	sub	sp, #36	; 0x24
 8006bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bb6:	f000 fa87 	bl	80070c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bba:	4b17      	ldr	r3, [pc, #92]	; (8006c18 <xTimerCreateTimerTask+0x6c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d020      	beq.n	8006c04 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bca:	003a      	movs	r2, r7
 8006bcc:	1d39      	adds	r1, r7, #4
 8006bce:	2308      	movs	r3, #8
 8006bd0:	18fb      	adds	r3, r7, r3
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f7fe fc8c 	bl	80054f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bd8:	683c      	ldr	r4, [r7, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	490f      	ldr	r1, [pc, #60]	; (8006c1c <xTimerCreateTimerTask+0x70>)
 8006be0:	480f      	ldr	r0, [pc, #60]	; (8006c20 <xTimerCreateTimerTask+0x74>)
 8006be2:	9202      	str	r2, [sp, #8]
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	2306      	movs	r3, #6
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	2300      	movs	r3, #0
 8006bec:	0022      	movs	r2, r4
 8006bee:	f7ff f968 	bl	8005ec2 <xTaskCreateStatic>
 8006bf2:	0002      	movs	r2, r0
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <xTimerCreateTimerTask+0x78>)
 8006bf6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <xTimerCreateTimerTask+0x78>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <xTimerCreateTimerTask+0x62>
 8006c0a:	b672      	cpsid	i
 8006c0c:	e7fe      	b.n	8006c0c <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
}
 8006c10:	0018      	movs	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	b005      	add	sp, #20
 8006c16:	bd90      	pop	{r4, r7, pc}
 8006c18:	20002bac 	.word	0x20002bac
 8006c1c:	08007970 	.word	0x08007970
 8006c20:	08006d2d 	.word	0x08006d2d
 8006c24:	20002bb0 	.word	0x20002bb0

08006c28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b08b      	sub	sp, #44	; 0x2c
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <xTimerGenericCommand+0x1c>
 8006c40:	b672      	cpsid	i
 8006c42:	e7fe      	b.n	8006c42 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c44:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <xTimerGenericCommand+0x90>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d030      	beq.n	8006cae <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c4c:	2414      	movs	r4, #20
 8006c4e:	193b      	adds	r3, r7, r4
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c54:	193b      	adds	r3, r7, r4
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c5a:	193b      	adds	r3, r7, r4
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b05      	cmp	r3, #5
 8006c64:	dc19      	bgt.n	8006c9a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c66:	f7ff fed5 	bl	8006a14 <xTaskGetSchedulerState>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d109      	bne.n	8006c84 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c70:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <xTimerGenericCommand+0x90>)
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c76:	1939      	adds	r1, r7, r4
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f7fe fdc0 	bl	80057fe <xQueueGenericSend>
 8006c7e:	0003      	movs	r3, r0
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
 8006c82:	e014      	b.n	8006cae <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <xTimerGenericCommand+0x90>)
 8006c86:	6818      	ldr	r0, [r3, #0]
 8006c88:	2314      	movs	r3, #20
 8006c8a:	18f9      	adds	r1, r7, r3
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f7fe fdb5 	bl	80057fe <xQueueGenericSend>
 8006c94:	0003      	movs	r3, r0
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
 8006c98:	e009      	b.n	8006cae <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <xTimerGenericCommand+0x90>)
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	2314      	movs	r3, #20
 8006ca2:	18f9      	adds	r1, r7, r3
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f7fe fe6e 	bl	8005986 <xQueueGenericSendFromISR>
 8006caa:	0003      	movs	r3, r0
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	b00b      	add	sp, #44	; 0x2c
 8006cb6:	bd90      	pop	{r4, r7, pc}
 8006cb8:	20002bac 	.word	0x20002bac

08006cbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cc6:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <prvProcessExpiredTimer+0x6c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f7fe fca4 	bl	8005622 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d119      	bne.n	8006d16 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	18d1      	adds	r1, r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f8b6 	bl	8006e60 <prvInsertTimerInActiveList>
 8006cf4:	1e03      	subs	r3, r0, #0
 8006cf6:	d00e      	beq.n	8006d16 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	2300      	movs	r3, #0
 8006d02:	2100      	movs	r1, #0
 8006d04:	f7ff ff90 	bl	8006c28 <xTimerGenericCommand>
 8006d08:	0003      	movs	r3, r0
 8006d0a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <prvProcessExpiredTimer+0x5a>
 8006d12:	b672      	cpsid	i
 8006d14:	e7fe      	b.n	8006d14 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	0010      	movs	r0, r2
 8006d1e:	4798      	blx	r3
}
 8006d20:	46c0      	nop			; (mov r8, r8)
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b004      	add	sp, #16
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20002ba4 	.word	0x20002ba4

08006d2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d34:	2308      	movs	r3, #8
 8006d36:	18fb      	adds	r3, r7, r3
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f000 f851 	bl	8006de0 <prvGetNextExpireTime>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	0011      	movs	r1, r2
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f000 f803 	bl	8006d54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d4e:	f000 f8c9 	bl	8006ee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d52:	e7ef      	b.n	8006d34 <prvTimerTask+0x8>

08006d54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d5e:	f7ff fac3 	bl	80062e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d62:	2308      	movs	r3, #8
 8006d64:	18fb      	adds	r3, r7, r3
 8006d66:	0018      	movs	r0, r3
 8006d68:	f000 f85a 	bl	8006e20 <prvSampleTimeNow>
 8006d6c:	0003      	movs	r3, r0
 8006d6e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d129      	bne.n	8006dca <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10c      	bne.n	8006d96 <prvProcessTimerOrBlockTask+0x42>
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d808      	bhi.n	8006d96 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006d84:	f7ff fabc 	bl	8006300 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0011      	movs	r1, r2
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7ff ff94 	bl	8006cbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d94:	e01b      	b.n	8006dce <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <prvProcessTimerOrBlockTask+0x84>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	425a      	negs	r2, r3
 8006da4:	4153      	adcs	r3, r2
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006daa:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <prvProcessTimerOrBlockTask+0x88>)
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	0019      	movs	r1, r3
 8006db8:	f7ff f850 	bl	8005e5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dbc:	f7ff faa0 	bl	8006300 <xTaskResumeAll>
 8006dc0:	1e03      	subs	r3, r0, #0
 8006dc2:	d104      	bne.n	8006dce <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8006dc4:	f000 fa4c 	bl	8007260 <vPortYield>
}
 8006dc8:	e001      	b.n	8006dce <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006dca:	f7ff fa99 	bl	8006300 <xTaskResumeAll>
}
 8006dce:	46c0      	nop			; (mov r8, r8)
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	b004      	add	sp, #16
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	20002ba8 	.word	0x20002ba8
 8006ddc:	20002bac 	.word	0x20002bac

08006de0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <prvGetNextExpireTime+0x3c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	425a      	negs	r2, r3
 8006df0:	4153      	adcs	r3, r2
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	001a      	movs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <prvGetNextExpireTime+0x3c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	e001      	b.n	8006e12 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e12:	68fb      	ldr	r3, [r7, #12]
}
 8006e14:	0018      	movs	r0, r3
 8006e16:	46bd      	mov	sp, r7
 8006e18:	b004      	add	sp, #16
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20002ba4 	.word	0x20002ba4

08006e20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e28:	f7ff faf6 	bl	8006418 <xTaskGetTickCount>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e30:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <prvSampleTimeNow+0x3c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d205      	bcs.n	8006e46 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006e3a:	f000 f8eb 	bl	8007014 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e002      	b.n	8006e4c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e4c:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <prvSampleTimeNow+0x3c>)
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006e52:	68fb      	ldr	r3, [r7, #12]
}
 8006e54:	0018      	movs	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b004      	add	sp, #16
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20002bb4 	.word	0x20002bb4

08006e60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d812      	bhi.n	8006eac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	1ad2      	subs	r2, r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d302      	bcc.n	8006e9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	e01b      	b.n	8006ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <prvInsertTimerInActiveList+0x7c>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	0019      	movs	r1, r3
 8006ea4:	0010      	movs	r0, r2
 8006ea6:	f7fe fb86 	bl	80055b6 <vListInsert>
 8006eaa:	e012      	b.n	8006ed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d206      	bcs.n	8006ec2 <prvInsertTimerInActiveList+0x62>
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d302      	bcc.n	8006ec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	e007      	b.n	8006ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <prvInsertTimerInActiveList+0x80>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	0019      	movs	r1, r3
 8006ecc:	0010      	movs	r0, r2
 8006ece:	f7fe fb72 	bl	80055b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ed2:	697b      	ldr	r3, [r7, #20]
}
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b006      	add	sp, #24
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20002ba8 	.word	0x20002ba8
 8006ee0:	20002ba4 	.word	0x20002ba4

08006ee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ee4:	b590      	push	{r4, r7, lr}
 8006ee6:	b08d      	sub	sp, #52	; 0x34
 8006ee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eea:	e07f      	b.n	8006fec <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006eec:	2208      	movs	r2, #8
 8006eee:	18bb      	adds	r3, r7, r2
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da0f      	bge.n	8006f16 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ef6:	18bb      	adds	r3, r7, r2
 8006ef8:	3304      	adds	r3, #4
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <prvProcessReceivedCommands+0x22>
 8006f02:	b672      	cpsid	i
 8006f04:	e7fe      	b.n	8006f04 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	6858      	ldr	r0, [r3, #4]
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0019      	movs	r1, r3
 8006f14:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f16:	2208      	movs	r2, #8
 8006f18:	18bb      	adds	r3, r7, r2
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	db64      	blt.n	8006fea <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f20:	18bb      	adds	r3, r7, r2
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d004      	beq.n	8006f38 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	3304      	adds	r3, #4
 8006f32:	0018      	movs	r0, r3
 8006f34:	f7fe fb75 	bl	8005622 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f38:	1d3b      	adds	r3, r7, #4
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7ff ff70 	bl	8006e20 <prvSampleTimeNow>
 8006f40:	0003      	movs	r3, r0
 8006f42:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006f44:	2308      	movs	r3, #8
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d84e      	bhi.n	8006fec <prvProcessReceivedCommands+0x108>
 8006f4e:	009a      	lsls	r2, r3, #2
 8006f50:	4b2e      	ldr	r3, [pc, #184]	; (800700c <prvProcessReceivedCommands+0x128>)
 8006f52:	18d3      	adds	r3, r2, r3
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f58:	2408      	movs	r4, #8
 8006f5a:	193b      	adds	r3, r7, r4
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	18d1      	adds	r1, r2, r3
 8006f64:	193b      	adds	r3, r7, r4
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	6a38      	ldr	r0, [r7, #32]
 8006f6c:	f7ff ff78 	bl	8006e60 <prvInsertTimerInActiveList>
 8006f70:	1e03      	subs	r3, r0, #0
 8006f72:	d03b      	beq.n	8006fec <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	6a3a      	ldr	r2, [r7, #32]
 8006f7a:	0010      	movs	r0, r2
 8006f7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d132      	bne.n	8006fec <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f86:	193b      	adds	r3, r7, r4
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	18d2      	adds	r2, r2, r3
 8006f90:	6a38      	ldr	r0, [r7, #32]
 8006f92:	2300      	movs	r3, #0
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	2300      	movs	r3, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	f7ff fe45 	bl	8006c28 <xTimerGenericCommand>
 8006f9e:	0003      	movs	r3, r0
 8006fa0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d121      	bne.n	8006fec <prvProcessReceivedCommands+0x108>
 8006fa8:	b672      	cpsid	i
 8006faa:	e7fe      	b.n	8006faa <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fac:	2308      	movs	r3, #8
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <prvProcessReceivedCommands+0xde>
 8006fbe:	b672      	cpsid	i
 8006fc0:	e7fe      	b.n	8006fc0 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	699a      	ldr	r2, [r3, #24]
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	18d1      	adds	r1, r2, r3
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	6a38      	ldr	r0, [r7, #32]
 8006fd0:	f7ff ff46 	bl	8006e60 <prvInsertTimerInActiveList>
					break;
 8006fd4:	e00a      	b.n	8006fec <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	222c      	movs	r2, #44	; 0x2c
 8006fda:	5c9b      	ldrb	r3, [r3, r2]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f000 fa8a 	bl	80074fc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fe8:	e000      	b.n	8006fec <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006fea:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fec:	4b08      	ldr	r3, [pc, #32]	; (8007010 <prvProcessReceivedCommands+0x12c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	18b9      	adds	r1, r7, r2
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f7fe fd36 	bl	8005a68 <xQueueReceive>
 8006ffc:	1e03      	subs	r3, r0, #0
 8006ffe:	d000      	beq.n	8007002 <prvProcessReceivedCommands+0x11e>
 8007000:	e774      	b.n	8006eec <prvProcessReceivedCommands+0x8>
	}
}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	46c0      	nop			; (mov r8, r8)
 8007006:	46bd      	mov	sp, r7
 8007008:	b00b      	add	sp, #44	; 0x2c
 800700a:	bd90      	pop	{r4, r7, pc}
 800700c:	08007a04 	.word	0x08007a04
 8007010:	20002bac 	.word	0x20002bac

08007014 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800701a:	e03e      	b.n	800709a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800701c:	4b28      	ldr	r3, [pc, #160]	; (80070c0 <prvSwitchTimerLists+0xac>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007026:	4b26      	ldr	r3, [pc, #152]	; (80070c0 <prvSwitchTimerLists+0xac>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3304      	adds	r3, #4
 8007034:	0018      	movs	r0, r3
 8007036:	f7fe faf4 	bl	8005622 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	0010      	movs	r0, r2
 8007042:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d126      	bne.n	800709a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	18d3      	adds	r3, r2, r3
 8007054:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	429a      	cmp	r2, r3
 800705c:	d90e      	bls.n	800707c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800706a:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <prvSwitchTimerLists+0xac>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3304      	adds	r3, #4
 8007072:	0019      	movs	r1, r3
 8007074:	0010      	movs	r0, r2
 8007076:	f7fe fa9e 	bl	80055b6 <vListInsert>
 800707a:	e00e      	b.n	800709a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	2300      	movs	r3, #0
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	2300      	movs	r3, #0
 8007086:	2100      	movs	r1, #0
 8007088:	f7ff fdce 	bl	8006c28 <xTimerGenericCommand>
 800708c:	0003      	movs	r3, r0
 800708e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <prvSwitchTimerLists+0x86>
 8007096:	b672      	cpsid	i
 8007098:	e7fe      	b.n	8007098 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <prvSwitchTimerLists+0xac>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1bb      	bne.n	800701c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <prvSwitchTimerLists+0xac>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070aa:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <prvSwitchTimerLists+0xb0>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <prvSwitchTimerLists+0xac>)
 80070b0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80070b2:	4b04      	ldr	r3, [pc, #16]	; (80070c4 <prvSwitchTimerLists+0xb0>)
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	601a      	str	r2, [r3, #0]
}
 80070b8:	46c0      	nop			; (mov r8, r8)
 80070ba:	46bd      	mov	sp, r7
 80070bc:	b006      	add	sp, #24
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20002ba4 	.word	0x20002ba4
 80070c4:	20002ba8 	.word	0x20002ba8

080070c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070ce:	f000 f8d7 	bl	8007280 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070d2:	4b16      	ldr	r3, [pc, #88]	; (800712c <prvCheckForValidListAndQueue+0x64>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d123      	bne.n	8007122 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <prvCheckForValidListAndQueue+0x68>)
 80070dc:	0018      	movs	r0, r3
 80070de:	f7fe fa1f 	bl	8005520 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070e2:	4b14      	ldr	r3, [pc, #80]	; (8007134 <prvCheckForValidListAndQueue+0x6c>)
 80070e4:	0018      	movs	r0, r3
 80070e6:	f7fe fa1b 	bl	8005520 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070ea:	4b13      	ldr	r3, [pc, #76]	; (8007138 <prvCheckForValidListAndQueue+0x70>)
 80070ec:	4a10      	ldr	r2, [pc, #64]	; (8007130 <prvCheckForValidListAndQueue+0x68>)
 80070ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070f0:	4b12      	ldr	r3, [pc, #72]	; (800713c <prvCheckForValidListAndQueue+0x74>)
 80070f2:	4a10      	ldr	r2, [pc, #64]	; (8007134 <prvCheckForValidListAndQueue+0x6c>)
 80070f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070f6:	4b12      	ldr	r3, [pc, #72]	; (8007140 <prvCheckForValidListAndQueue+0x78>)
 80070f8:	4a12      	ldr	r2, [pc, #72]	; (8007144 <prvCheckForValidListAndQueue+0x7c>)
 80070fa:	2100      	movs	r1, #0
 80070fc:	9100      	str	r1, [sp, #0]
 80070fe:	2110      	movs	r1, #16
 8007100:	200a      	movs	r0, #10
 8007102:	f7fe fb0a 	bl	800571a <xQueueGenericCreateStatic>
 8007106:	0002      	movs	r2, r0
 8007108:	4b08      	ldr	r3, [pc, #32]	; (800712c <prvCheckForValidListAndQueue+0x64>)
 800710a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800710c:	4b07      	ldr	r3, [pc, #28]	; (800712c <prvCheckForValidListAndQueue+0x64>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007114:	4b05      	ldr	r3, [pc, #20]	; (800712c <prvCheckForValidListAndQueue+0x64>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a0b      	ldr	r2, [pc, #44]	; (8007148 <prvCheckForValidListAndQueue+0x80>)
 800711a:	0011      	movs	r1, r2
 800711c:	0018      	movs	r0, r3
 800711e:	f7fe fe75 	bl	8005e0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007122:	f000 f8bf 	bl	80072a4 <vPortExitCritical>
}
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20002bac 	.word	0x20002bac
 8007130:	20002b7c 	.word	0x20002b7c
 8007134:	20002b90 	.word	0x20002b90
 8007138:	20002ba4 	.word	0x20002ba4
 800713c:	20002ba8 	.word	0x20002ba8
 8007140:	20002c58 	.word	0x20002c58
 8007144:	20002bb8 	.word	0x20002bb8
 8007148:	08007978 	.word	0x08007978

0800714c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3b04      	subs	r3, #4
 800715c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2280      	movs	r2, #128	; 0x80
 8007162:	0452      	lsls	r2, r2, #17
 8007164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b04      	subs	r3, #4
 800716a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3b04      	subs	r3, #4
 8007176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007178:	4a08      	ldr	r2, [pc, #32]	; (800719c <pxPortInitialiseStack+0x50>)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3b14      	subs	r3, #20
 8007182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3b20      	subs	r3, #32
 800718e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007190:	68fb      	ldr	r3, [r7, #12]
}
 8007192:	0018      	movs	r0, r3
 8007194:	46bd      	mov	sp, r7
 8007196:	b004      	add	sp, #16
 8007198:	bd80      	pop	{r7, pc}
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	080071a1 	.word	0x080071a1

080071a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071aa:	4b08      	ldr	r3, [pc, #32]	; (80071cc <prvTaskExitError+0x2c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3301      	adds	r3, #1
 80071b0:	d001      	beq.n	80071b6 <prvTaskExitError+0x16>
 80071b2:	b672      	cpsid	i
 80071b4:	e7fe      	b.n	80071b4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80071b6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80071b8:	46c0      	nop			; (mov r8, r8)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0fc      	beq.n	80071ba <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071c0:	46c0      	nop			; (mov r8, r8)
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b002      	add	sp, #8
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	20001c14 	.word	0x20001c14

080071d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	0000      	movs	r0, r0
 80071dc:	0000      	movs	r0, r0
	...

080071e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80071e0:	4a0b      	ldr	r2, [pc, #44]	; (8007210 <pxCurrentTCBConst2>)
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	3020      	adds	r0, #32
 80071e8:	f380 8809 	msr	PSP, r0
 80071ec:	2002      	movs	r0, #2
 80071ee:	f380 8814 	msr	CONTROL, r0
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80071f8:	46ae      	mov	lr, r5
 80071fa:	bc08      	pop	{r3}
 80071fc:	bc04      	pop	{r2}
 80071fe:	b662      	cpsie	i
 8007200:	4718      	bx	r3
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	46c0      	nop			; (mov r8, r8)
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	46c0      	nop			; (mov r8, r8)
 800720e:	46c0      	nop			; (mov r8, r8)

08007210 <pxCurrentTCBConst2>:
 8007210:	2000267c 	.word	0x2000267c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007214:	46c0      	nop			; (mov r8, r8)
 8007216:	46c0      	nop			; (mov r8, r8)

08007218 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800721c:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <xPortStartScheduler+0x40>)
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <xPortStartScheduler+0x40>)
 8007222:	21ff      	movs	r1, #255	; 0xff
 8007224:	0409      	lsls	r1, r1, #16
 8007226:	430a      	orrs	r2, r1
 8007228:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800722a:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <xPortStartScheduler+0x40>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <xPortStartScheduler+0x40>)
 8007230:	21ff      	movs	r1, #255	; 0xff
 8007232:	0609      	lsls	r1, r1, #24
 8007234:	430a      	orrs	r2, r1
 8007236:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007238:	f000 f898 	bl	800736c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800723c:	4b07      	ldr	r3, [pc, #28]	; (800725c <xPortStartScheduler+0x44>)
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007242:	f7ff ffcd 	bl	80071e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007246:	f7ff f9a9 	bl	800659c <vTaskSwitchContext>
	prvTaskExitError();
 800724a:	f7ff ffa9 	bl	80071a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800724e:	2300      	movs	r3, #0
}
 8007250:	0018      	movs	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	e000ed20 	.word	0xe000ed20
 800725c:	20001c14 	.word	0x20001c14

08007260 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007264:	4b05      	ldr	r3, [pc, #20]	; (800727c <vPortYield+0x1c>)
 8007266:	2280      	movs	r2, #128	; 0x80
 8007268:	0552      	lsls	r2, r2, #21
 800726a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800726c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007270:	f3bf 8f6f 	isb	sy
}
 8007274:	46c0      	nop			; (mov r8, r8)
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	46c0      	nop			; (mov r8, r8)
 800727c:	e000ed04 	.word	0xe000ed04

08007280 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007284:	b672      	cpsid	i
    uxCriticalNesting++;
 8007286:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <vPortEnterCritical+0x20>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <vPortEnterCritical+0x20>)
 800728e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007290:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007294:	f3bf 8f6f 	isb	sy
}
 8007298:	46c0      	nop			; (mov r8, r8)
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	20001c14 	.word	0x20001c14

080072a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <vPortExitCritical+0x2c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <vPortExitCritical+0x10>
 80072b0:	b672      	cpsid	i
 80072b2:	e7fe      	b.n	80072b2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <vPortExitCritical+0x2c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	1e5a      	subs	r2, r3, #1
 80072ba:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <vPortExitCritical+0x2c>)
 80072bc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80072be:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <vPortExitCritical+0x2c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d100      	bne.n	80072c8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80072c6:	b662      	cpsie	i
    }
}
 80072c8:	46c0      	nop			; (mov r8, r8)
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	20001c14 	.word	0x20001c14

080072d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80072d4:	f3ef 8010 	mrs	r0, PRIMASK
 80072d8:	b672      	cpsid	i
 80072da:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80072dc:	46c0      	nop			; (mov r8, r8)
 80072de:	0018      	movs	r0, r3

080072e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80072e0:	f380 8810 	msr	PRIMASK, r0
 80072e4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80072e6:	46c0      	nop			; (mov r8, r8)
	...

080072f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072f0:	f3ef 8009 	mrs	r0, PSP
 80072f4:	4b0e      	ldr	r3, [pc, #56]	; (8007330 <pxCurrentTCBConst>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	3820      	subs	r0, #32
 80072fa:	6010      	str	r0, [r2, #0]
 80072fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80072fe:	4644      	mov	r4, r8
 8007300:	464d      	mov	r5, r9
 8007302:	4656      	mov	r6, sl
 8007304:	465f      	mov	r7, fp
 8007306:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007308:	b508      	push	{r3, lr}
 800730a:	b672      	cpsid	i
 800730c:	f7ff f946 	bl	800659c <vTaskSwitchContext>
 8007310:	b662      	cpsie	i
 8007312:	bc0c      	pop	{r2, r3}
 8007314:	6811      	ldr	r1, [r2, #0]
 8007316:	6808      	ldr	r0, [r1, #0]
 8007318:	3010      	adds	r0, #16
 800731a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800731c:	46a0      	mov	r8, r4
 800731e:	46a9      	mov	r9, r5
 8007320:	46b2      	mov	sl, r6
 8007322:	46bb      	mov	fp, r7
 8007324:	f380 8809 	msr	PSP, r0
 8007328:	3820      	subs	r0, #32
 800732a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800732c:	4718      	bx	r3
 800732e:	46c0      	nop			; (mov r8, r8)

08007330 <pxCurrentTCBConst>:
 8007330:	2000267c 	.word	0x2000267c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007334:	46c0      	nop			; (mov r8, r8)
 8007336:	46c0      	nop			; (mov r8, r8)

08007338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800733e:	f7ff ffc9 	bl	80072d4 <ulSetInterruptMaskFromISR>
 8007342:	0003      	movs	r3, r0
 8007344:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007346:	f7ff f875 	bl	8006434 <xTaskIncrementTick>
 800734a:	1e03      	subs	r3, r0, #0
 800734c:	d003      	beq.n	8007356 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <xPortSysTickHandler+0x30>)
 8007350:	2280      	movs	r2, #128	; 0x80
 8007352:	0552      	lsls	r2, r2, #21
 8007354:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff ffc1 	bl	80072e0 <vClearInterruptMaskFromISR>
}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	46bd      	mov	sp, r7
 8007362:	b002      	add	sp, #8
 8007364:	bd80      	pop	{r7, pc}
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007370:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <prvSetupTimerInterrupt+0x34>)
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <prvSetupTimerInterrupt+0x38>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <prvSetupTimerInterrupt+0x3c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	22fa      	movs	r2, #250	; 0xfa
 8007382:	0091      	lsls	r1, r2, #2
 8007384:	0018      	movs	r0, r3
 8007386:	f7f8 febf 	bl	8000108 <__udivsi3>
 800738a:	0003      	movs	r3, r0
 800738c:	001a      	movs	r2, r3
 800738e:	4b07      	ldr	r3, [pc, #28]	; (80073ac <prvSetupTimerInterrupt+0x40>)
 8007390:	3a01      	subs	r2, #1
 8007392:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007394:	4b02      	ldr	r3, [pc, #8]	; (80073a0 <prvSetupTimerInterrupt+0x34>)
 8007396:	2207      	movs	r2, #7
 8007398:	601a      	str	r2, [r3, #0]
}
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	e000e010 	.word	0xe000e010
 80073a4:	e000e018 	.word	0xe000e018
 80073a8:	20001c08 	.word	0x20001c08
 80073ac:	e000e014 	.word	0xe000e014

080073b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80073bc:	f7fe ff94 	bl	80062e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073c0:	4b49      	ldr	r3, [pc, #292]	; (80074e8 <pvPortMalloc+0x138>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073c8:	f000 f8e0 	bl	800758c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073cc:	4b47      	ldr	r3, [pc, #284]	; (80074ec <pvPortMalloc+0x13c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	4013      	ands	r3, r2
 80073d4:	d000      	beq.n	80073d8 <pvPortMalloc+0x28>
 80073d6:	e079      	b.n	80074cc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d012      	beq.n	8007404 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80073de:	2208      	movs	r2, #8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2207      	movs	r2, #7
 80073ea:	4013      	ands	r3, r2
 80073ec:	d00a      	beq.n	8007404 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2207      	movs	r2, #7
 80073f2:	4393      	bics	r3, r2
 80073f4:	3308      	adds	r3, #8
 80073f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2207      	movs	r2, #7
 80073fc:	4013      	ands	r3, r2
 80073fe:	d001      	beq.n	8007404 <pvPortMalloc+0x54>
 8007400:	b672      	cpsid	i
 8007402:	e7fe      	b.n	8007402 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d060      	beq.n	80074cc <pvPortMalloc+0x11c>
 800740a:	4b39      	ldr	r3, [pc, #228]	; (80074f0 <pvPortMalloc+0x140>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d85b      	bhi.n	80074cc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007414:	4b37      	ldr	r3, [pc, #220]	; (80074f4 <pvPortMalloc+0x144>)
 8007416:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007418:	4b36      	ldr	r3, [pc, #216]	; (80074f4 <pvPortMalloc+0x144>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800741e:	e004      	b.n	800742a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d903      	bls.n	800743c <pvPortMalloc+0x8c>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f1      	bne.n	8007420 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800743c:	4b2a      	ldr	r3, [pc, #168]	; (80074e8 <pvPortMalloc+0x138>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	429a      	cmp	r2, r3
 8007444:	d042      	beq.n	80074cc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2208      	movs	r2, #8
 800744c:	189b      	adds	r3, r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	2308      	movs	r3, #8
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	429a      	cmp	r2, r3
 8007466:	d916      	bls.n	8007496 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	18d3      	adds	r3, r2, r3
 800746e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2207      	movs	r2, #7
 8007474:	4013      	ands	r3, r2
 8007476:	d001      	beq.n	800747c <pvPortMalloc+0xcc>
 8007478:	b672      	cpsid	i
 800747a:	e7fe      	b.n	800747a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	1ad2      	subs	r2, r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	0018      	movs	r0, r3
 8007492:	f000 f8db 	bl	800764c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007496:	4b16      	ldr	r3, [pc, #88]	; (80074f0 <pvPortMalloc+0x140>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <pvPortMalloc+0x140>)
 80074a2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074a4:	4b12      	ldr	r3, [pc, #72]	; (80074f0 <pvPortMalloc+0x140>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <pvPortMalloc+0x148>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d203      	bcs.n	80074b8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <pvPortMalloc+0x140>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <pvPortMalloc+0x148>)
 80074b6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <pvPortMalloc+0x13c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	431a      	orrs	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074cc:	f7fe ff18 	bl	8006300 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2207      	movs	r2, #7
 80074d4:	4013      	ands	r3, r2
 80074d6:	d001      	beq.n	80074dc <pvPortMalloc+0x12c>
 80074d8:	b672      	cpsid	i
 80074da:	e7fe      	b.n	80074da <pvPortMalloc+0x12a>
	return pvReturn;
 80074dc:	68fb      	ldr	r3, [r7, #12]
}
 80074de:	0018      	movs	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b006      	add	sp, #24
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	200038b0 	.word	0x200038b0
 80074ec:	200038bc 	.word	0x200038bc
 80074f0:	200038b4 	.word	0x200038b4
 80074f4:	200038a8 	.word	0x200038a8
 80074f8:	200038b8 	.word	0x200038b8

080074fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d035      	beq.n	800757a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800750e:	2308      	movs	r3, #8
 8007510:	425b      	negs	r3, r3
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	18d3      	adds	r3, r2, r3
 8007516:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	4b18      	ldr	r3, [pc, #96]	; (8007584 <vPortFree+0x88>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4013      	ands	r3, r2
 8007526:	d101      	bne.n	800752c <vPortFree+0x30>
 8007528:	b672      	cpsid	i
 800752a:	e7fe      	b.n	800752a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <vPortFree+0x3c>
 8007534:	b672      	cpsid	i
 8007536:	e7fe      	b.n	8007536 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	4b11      	ldr	r3, [pc, #68]	; (8007584 <vPortFree+0x88>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4013      	ands	r3, r2
 8007542:	d01a      	beq.n	800757a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d116      	bne.n	800757a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <vPortFree+0x88>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	43db      	mvns	r3, r3
 8007556:	401a      	ands	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800755c:	f7fe fec4 	bl	80062e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	4b08      	ldr	r3, [pc, #32]	; (8007588 <vPortFree+0x8c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	18d2      	adds	r2, r2, r3
 800756a:	4b07      	ldr	r3, [pc, #28]	; (8007588 <vPortFree+0x8c>)
 800756c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	0018      	movs	r0, r3
 8007572:	f000 f86b 	bl	800764c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007576:	f7fe fec3 	bl	8006300 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	46bd      	mov	sp, r7
 800757e:	b004      	add	sp, #16
 8007580:	bd80      	pop	{r7, pc}
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	200038bc 	.word	0x200038bc
 8007588:	200038b4 	.word	0x200038b4

0800758c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007592:	23c0      	movs	r3, #192	; 0xc0
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007598:	4b26      	ldr	r3, [pc, #152]	; (8007634 <prvHeapInit+0xa8>)
 800759a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2207      	movs	r2, #7
 80075a0:	4013      	ands	r3, r2
 80075a2:	d00c      	beq.n	80075be <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3307      	adds	r3, #7
 80075a8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2207      	movs	r2, #7
 80075ae:	4393      	bics	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	1ad2      	subs	r2, r2, r3
 80075b8:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <prvHeapInit+0xa8>)
 80075ba:	18d3      	adds	r3, r2, r3
 80075bc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075c2:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <prvHeapInit+0xac>)
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075c8:	4b1b      	ldr	r3, [pc, #108]	; (8007638 <prvHeapInit+0xac>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	18d3      	adds	r3, r2, r3
 80075d4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075d6:	2208      	movs	r2, #8
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2207      	movs	r2, #7
 80075e2:	4393      	bics	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4b14      	ldr	r3, [pc, #80]	; (800763c <prvHeapInit+0xb0>)
 80075ea:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80075ec:	4b13      	ldr	r3, [pc, #76]	; (800763c <prvHeapInit+0xb0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2200      	movs	r2, #0
 80075f2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075f4:	4b11      	ldr	r3, [pc, #68]	; (800763c <prvHeapInit+0xb0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	1ad2      	subs	r2, r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800760a:	4b0c      	ldr	r3, [pc, #48]	; (800763c <prvHeapInit+0xb0>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <prvHeapInit+0xb4>)
 8007618:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	4b09      	ldr	r3, [pc, #36]	; (8007644 <prvHeapInit+0xb8>)
 8007620:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <prvHeapInit+0xbc>)
 8007624:	2280      	movs	r2, #128	; 0x80
 8007626:	0612      	lsls	r2, r2, #24
 8007628:	601a      	str	r2, [r3, #0]
}
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	46bd      	mov	sp, r7
 800762e:	b004      	add	sp, #16
 8007630:	bd80      	pop	{r7, pc}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	20002ca8 	.word	0x20002ca8
 8007638:	200038a8 	.word	0x200038a8
 800763c:	200038b0 	.word	0x200038b0
 8007640:	200038b8 	.word	0x200038b8
 8007644:	200038b4 	.word	0x200038b4
 8007648:	200038bc 	.word	0x200038bc

0800764c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007654:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <prvInsertBlockIntoFreeList+0xa8>)
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e002      	b.n	8007660 <prvInsertBlockIntoFreeList+0x14>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	429a      	cmp	r2, r3
 8007668:	d8f7      	bhi.n	800765a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	18d3      	adds	r3, r2, r3
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	429a      	cmp	r2, r3
 800767a:	d108      	bne.n	800768e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	18d2      	adds	r2, r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	18d2      	adds	r2, r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d118      	bne.n	80076d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <prvInsertBlockIntoFreeList+0xac>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d00d      	beq.n	80076ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	18d2      	adds	r2, r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	e008      	b.n	80076dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076ca:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <prvInsertBlockIntoFreeList+0xac>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e003      	b.n	80076dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d002      	beq.n	80076ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b004      	add	sp, #16
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	46c0      	nop			; (mov r8, r8)
 80076f4:	200038a8 	.word	0x200038a8
 80076f8:	200038b0 	.word	0x200038b0

080076fc <__libc_init_array>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	2600      	movs	r6, #0
 8007700:	4d0c      	ldr	r5, [pc, #48]	; (8007734 <__libc_init_array+0x38>)
 8007702:	4c0d      	ldr	r4, [pc, #52]	; (8007738 <__libc_init_array+0x3c>)
 8007704:	1b64      	subs	r4, r4, r5
 8007706:	10a4      	asrs	r4, r4, #2
 8007708:	42a6      	cmp	r6, r4
 800770a:	d109      	bne.n	8007720 <__libc_init_array+0x24>
 800770c:	2600      	movs	r6, #0
 800770e:	f000 f8f9 	bl	8007904 <_init>
 8007712:	4d0a      	ldr	r5, [pc, #40]	; (800773c <__libc_init_array+0x40>)
 8007714:	4c0a      	ldr	r4, [pc, #40]	; (8007740 <__libc_init_array+0x44>)
 8007716:	1b64      	subs	r4, r4, r5
 8007718:	10a4      	asrs	r4, r4, #2
 800771a:	42a6      	cmp	r6, r4
 800771c:	d105      	bne.n	800772a <__libc_init_array+0x2e>
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	00b3      	lsls	r3, r6, #2
 8007722:	58eb      	ldr	r3, [r5, r3]
 8007724:	4798      	blx	r3
 8007726:	3601      	adds	r6, #1
 8007728:	e7ee      	b.n	8007708 <__libc_init_array+0xc>
 800772a:	00b3      	lsls	r3, r6, #2
 800772c:	58eb      	ldr	r3, [r5, r3]
 800772e:	4798      	blx	r3
 8007730:	3601      	adds	r6, #1
 8007732:	e7f2      	b.n	800771a <__libc_init_array+0x1e>
 8007734:	08007a8c 	.word	0x08007a8c
 8007738:	08007a8c 	.word	0x08007a8c
 800773c:	08007a8c 	.word	0x08007a8c
 8007740:	08007a90 	.word	0x08007a90

08007744 <__retarget_lock_acquire_recursive>:
 8007744:	4770      	bx	lr

08007746 <__retarget_lock_release_recursive>:
 8007746:	4770      	bx	lr

08007748 <memcpy>:
 8007748:	2300      	movs	r3, #0
 800774a:	b510      	push	{r4, lr}
 800774c:	429a      	cmp	r2, r3
 800774e:	d100      	bne.n	8007752 <memcpy+0xa>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	5ccc      	ldrb	r4, [r1, r3]
 8007754:	54c4      	strb	r4, [r0, r3]
 8007756:	3301      	adds	r3, #1
 8007758:	e7f8      	b.n	800774c <memcpy+0x4>

0800775a <memset>:
 800775a:	0003      	movs	r3, r0
 800775c:	1882      	adds	r2, r0, r2
 800775e:	4293      	cmp	r3, r2
 8007760:	d100      	bne.n	8007764 <memset+0xa>
 8007762:	4770      	bx	lr
 8007764:	7019      	strb	r1, [r3, #0]
 8007766:	3301      	adds	r3, #1
 8007768:	e7f9      	b.n	800775e <memset+0x4>

0800776a <cleanup_glue>:
 800776a:	b570      	push	{r4, r5, r6, lr}
 800776c:	000d      	movs	r5, r1
 800776e:	6809      	ldr	r1, [r1, #0]
 8007770:	0004      	movs	r4, r0
 8007772:	2900      	cmp	r1, #0
 8007774:	d001      	beq.n	800777a <cleanup_glue+0x10>
 8007776:	f7ff fff8 	bl	800776a <cleanup_glue>
 800777a:	0029      	movs	r1, r5
 800777c:	0020      	movs	r0, r4
 800777e:	f000 f877 	bl	8007870 <_free_r>
 8007782:	bd70      	pop	{r4, r5, r6, pc}

08007784 <_reclaim_reent>:
 8007784:	4b31      	ldr	r3, [pc, #196]	; (800784c <_reclaim_reent+0xc8>)
 8007786:	b570      	push	{r4, r5, r6, lr}
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	0004      	movs	r4, r0
 800778c:	4283      	cmp	r3, r0
 800778e:	d049      	beq.n	8007824 <_reclaim_reent+0xa0>
 8007790:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <_reclaim_reent+0x28>
 8007796:	2500      	movs	r5, #0
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	42ab      	cmp	r3, r5
 800779c:	d147      	bne.n	800782e <_reclaim_reent+0xaa>
 800779e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a0:	6819      	ldr	r1, [r3, #0]
 80077a2:	2900      	cmp	r1, #0
 80077a4:	d002      	beq.n	80077ac <_reclaim_reent+0x28>
 80077a6:	0020      	movs	r0, r4
 80077a8:	f000 f862 	bl	8007870 <_free_r>
 80077ac:	6961      	ldr	r1, [r4, #20]
 80077ae:	2900      	cmp	r1, #0
 80077b0:	d002      	beq.n	80077b8 <_reclaim_reent+0x34>
 80077b2:	0020      	movs	r0, r4
 80077b4:	f000 f85c 	bl	8007870 <_free_r>
 80077b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80077ba:	2900      	cmp	r1, #0
 80077bc:	d002      	beq.n	80077c4 <_reclaim_reent+0x40>
 80077be:	0020      	movs	r0, r4
 80077c0:	f000 f856 	bl	8007870 <_free_r>
 80077c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d002      	beq.n	80077d0 <_reclaim_reent+0x4c>
 80077ca:	0020      	movs	r0, r4
 80077cc:	f000 f850 	bl	8007870 <_free_r>
 80077d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80077d2:	2900      	cmp	r1, #0
 80077d4:	d002      	beq.n	80077dc <_reclaim_reent+0x58>
 80077d6:	0020      	movs	r0, r4
 80077d8:	f000 f84a 	bl	8007870 <_free_r>
 80077dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077de:	2900      	cmp	r1, #0
 80077e0:	d002      	beq.n	80077e8 <_reclaim_reent+0x64>
 80077e2:	0020      	movs	r0, r4
 80077e4:	f000 f844 	bl	8007870 <_free_r>
 80077e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d002      	beq.n	80077f4 <_reclaim_reent+0x70>
 80077ee:	0020      	movs	r0, r4
 80077f0:	f000 f83e 	bl	8007870 <_free_r>
 80077f4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80077f6:	2900      	cmp	r1, #0
 80077f8:	d002      	beq.n	8007800 <_reclaim_reent+0x7c>
 80077fa:	0020      	movs	r0, r4
 80077fc:	f000 f838 	bl	8007870 <_free_r>
 8007800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007802:	2900      	cmp	r1, #0
 8007804:	d002      	beq.n	800780c <_reclaim_reent+0x88>
 8007806:	0020      	movs	r0, r4
 8007808:	f000 f832 	bl	8007870 <_free_r>
 800780c:	69a3      	ldr	r3, [r4, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d008      	beq.n	8007824 <_reclaim_reent+0xa0>
 8007812:	0020      	movs	r0, r4
 8007814:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007816:	4798      	blx	r3
 8007818:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800781a:	2900      	cmp	r1, #0
 800781c:	d002      	beq.n	8007824 <_reclaim_reent+0xa0>
 800781e:	0020      	movs	r0, r4
 8007820:	f7ff ffa3 	bl	800776a <cleanup_glue>
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	5949      	ldr	r1, [r1, r5]
 8007828:	2900      	cmp	r1, #0
 800782a:	d108      	bne.n	800783e <_reclaim_reent+0xba>
 800782c:	3504      	adds	r5, #4
 800782e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007830:	68d9      	ldr	r1, [r3, #12]
 8007832:	2d80      	cmp	r5, #128	; 0x80
 8007834:	d1f7      	bne.n	8007826 <_reclaim_reent+0xa2>
 8007836:	0020      	movs	r0, r4
 8007838:	f000 f81a 	bl	8007870 <_free_r>
 800783c:	e7af      	b.n	800779e <_reclaim_reent+0x1a>
 800783e:	680e      	ldr	r6, [r1, #0]
 8007840:	0020      	movs	r0, r4
 8007842:	f000 f815 	bl	8007870 <_free_r>
 8007846:	0031      	movs	r1, r6
 8007848:	e7ee      	b.n	8007828 <_reclaim_reent+0xa4>
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	20001c18 	.word	0x20001c18

08007850 <__malloc_lock>:
 8007850:	b510      	push	{r4, lr}
 8007852:	4802      	ldr	r0, [pc, #8]	; (800785c <__malloc_lock+0xc>)
 8007854:	f7ff ff76 	bl	8007744 <__retarget_lock_acquire_recursive>
 8007858:	bd10      	pop	{r4, pc}
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	200038c0 	.word	0x200038c0

08007860 <__malloc_unlock>:
 8007860:	b510      	push	{r4, lr}
 8007862:	4802      	ldr	r0, [pc, #8]	; (800786c <__malloc_unlock+0xc>)
 8007864:	f7ff ff6f 	bl	8007746 <__retarget_lock_release_recursive>
 8007868:	bd10      	pop	{r4, pc}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	200038c0 	.word	0x200038c0

08007870 <_free_r>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	0005      	movs	r5, r0
 8007874:	2900      	cmp	r1, #0
 8007876:	d010      	beq.n	800789a <_free_r+0x2a>
 8007878:	1f0c      	subs	r4, r1, #4
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	da00      	bge.n	8007882 <_free_r+0x12>
 8007880:	18e4      	adds	r4, r4, r3
 8007882:	0028      	movs	r0, r5
 8007884:	f7ff ffe4 	bl	8007850 <__malloc_lock>
 8007888:	4a1d      	ldr	r2, [pc, #116]	; (8007900 <_free_r+0x90>)
 800788a:	6813      	ldr	r3, [r2, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <_free_r+0x2c>
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	6014      	str	r4, [r2, #0]
 8007894:	0028      	movs	r0, r5
 8007896:	f7ff ffe3 	bl	8007860 <__malloc_unlock>
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	42a3      	cmp	r3, r4
 800789e:	d908      	bls.n	80078b2 <_free_r+0x42>
 80078a0:	6821      	ldr	r1, [r4, #0]
 80078a2:	1860      	adds	r0, r4, r1
 80078a4:	4283      	cmp	r3, r0
 80078a6:	d1f3      	bne.n	8007890 <_free_r+0x20>
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	1841      	adds	r1, r0, r1
 80078ae:	6021      	str	r1, [r4, #0]
 80078b0:	e7ee      	b.n	8007890 <_free_r+0x20>
 80078b2:	001a      	movs	r2, r3
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <_free_r+0x4e>
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	d9f9      	bls.n	80078b2 <_free_r+0x42>
 80078be:	6811      	ldr	r1, [r2, #0]
 80078c0:	1850      	adds	r0, r2, r1
 80078c2:	42a0      	cmp	r0, r4
 80078c4:	d10b      	bne.n	80078de <_free_r+0x6e>
 80078c6:	6820      	ldr	r0, [r4, #0]
 80078c8:	1809      	adds	r1, r1, r0
 80078ca:	1850      	adds	r0, r2, r1
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	4283      	cmp	r3, r0
 80078d0:	d1e0      	bne.n	8007894 <_free_r+0x24>
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	1841      	adds	r1, r0, r1
 80078d8:	6011      	str	r1, [r2, #0]
 80078da:	6053      	str	r3, [r2, #4]
 80078dc:	e7da      	b.n	8007894 <_free_r+0x24>
 80078de:	42a0      	cmp	r0, r4
 80078e0:	d902      	bls.n	80078e8 <_free_r+0x78>
 80078e2:	230c      	movs	r3, #12
 80078e4:	602b      	str	r3, [r5, #0]
 80078e6:	e7d5      	b.n	8007894 <_free_r+0x24>
 80078e8:	6821      	ldr	r1, [r4, #0]
 80078ea:	1860      	adds	r0, r4, r1
 80078ec:	4283      	cmp	r3, r0
 80078ee:	d103      	bne.n	80078f8 <_free_r+0x88>
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	1841      	adds	r1, r0, r1
 80078f6:	6021      	str	r1, [r4, #0]
 80078f8:	6063      	str	r3, [r4, #4]
 80078fa:	6054      	str	r4, [r2, #4]
 80078fc:	e7ca      	b.n	8007894 <_free_r+0x24>
 80078fe:	46c0      	nop			; (mov r8, r8)
 8007900:	200038c4 	.word	0x200038c4

08007904 <_init>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr

08007910 <_fini>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007916:	bc08      	pop	{r3}
 8007918:	469e      	mov	lr, r3
 800791a:	4770      	bx	lr
