
OsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064bc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800657c  0800657c  0001657c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006684  08006684  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006684  08006684  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006684  08006684  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800668c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc0  20000074  08006700  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c34  08006700  00021c34  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f42  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ef  00000000  00000000  00037fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f3e  00000000  00000000  0003d898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cb3  00000000  00000000  000407d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b426e  00000000  00000000  00057489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b6f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d6c  00000000  00000000  0010b748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006564 	.word	0x08006564

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08006564 	.word	0x08006564

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd72 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f826 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9d4 	bl	80005d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f9ac 	bl	800058c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000234:	f000 f97a 	bl	800052c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000238:	f000 f884 	bl	8000344 <MX_ADC_Init>
  MX_TIM3_Init();
 800023c:	f000 f8f6 	bl	800042c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Porneste PWM pe timer 3 canal 4 (pin PB1)
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <main+0x48>)
 8000242:	210c      	movs	r1, #12
 8000244:	0018      	movs	r0, r3
 8000246:	f002 fcab 	bl	8002ba0 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800024a:	f003 fe8f 	bl	8003f6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stergatoare */
  stergatoareHandle = osThreadNew(Stergatoare, NULL, &stergatoare_attributes);
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <main+0x4c>)
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <main+0x50>)
 8000252:	2100      	movs	r1, #0
 8000254:	0018      	movs	r0, r3
 8000256:	f003 fee3 	bl	8004020 <osThreadNew>
 800025a:	0002      	movs	r2, r0
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <main+0x54>)
 800025e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000260:	f003 feb0 	bl	8003fc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x44>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000114 	.word	0x20000114
 800026c:	080065c0 	.word	0x080065c0
 8000270:	080006c5 	.word	0x080006c5
 8000274:	20000224 	.word	0x20000224

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b099      	sub	sp, #100	; 0x64
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	242c      	movs	r4, #44	; 0x2c
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2334      	movs	r3, #52	; 0x34
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f006 f896 	bl	80063ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	231c      	movs	r3, #28
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	0018      	movs	r0, r3
 8000294:	2310      	movs	r3, #16
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f006 f88e 	bl	80063ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029e:	003b      	movs	r3, r7
 80002a0:	0018      	movs	r0, r3
 80002a2:	231c      	movs	r3, #28
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f006 f887 	bl	80063ba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80002ac:	0021      	movs	r1, r4
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2211      	movs	r2, #17
 80002b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2201      	movs	r2, #1
 80002b8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2201      	movs	r2, #1
 80002be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2210      	movs	r2, #16
 80002c4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2202      	movs	r2, #2
 80002ca:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2280      	movs	r2, #128	; 0x80
 80002d0:	0252      	lsls	r2, r2, #9
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	22a0      	movs	r2, #160	; 0xa0
 80002d8:	0392      	lsls	r2, r2, #14
 80002da:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2201      	movs	r2, #1
 80002e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 fdb3 	bl	8001e50 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ee:	f000 fb0f 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	211c      	movs	r1, #28
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2207      	movs	r2, #7
 80002f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2202      	movs	r2, #2
 80002fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2101      	movs	r1, #1
 8000310:	0018      	movs	r0, r3
 8000312:	f002 f923 	bl	800255c <HAL_RCC_ClockConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800031a:	f000 faf9 	bl	8000910 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800031e:	003b      	movs	r3, r7
 8000320:	2202      	movs	r2, #2
 8000322:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000324:	003b      	movs	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032a:	003b      	movs	r3, r7
 800032c:	0018      	movs	r0, r3
 800032e:	f002 fa8f 	bl	8002850 <HAL_RCCEx_PeriphCLKConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000336:	f000 faeb 	bl	8000910 <Error_Handler>
  }
}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b019      	add	sp, #100	; 0x64
 8000340:	bd90      	pop	{r4, r7, pc}
	...

08000344 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	0018      	movs	r0, r3
 800034e:	230c      	movs	r3, #12
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f006 f831 	bl	80063ba <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000358:	4b32      	ldr	r3, [pc, #200]	; (8000424 <MX_ADC_Init+0xe0>)
 800035a:	4a33      	ldr	r2, [pc, #204]	; (8000428 <MX_ADC_Init+0xe4>)
 800035c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035e:	4b31      	ldr	r3, [pc, #196]	; (8000424 <MX_ADC_Init+0xe0>)
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000364:	4b2f      	ldr	r3, [pc, #188]	; (8000424 <MX_ADC_Init+0xe0>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036a:	4b2e      	ldr	r3, [pc, #184]	; (8000424 <MX_ADC_Init+0xe0>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000370:	4b2c      	ldr	r3, [pc, #176]	; (8000424 <MX_ADC_Init+0xe0>)
 8000372:	2201      	movs	r2, #1
 8000374:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000376:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <MX_ADC_Init+0xe0>)
 8000378:	2204      	movs	r2, #4
 800037a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800037c:	4b29      	ldr	r3, [pc, #164]	; (8000424 <MX_ADC_Init+0xe0>)
 800037e:	2200      	movs	r2, #0
 8000380:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000382:	4b28      	ldr	r3, [pc, #160]	; (8000424 <MX_ADC_Init+0xe0>)
 8000384:	2200      	movs	r2, #0
 8000386:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000388:	4b26      	ldr	r3, [pc, #152]	; (8000424 <MX_ADC_Init+0xe0>)
 800038a:	2201      	movs	r2, #1
 800038c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800038e:	4b25      	ldr	r3, [pc, #148]	; (8000424 <MX_ADC_Init+0xe0>)
 8000390:	2200      	movs	r2, #0
 8000392:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <MX_ADC_Init+0xe0>)
 8000396:	22c2      	movs	r2, #194	; 0xc2
 8000398:	32ff      	adds	r2, #255	; 0xff
 800039a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_ADC_Init+0xe0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <MX_ADC_Init+0xe0>)
 80003a4:	2224      	movs	r2, #36	; 0x24
 80003a6:	2101      	movs	r1, #1
 80003a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003aa:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <MX_ADC_Init+0xe0>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <MX_ADC_Init+0xe0>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fd32 	bl	8000e1c <HAL_ADC_Init>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003bc:	f000 faa8 	bl	8000910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	0152      	lsls	r2, r2, #5
 80003cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2207      	movs	r2, #7
 80003d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003d4:	1d3a      	adds	r2, r7, #4
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <MX_ADC_Init+0xe0>)
 80003d8:	0011      	movs	r1, r2
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 fef8 	bl	80011d0 <HAL_ADC_ConfigChannel>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80003e4:	f000 fa94 	bl	8000910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2201      	movs	r2, #1
 80003ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ee:	1d3a      	adds	r2, r7, #4
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_ADC_Init+0xe0>)
 80003f2:	0011      	movs	r1, r2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 feeb 	bl	80011d0 <HAL_ADC_ConfigChannel>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80003fe:	f000 fa87 	bl	8000910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2204      	movs	r2, #4
 8000406:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000408:	1d3a      	adds	r2, r7, #4
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_ADC_Init+0xe0>)
 800040c:	0011      	movs	r1, r2
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fede 	bl	80011d0 <HAL_ADC_ConfigChannel>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000418:	f000 fa7a 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b004      	add	sp, #16
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000090 	.word	0x20000090
 8000428:	40012400 	.word	0x40012400

0800042c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08e      	sub	sp, #56	; 0x38
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000432:	2328      	movs	r3, #40	; 0x28
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	0018      	movs	r0, r3
 8000438:	2310      	movs	r3, #16
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f005 ffbc 	bl	80063ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000442:	2320      	movs	r3, #32
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	0018      	movs	r0, r3
 8000448:	2308      	movs	r3, #8
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f005 ffb4 	bl	80063ba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	0018      	movs	r0, r3
 8000456:	231c      	movs	r3, #28
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f005 ffad 	bl	80063ba <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000460:	4b2f      	ldr	r3, [pc, #188]	; (8000520 <MX_TIM3_Init+0xf4>)
 8000462:	4a30      	ldr	r2, [pc, #192]	; (8000524 <MX_TIM3_Init+0xf8>)
 8000464:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000466:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <MX_TIM3_Init+0xf4>)
 8000468:	222f      	movs	r2, #47	; 0x2f
 800046a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046c:	4b2c      	ldr	r3, [pc, #176]	; (8000520 <MX_TIM3_Init+0xf4>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000472:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <MX_TIM3_Init+0xf4>)
 8000474:	4a2c      	ldr	r2, [pc, #176]	; (8000528 <MX_TIM3_Init+0xfc>)
 8000476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000478:	4b29      	ldr	r3, [pc, #164]	; (8000520 <MX_TIM3_Init+0xf4>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047e:	4b28      	ldr	r3, [pc, #160]	; (8000520 <MX_TIM3_Init+0xf4>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000484:	4b26      	ldr	r3, [pc, #152]	; (8000520 <MX_TIM3_Init+0xf4>)
 8000486:	0018      	movs	r0, r3
 8000488:	f002 fae2 	bl	8002a50 <HAL_TIM_Base_Init>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000490:	f000 fa3e 	bl	8000910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000494:	2128      	movs	r1, #40	; 0x28
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	0152      	lsls	r2, r2, #5
 800049c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800049e:	187a      	adds	r2, r7, r1
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_TIM3_Init+0xf4>)
 80004a2:	0011      	movs	r1, r2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 fcf9 	bl	8002e9c <HAL_TIM_ConfigClockSource>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80004ae:	f000 fa2f 	bl	8000910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <MX_TIM3_Init+0xf4>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 fb1b 	bl	8002af0 <HAL_TIM_PWM_Init>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80004be:	f000 fa27 	bl	8000910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c2:	2120      	movs	r1, #32
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004d0:	187a      	adds	r2, r7, r1
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <MX_TIM3_Init+0xf4>)
 80004d4:	0011      	movs	r1, r2
 80004d6:	0018      	movs	r0, r3
 80004d8:	f003 f8ee 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80004e0:	f000 fa16 	bl	8000910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2260      	movs	r2, #96	; 0x60
 80004e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004fc:	1d39      	adds	r1, r7, #4
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_TIM3_Init+0xf4>)
 8000500:	220c      	movs	r2, #12
 8000502:	0018      	movs	r0, r3
 8000504:	f002 fc04 	bl	8002d10 <HAL_TIM_PWM_ConfigChannel>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800050c:	f000 fa00 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <MX_TIM3_Init+0xf4>)
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fb12 	bl	8000b3c <HAL_TIM_MspPostInit>

}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b00e      	add	sp, #56	; 0x38
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000114 	.word	0x20000114
 8000524:	40000400 	.word	0x40000400
 8000528:	00004e1f 	.word	0x00004e1f

0800052c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <MX_USART2_UART_Init+0x5c>)
 8000534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000538:	22e1      	movs	r2, #225	; 0xe1
 800053a:	0252      	lsls	r2, r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000570:	0018      	movs	r0, r3
 8000572:	f003 f8ff 	bl	8003774 <HAL_UART_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800057a:	f000 f9c9 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200001a0 	.word	0x200001a0
 8000588:	40004400 	.word	0x40004400

0800058c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_DMA_Init+0x48>)
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_DMA_Init+0x48>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	615a      	str	r2, [r3, #20]
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <MX_DMA_Init+0x48>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2103      	movs	r1, #3
 80005ae:	2009      	movs	r0, #9
 80005b0:	f001 f8d0 	bl	8001754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80005b4:	2009      	movs	r0, #9
 80005b6:	f001 f8e2 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2103      	movs	r1, #3
 80005be:	200a      	movs	r0, #10
 80005c0:	f001 f8c8 	bl	8001754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80005c4:	200a      	movs	r0, #10
 80005c6:	f001 f8da 	bl	800177e <HAL_NVIC_EnableIRQ>

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b08b      	sub	sp, #44	; 0x2c
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	2414      	movs	r4, #20
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	0018      	movs	r0, r3
 80005e4:	2314      	movs	r3, #20
 80005e6:	001a      	movs	r2, r3
 80005e8:	2100      	movs	r1, #0
 80005ea:	f005 fee6 	bl	80063ba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b33      	ldr	r3, [pc, #204]	; (80006bc <MX_GPIO_Init+0xe4>)
 80005f0:	695a      	ldr	r2, [r3, #20]
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <MX_GPIO_Init+0xe4>)
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	0309      	lsls	r1, r1, #12
 80005f8:	430a      	orrs	r2, r1
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_GPIO_Init+0xe4>)
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	031b      	lsls	r3, r3, #12
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_GPIO_Init+0xe4>)
 800060c:	695a      	ldr	r2, [r3, #20]
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_GPIO_Init+0xe4>)
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	03c9      	lsls	r1, r1, #15
 8000614:	430a      	orrs	r2, r1
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_GPIO_Init+0xe4>)
 800061a:	695a      	ldr	r2, [r3, #20]
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	03db      	lsls	r3, r3, #15
 8000620:	4013      	ands	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <MX_GPIO_Init+0xe4>)
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_GPIO_Init+0xe4>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0289      	lsls	r1, r1, #10
 8000630:	430a      	orrs	r2, r1
 8000632:	615a      	str	r2, [r3, #20]
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_GPIO_Init+0xe4>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	029b      	lsls	r3, r3, #10
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_GPIO_Init+0xe4>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_GPIO_Init+0xe4>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	02c9      	lsls	r1, r1, #11
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_GPIO_Init+0xe4>)
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	02db      	lsls	r3, r3, #11
 8000658:	4013      	ands	r3, r2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800065e:	2390      	movs	r3, #144	; 0x90
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	0018      	movs	r0, r3
 8000668:	f001 fbd4 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	0192      	lsls	r2, r2, #6
 8000672:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000680:	193b      	adds	r3, r7, r4
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <MX_GPIO_Init+0xe8>)
 8000684:	0019      	movs	r1, r3
 8000686:	0010      	movs	r0, r2
 8000688:	f001 fa4c 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800068c:	0021      	movs	r1, r4
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2220      	movs	r2, #32
 8000692:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2201      	movs	r2, #1
 8000698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	187a      	adds	r2, r7, r1
 80006a8:	2390      	movs	r3, #144	; 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 fa38 	bl	8001b24 <HAL_GPIO_Init>

}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b00b      	add	sp, #44	; 0x2c
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000800 	.word	0x48000800

080006c4 <Stergatoare>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Stergatoare */
void Stergatoare(void *argument)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint32_t treaptaCurenta = 0; // Numar Treapta Viteza Curent
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
		uint32_t value[3]; 			//Joystick ADC Input
		  						    //value[0] - sus (X, default = 70-80, sus = 0, jos = 90-95)
		  						    //value[1] - dreapta (Y, default = 75-85, dreapta = 0, stanga = 90-95)
		  					        //value[2] - buton (SW, default = 1200+, apasat = 0)

		HAL_ADC_Start_DMA(&hadc, value, 3); // start adc in DMA mode
 80006d0:	240c      	movs	r4, #12
 80006d2:	1939      	adds	r1, r7, r4
 80006d4:	4b8b      	ldr	r3, [pc, #556]	; (8000904 <Stergatoare+0x240>)
 80006d6:	2203      	movs	r2, #3
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fcdf 	bl	800109c <HAL_ADC_Start_DMA>
		////////////////////////////////////  IMPLEMENTARE STERGATOARE  /////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////

		// STERGERE X1 - Joystick Sus

		if(value[0] == 0){ // Joystick sus
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d129      	bne.n	800073a <Stergatoare+0x76>
			TIM3 -> CCR4 = 500;   // 0%
 80006e6:	4b88      	ldr	r3, [pc, #544]	; (8000908 <Stergatoare+0x244>)
 80006e8:	22fa      	movs	r2, #250	; 0xfa
 80006ea:	0052      	lsls	r2, r2, #1
 80006ec:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 80006ee:	20c8      	movs	r0, #200	; 0xc8
 80006f0:	f000 fb70 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 80006f4:	4b84      	ldr	r3, [pc, #528]	; (8000908 <Stergatoare+0x244>)
 80006f6:	22fa      	movs	r2, #250	; 0xfa
 80006f8:	0092      	lsls	r2, r2, #2
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 80006fc:	20c8      	movs	r0, #200	; 0xc8
 80006fe:	f000 fb69 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000702:	4b81      	ldr	r3, [pc, #516]	; (8000908 <Stergatoare+0x244>)
 8000704:	4a81      	ldr	r2, [pc, #516]	; (800090c <Stergatoare+0x248>)
 8000706:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000708:	20c8      	movs	r0, #200	; 0xc8
 800070a:	f000 fb63 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 800070e:	4b7e      	ldr	r3, [pc, #504]	; (8000908 <Stergatoare+0x244>)
 8000710:	22fa      	movs	r2, #250	; 0xfa
 8000712:	00d2      	lsls	r2, r2, #3
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000716:	20c8      	movs	r0, #200	; 0xc8
 8000718:	f000 fb5c 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 800071c:	4b7a      	ldr	r3, [pc, #488]	; (8000908 <Stergatoare+0x244>)
 800071e:	2296      	movs	r2, #150	; 0x96
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(250);
 8000724:	20fa      	movs	r0, #250	; 0xfa
 8000726:	f000 fb55 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 800072a:	4b77      	ldr	r3, [pc, #476]	; (8000908 <Stergatoare+0x244>)
 800072c:	22fa      	movs	r2, #250	; 0xfa
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000732:	20c8      	movs	r0, #200	; 0xc8
 8000734:	f000 fb4e 	bl	8000dd4 <HAL_Delay>
 8000738:	e006      	b.n	8000748 <Stergatoare+0x84>
		}
		else{
			TIM3 -> CCR4 = 500;   // 0%
 800073a:	4b73      	ldr	r3, [pc, #460]	; (8000908 <Stergatoare+0x244>)
 800073c:	22fa      	movs	r2, #250	; 0xfa
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8000742:	2064      	movs	r0, #100	; 0x64
 8000744:	f000 fb46 	bl	8000dd4 <HAL_Delay>
		}

		// Setare treapta de viteza, maxim 3 trepte
		if (value[0] >= 85 && treaptaCurenta <= 2){ //Joystick jos
 8000748:	230c      	movs	r3, #12
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b54      	cmp	r3, #84	; 0x54
 8000750:	d905      	bls.n	800075e <Stergatoare+0x9a>
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d802      	bhi.n	800075e <Stergatoare+0x9a>
			treaptaCurenta++;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3301      	adds	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
		}

		// TREAPTA 1

		if(treaptaCurenta == 1)	{
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d128      	bne.n	80007b6 <Stergatoare+0xf2>
			TIM3 -> CCR4 = 500;   // 0%
 8000764:	4b68      	ldr	r3, [pc, #416]	; (8000908 <Stergatoare+0x244>)
 8000766:	22fa      	movs	r2, #250	; 0xfa
 8000768:	0052      	lsls	r2, r2, #1
 800076a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 800076c:	2096      	movs	r0, #150	; 0x96
 800076e:	f000 fb31 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000772:	4b65      	ldr	r3, [pc, #404]	; (8000908 <Stergatoare+0x244>)
 8000774:	22fa      	movs	r2, #250	; 0xfa
 8000776:	0092      	lsls	r2, r2, #2
 8000778:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 800077a:	2096      	movs	r0, #150	; 0x96
 800077c:	f000 fb2a 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000780:	4b61      	ldr	r3, [pc, #388]	; (8000908 <Stergatoare+0x244>)
 8000782:	4a62      	ldr	r2, [pc, #392]	; (800090c <Stergatoare+0x248>)
 8000784:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000786:	2096      	movs	r0, #150	; 0x96
 8000788:	f000 fb24 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 800078c:	4b5e      	ldr	r3, [pc, #376]	; (8000908 <Stergatoare+0x244>)
 800078e:	22fa      	movs	r2, #250	; 0xfa
 8000790:	00d2      	lsls	r2, r2, #3
 8000792:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000794:	2096      	movs	r0, #150	; 0x96
 8000796:	f000 fb1d 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 800079a:	4b5b      	ldr	r3, [pc, #364]	; (8000908 <Stergatoare+0x244>)
 800079c:	2296      	movs	r2, #150	; 0x96
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 80007a2:	2096      	movs	r0, #150	; 0x96
 80007a4:	f000 fb16 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 80007a8:	4b57      	ldr	r3, [pc, #348]	; (8000908 <Stergatoare+0x244>)
 80007aa:	22fa      	movs	r2, #250	; 0xfa
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 80007b0:	20c8      	movs	r0, #200	; 0xc8
 80007b2:	f000 fb0f 	bl	8000dd4 <HAL_Delay>
				}

		// TREAPTA 2

		if(treaptaCurenta == 2)	{
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d128      	bne.n	800080e <Stergatoare+0x14a>
			TIM3 -> CCR4 = 500;   // 0%
 80007bc:	4b52      	ldr	r3, [pc, #328]	; (8000908 <Stergatoare+0x244>)
 80007be:	22fa      	movs	r2, #250	; 0xfa
 80007c0:	0052      	lsls	r2, r2, #1
 80007c2:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80007c4:	2064      	movs	r0, #100	; 0x64
 80007c6:	f000 fb05 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <Stergatoare+0x244>)
 80007cc:	22fa      	movs	r2, #250	; 0xfa
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80007d2:	2064      	movs	r0, #100	; 0x64
 80007d4:	f000 fafe 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 80007d8:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <Stergatoare+0x244>)
 80007da:	4a4c      	ldr	r2, [pc, #304]	; (800090c <Stergatoare+0x248>)
 80007dc:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80007de:	2064      	movs	r0, #100	; 0x64
 80007e0:	f000 faf8 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 80007e4:	4b48      	ldr	r3, [pc, #288]	; (8000908 <Stergatoare+0x244>)
 80007e6:	22fa      	movs	r2, #250	; 0xfa
 80007e8:	00d2      	lsls	r2, r2, #3
 80007ea:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f000 faf1 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 80007f2:	4b45      	ldr	r3, [pc, #276]	; (8000908 <Stergatoare+0x244>)
 80007f4:	2296      	movs	r2, #150	; 0x96
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f000 faea 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8000800:	4b41      	ldr	r3, [pc, #260]	; (8000908 <Stergatoare+0x244>)
 8000802:	22fa      	movs	r2, #250	; 0xfa
 8000804:	0052      	lsls	r2, r2, #1
 8000806:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000808:	20c8      	movs	r0, #200	; 0xc8
 800080a:	f000 fae3 	bl	8000dd4 <HAL_Delay>
		}

		// TREAPTA 3

		if (treaptaCurenta == 3) {
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d128      	bne.n	8000866 <Stergatoare+0x1a2>
			TIM3 -> CCR4 = 500;   // 0%
 8000814:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <Stergatoare+0x244>)
 8000816:	22fa      	movs	r2, #250	; 0xfa
 8000818:	0052      	lsls	r2, r2, #1
 800081a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 800081c:	204b      	movs	r0, #75	; 0x4b
 800081e:	f000 fad9 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000822:	4b39      	ldr	r3, [pc, #228]	; (8000908 <Stergatoare+0x244>)
 8000824:	22fa      	movs	r2, #250	; 0xfa
 8000826:	0092      	lsls	r2, r2, #2
 8000828:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 800082a:	204b      	movs	r0, #75	; 0x4b
 800082c:	f000 fad2 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000830:	4b35      	ldr	r3, [pc, #212]	; (8000908 <Stergatoare+0x244>)
 8000832:	4a36      	ldr	r2, [pc, #216]	; (800090c <Stergatoare+0x248>)
 8000834:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 8000836:	204b      	movs	r0, #75	; 0x4b
 8000838:	f000 facc 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 800083c:	4b32      	ldr	r3, [pc, #200]	; (8000908 <Stergatoare+0x244>)
 800083e:	22fa      	movs	r2, #250	; 0xfa
 8000840:	00d2      	lsls	r2, r2, #3
 8000842:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 8000844:	204b      	movs	r0, #75	; 0x4b
 8000846:	f000 fac5 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <Stergatoare+0x244>)
 800084c:	2296      	movs	r2, #150	; 0x96
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 8000852:	204b      	movs	r0, #75	; 0x4b
 8000854:	f000 fabe 	bl	8000dd4 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8000858:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <Stergatoare+0x244>)
 800085a:	22fa      	movs	r2, #250	; 0xfa
 800085c:	0052      	lsls	r2, r2, #1
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000860:	20c8      	movs	r0, #200	; 0xc8
 8000862:	f000 fab7 	bl	8000dd4 <HAL_Delay>
		}

		// RESETARE - Apasare Buton

		if (value[2] == 0){ // Buton apasat
 8000866:	230c      	movs	r3, #12
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d108      	bne.n	8000882 <Stergatoare+0x1be>
			TIM3 -> CCR4 = 500; //Motor reset
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <Stergatoare+0x244>)
 8000872:	22fa      	movs	r2, #250	; 0xfa
 8000874:	0052      	lsls	r2, r2, #1
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
			treaptaCurenta = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
			HAL_Delay(200);
 800087c:	20c8      	movs	r0, #200	; 0xc8
 800087e:	f000 faa9 	bl	8000dd4 <HAL_Delay>
		}

		// STROPIRE PARBRIZ

		if (value[1] == 0) { //Joystick dreapta
 8000882:	230c      	movs	r3, #12
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d112      	bne.n	80008b2 <Stergatoare+0x1ee>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //Aprindere Led
 800088c:	2390      	movs	r3, #144	; 0x90
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	2201      	movs	r2, #1
 8000892:	2120      	movs	r1, #32
 8000894:	0018      	movs	r0, r3
 8000896:	f001 fabd 	bl	8001e14 <HAL_GPIO_WritePin>
			HAL_Delay(2000); // Timp stropire parbriz
 800089a:	23fa      	movs	r3, #250	; 0xfa
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fa98 	bl	8000dd4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //Stingere Led
 80008a4:	2390      	movs	r3, #144	; 0x90
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	2200      	movs	r2, #0
 80008aa:	2120      	movs	r1, #32
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fab1 	bl	8001e14 <HAL_GPIO_WritePin>
		}

		// STROPIRE LUNETA

		if(value[1] >= 85){ //Stanga !!!
 80008b2:	230c      	movs	r3, #12
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b54      	cmp	r3, #84	; 0x54
 80008ba:	d800      	bhi.n	80008be <Stergatoare+0x1fa>
 80008bc:	e708      	b.n	80006d0 <Stergatoare+0xc>
			for(int i = 0; i < 3; i++){ // Clipire LED X3
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	e01a      	b.n	80008fa <Stergatoare+0x236>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //
 80008c4:	2390      	movs	r3, #144	; 0x90
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	2201      	movs	r2, #1
 80008ca:	2120      	movs	r1, #32
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 faa1 	bl	8001e14 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 80008d2:	23fa      	movs	r3, #250	; 0xfa
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fa7c 	bl	8000dd4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008dc:	2390      	movs	r3, #144	; 0x90
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	2200      	movs	r2, #0
 80008e2:	2120      	movs	r1, #32
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 fa95 	bl	8001e14 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 80008ea:	23fa      	movs	r3, #250	; 0xfa
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fa70 	bl	8000dd4 <HAL_Delay>
			for(int i = 0; i < 3; i++){ // Clipire LED X3
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	3301      	adds	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	dde1      	ble.n	80008c4 <Stergatoare+0x200>
	for(;;){
 8000900:	e6e6      	b.n	80006d0 <Stergatoare+0xc>
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	20000090 	.word	0x20000090
 8000908:	40000400 	.word	0x40000400
 800090c:	000005aa 	.word	0x000005aa

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_MspInit+0x50>)
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_MspInit+0x50>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	619a      	str	r2, [r3, #24]
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x50>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x50>)
 800093c:	69da      	ldr	r2, [r3, #28]
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_MspInit+0x50>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0549      	lsls	r1, r1, #21
 8000944:	430a      	orrs	r2, r1
 8000946:	61da      	str	r2, [r3, #28]
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_MspInit+0x50>)
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	055b      	lsls	r3, r3, #21
 8000950:	4013      	ands	r3, r2
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000956:	2302      	movs	r3, #2
 8000958:	425b      	negs	r3, r3
 800095a:	2200      	movs	r2, #0
 800095c:	2103      	movs	r1, #3
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fef8 	bl	8001754 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b08b      	sub	sp, #44	; 0x2c
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	2414      	movs	r4, #20
 800097a:	193b      	adds	r3, r7, r4
 800097c:	0018      	movs	r0, r3
 800097e:	2314      	movs	r3, #20
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f005 fd19 	bl	80063ba <memset>
  if(hadc->Instance==ADC1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a35      	ldr	r2, [pc, #212]	; (8000a64 <HAL_ADC_MspInit+0xf4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d164      	bne.n	8000a5c <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000994:	699a      	ldr	r2, [r3, #24]
 8000996:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	0089      	lsls	r1, r1, #2
 800099c:	430a      	orrs	r2, r1
 800099e:	619a      	str	r2, [r3, #24]
 80009a0:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 80009a2:	699a      	ldr	r2, [r3, #24]
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	0289      	lsls	r1, r1, #10
 80009b8:	430a      	orrs	r2, r1
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 80009be:	695a      	ldr	r2, [r3, #20]
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	029b      	lsls	r3, r3, #10
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2213      	movs	r2, #19
 80009ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2203      	movs	r2, #3
 80009d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	193a      	adds	r2, r7, r4
 80009de:	2390      	movs	r3, #144	; 0x90
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 f89d 	bl	8001b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <HAL_ADC_MspInit+0x100>)
 80009ee:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	0092      	lsls	r2, r2, #2
 8000a08:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 8000a14:	2220      	movs	r2, #32
 8000a16:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 8000a1a:	22c0      	movs	r2, #192	; 0xc0
 8000a1c:	0192      	lsls	r2, r2, #6
 8000a1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fec8 	bl	80017b8 <HAL_DMA_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000a2c:	f7ff ff70 	bl	8000910 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8000a30:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_ADC_MspInit+0x104>)
 8000a32:	23a8      	movs	r3, #168	; 0xa8
 8000a34:	58d3      	ldr	r3, [r2, r3]
 8000a36:	490f      	ldr	r1, [pc, #60]	; (8000a74 <HAL_ADC_MspInit+0x104>)
 8000a38:	220f      	movs	r2, #15
 8000a3a:	4393      	bics	r3, r2
 8000a3c:	22a8      	movs	r2, #168	; 0xa8
 8000a3e:	508b      	str	r3, [r1, r2]
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <HAL_ADC_MspInit+0x104>)
 8000a42:	23a8      	movs	r3, #168	; 0xa8
 8000a44:	58d3      	ldr	r3, [r2, r3]
 8000a46:	490b      	ldr	r1, [pc, #44]	; (8000a74 <HAL_ADC_MspInit+0x104>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	22a8      	movs	r2, #168	; 0xa8
 8000a4e:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00b      	add	sp, #44	; 0x2c
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40012400 	.word	0x40012400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	200000d0 	.word	0x200000d0
 8000a70:	40020008 	.word	0x40020008
 8000a74:	40020000 	.word	0x40020000

08000a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <HAL_TIM_Base_MspInit+0xac>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d147      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000a8c:	69da      	ldr	r2, [r3, #28]
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000a90:	2102      	movs	r1, #2
 8000a92:	430a      	orrs	r2, r1
 8000a94:	61da      	str	r2, [r3, #28]
 8000a96:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <HAL_TIM_Base_MspInit+0xb0>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <HAL_TIM_Base_MspInit+0xb8>)
 8000aa6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000aaa:	2210      	movs	r2, #16
 8000aac:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	0052      	lsls	r2, r2, #1
 8000ac0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	00d2      	lsls	r2, r2, #3
 8000ac8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 fe6d 	bl	80017b8 <HAL_DMA_Init>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000ae2:	f7ff ff15 	bl	8000910 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_DEFAULT);
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <HAL_TIM_Base_MspInit+0xbc>)
 8000ae8:	23a8      	movs	r3, #168	; 0xa8
 8000aea:	58d3      	ldr	r3, [r2, r3]
 8000aec:	4911      	ldr	r1, [pc, #68]	; (8000b34 <HAL_TIM_Base_MspInit+0xbc>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <HAL_TIM_Base_MspInit+0xc0>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	22a8      	movs	r2, #168	; 0xa8
 8000af4:	508b      	str	r3, [r1, r2]
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_TIM_Base_MspInit+0xbc>)
 8000af8:	490e      	ldr	r1, [pc, #56]	; (8000b34 <HAL_TIM_Base_MspInit+0xbc>)
 8000afa:	23a8      	movs	r3, #168	; 0xa8
 8000afc:	58d3      	ldr	r3, [r2, r3]
 8000afe:	22a8      	movs	r2, #168	; 0xa8
 8000b00:	508b      	str	r3, [r1, r2]

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000b06:	631a      	str	r2, [r3, #48]	; 0x30
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000b12:	621a      	str	r2, [r3, #32]
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_TIM_Base_MspInit+0xb4>)
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b004      	add	sp, #16
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	40000400 	.word	0x40000400
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	2000015c 	.word	0x2000015c
 8000b30:	40020030 	.word	0x40020030
 8000b34:	40020000 	.word	0x40020000
 8000b38:	fffff0ff 	.word	0xfffff0ff

08000b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	240c      	movs	r4, #12
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	0018      	movs	r0, r3
 8000b4a:	2314      	movs	r3, #20
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f005 fc33 	bl	80063ba <memset>
  if(htim->Instance==TIM3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <HAL_TIM_MspPostInit+0x74>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d123      	bne.n	8000ba6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_TIM_MspPostInit+0x78>)
 8000b60:	695a      	ldr	r2, [r3, #20]
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_TIM_MspPostInit+0x78>)
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	02c9      	lsls	r1, r1, #11
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_TIM_MspPostInit+0x78>)
 8000b6e:	695a      	ldr	r2, [r3, #20]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	02db      	lsls	r3, r3, #11
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b7a:	0021      	movs	r1, r4
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2202      	movs	r2, #2
 8000b80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2202      	movs	r2, #2
 8000b86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2201      	movs	r2, #1
 8000b98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_TIM_MspPostInit+0x7c>)
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	f000 ffbf 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b009      	add	sp, #36	; 0x24
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	40000400 	.word	0x40000400
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000400 	.word	0x48000400

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b08b      	sub	sp, #44	; 0x2c
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	2414      	movs	r4, #20
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	0018      	movs	r0, r3
 8000bca:	2314      	movs	r3, #20
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f005 fbf3 	bl	80063ba <memset>
  if(huart->Instance==USART2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_UART_MspInit+0x90>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d132      	bne.n	8000c44 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_UART_MspInit+0x94>)
 8000be0:	69da      	ldr	r2, [r3, #28]
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_UART_MspInit+0x94>)
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	0289      	lsls	r1, r1, #10
 8000be8:	430a      	orrs	r2, r1
 8000bea:	61da      	str	r2, [r3, #28]
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_UART_MspInit+0x94>)
 8000bee:	69da      	ldr	r2, [r3, #28]
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	029b      	lsls	r3, r3, #10
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_UART_MspInit+0x94>)
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_UART_MspInit+0x94>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	0289      	lsls	r1, r1, #10
 8000c04:	430a      	orrs	r2, r1
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_UART_MspInit+0x94>)
 8000c0a:	695a      	ldr	r2, [r3, #20]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	029b      	lsls	r3, r3, #10
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c16:	0021      	movs	r1, r4
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2202      	movs	r2, #2
 8000c22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2201      	movs	r2, #1
 8000c34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	187a      	adds	r2, r7, r1
 8000c38:	2390      	movs	r3, #144	; 0x90
 8000c3a:	05db      	lsls	r3, r3, #23
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 ff70 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b00b      	add	sp, #44	; 0x2c
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40021000 	.word	0x40021000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f89a 	bl	8000d9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c68:	f004 fd06 	bl	8005678 <xTaskGetSchedulerState>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d001      	beq.n	8000c76 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c72:	f005 f991 	bl	8005f98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <DMA1_Ch1_IRQHandler+0x14>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fe46 	bl	8001914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	200000d0 	.word	0x200000d0

08000c94 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fe3a 	bl	8001914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	2000015c 	.word	0x2000015c

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ce2:	f7ff ffe3 	bl	8000cac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ce6:	f005 fb39 	bl	800635c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cea:	f7ff fa99 	bl	8000220 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   r0, =_estack
 8000cf0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cfc:	0800668c 	.word	0x0800668c
  ldr r2, =_sbss
 8000d00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d04:	20001c34 	.word	0x20001c34

08000d08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_COMP_IRQHandler>
	...

08000d0c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_Init+0x24>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_Init+0x24>)
 8000d16:	2110      	movs	r1, #16
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f809 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f7ff fdfb 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40022000 	.word	0x40022000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d3e:	681c      	ldr	r4, [r3, #0]
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_InitTick+0x60>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	0019      	movs	r1, r3
 8000d46:	23fa      	movs	r3, #250	; 0xfa
 8000d48:	0098      	lsls	r0, r3, #2
 8000d4a:	f7ff f9dd 	bl	8000108 <__udivsi3>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	0019      	movs	r1, r3
 8000d52:	0020      	movs	r0, r4
 8000d54:	f7ff f9d8 	bl	8000108 <__udivsi3>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 fd1f 	bl	800179e <HAL_SYSTICK_Config>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e00f      	b.n	8000d88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d80b      	bhi.n	8000d86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	2301      	movs	r3, #1
 8000d72:	425b      	negs	r3, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 fcec 	bl	8001754 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_InitTick+0x64>)
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	0018      	movs	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b003      	add	sp, #12
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	001a      	movs	r2, r3
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x20>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	18d2      	adds	r2, r2, r3
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_IncTick+0x20>)
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000228 	.word	0x20000228

08000dc0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <HAL_GetTick+0x10>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	20000228 	.word	0x20000228

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff fff0 	bl	8000dc0 <HAL_GetTick>
 8000de0:	0003      	movs	r3, r0
 8000de2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	001a      	movs	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	189b      	adds	r3, r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	f7ff ffe0 	bl	8000dc0 <HAL_GetTick>
 8000e00:	0002      	movs	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	20000008 	.word	0x20000008

08000e1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e125      	b.n	8001086 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10a      	bne.n	8000e58 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2234      	movs	r2, #52	; 0x34
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	0018      	movs	r0, r3
 8000e54:	f7ff fd8c 	bl	8000970 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d000      	beq.n	8000e64 <HAL_ADC_Init+0x48>
 8000e62:	e103      	b.n	800106c <HAL_ADC_Init+0x250>
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d000      	beq.n	8000e70 <HAL_ADC_Init+0x54>
 8000e6e:	e0fd      	b.n	800106c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2204      	movs	r2, #4
 8000e78:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000e7a:	d000      	beq.n	8000e7e <HAL_ADC_Init+0x62>
 8000e7c:	e0f6      	b.n	800106c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e82:	4a83      	ldr	r2, [pc, #524]	; (8001090 <HAL_ADC_Init+0x274>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	2202      	movs	r2, #2
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2203      	movs	r2, #3
 8000e96:	4013      	ands	r3, r2
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d112      	bne.n	8000ec2 <HAL_ADC_Init+0xa6>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d009      	beq.n	8000ebe <HAL_ADC_Init+0xa2>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	401a      	ands	r2, r3
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ADC_Init+0xa6>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_ADC_Init+0xa8>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d116      	bne.n	8000ef6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2218      	movs	r2, #24
 8000ed0:	4393      	bics	r3, r2
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	0899      	lsrs	r1, r3, #2
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4964      	ldr	r1, [pc, #400]	; (8001094 <HAL_ADC_Init+0x278>)
 8000f02:	400a      	ands	r2, r1
 8000f04:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7e1b      	ldrb	r3, [r3, #24]
 8000f0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7e5b      	ldrb	r3, [r3, #25]
 8000f10:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f12:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7e9b      	ldrb	r3, [r3, #26]
 8000f18:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d002      	beq.n	8000f2a <HAL_ADC_Init+0x10e>
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	015b      	lsls	r3, r3, #5
 8000f28:	e000      	b.n	8000f2c <HAL_ADC_Init+0x110>
 8000f2a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f2c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f32:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d101      	bne.n	8000f40 <HAL_ADC_Init+0x124>
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	e000      	b.n	8000f42 <HAL_ADC_Init+0x126>
 8000f40:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000f42:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2124      	movs	r1, #36	; 0x24
 8000f48:	5c5b      	ldrb	r3, [r3, r1]
 8000f4a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f4c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7edb      	ldrb	r3, [r3, #27]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d115      	bne.n	8000f88 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7e9b      	ldrb	r3, [r3, #26]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	0252      	lsls	r2, r2, #9
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	e00b      	b.n	8000f88 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f74:	2220      	movs	r2, #32
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f80:	2201      	movs	r2, #1
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69da      	ldr	r2, [r3, #28]
 8000f8c:	23c2      	movs	r3, #194	; 0xc2
 8000f8e:	33ff      	adds	r3, #255	; 0xff
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d007      	beq.n	8000fa4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68d9      	ldr	r1, [r3, #12]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	055b      	lsls	r3, r3, #21
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d01b      	beq.n	8000ff8 <HAL_ADC_Init+0x1dc>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d017      	beq.n	8000ff8 <HAL_ADC_Init+0x1dc>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d013      	beq.n	8000ff8 <HAL_ADC_Init+0x1dc>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d00f      	beq.n	8000ff8 <HAL_ADC_Init+0x1dc>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d00b      	beq.n	8000ff8 <HAL_ADC_Init+0x1dc>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d007      	beq.n	8000ff8 <HAL_ADC_Init+0x1dc>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	2b06      	cmp	r3, #6
 8000fee:	d003      	beq.n	8000ff8 <HAL_ADC_Init+0x1dc>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	2b07      	cmp	r3, #7
 8000ff6:	d112      	bne.n	800101e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2107      	movs	r1, #7
 8001004:	438a      	bics	r2, r1
 8001006:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6959      	ldr	r1, [r3, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	2207      	movs	r2, #7
 8001014:	401a      	ands	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <HAL_ADC_Init+0x27c>)
 8001026:	4013      	ands	r3, r2
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	429a      	cmp	r2, r3
 800102c:	d10b      	bne.n	8001046 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	2203      	movs	r2, #3
 800103a:	4393      	bics	r3, r2
 800103c:	2201      	movs	r2, #1
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001044:	e01c      	b.n	8001080 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	2212      	movs	r2, #18
 800104c:	4393      	bics	r3, r2
 800104e:	2210      	movs	r2, #16
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105a:	2201      	movs	r2, #1
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001062:	230f      	movs	r3, #15
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800106a:	e009      	b.n	8001080 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	2210      	movs	r2, #16
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001078:	230f      	movs	r3, #15
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001080:	230f      	movs	r3, #15
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	781b      	ldrb	r3, [r3, #0]
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	fffffefd 	.word	0xfffffefd
 8001094:	fffe0219 	.word	0xfffe0219
 8001098:	833fffe7 	.word	0x833fffe7

0800109c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a8:	2317      	movs	r3, #23
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2204      	movs	r2, #4
 80010b8:	4013      	ands	r3, r2
 80010ba:	d15e      	bne.n	800117a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2234      	movs	r2, #52	; 0x34
 80010c0:	5c9b      	ldrb	r3, [r3, r2]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d101      	bne.n	80010ca <HAL_ADC_Start_DMA+0x2e>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e05e      	b.n	8001188 <HAL_ADC_Start_DMA+0xec>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2234      	movs	r2, #52	; 0x34
 80010ce:	2101      	movs	r1, #1
 80010d0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	7e5b      	ldrb	r3, [r3, #25]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d007      	beq.n	80010ea <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80010da:	2317      	movs	r3, #23
 80010dc:	18fc      	adds	r4, r7, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 f983 	bl	80013ec <ADC_Enable>
 80010e6:	0003      	movs	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010ea:	2317      	movs	r3, #23
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d146      	bne.n	8001182 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f8:	4a25      	ldr	r2, [pc, #148]	; (8001190 <HAL_ADC_Start_DMA+0xf4>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	0052      	lsls	r2, r2, #1
 8001100:	431a      	orrs	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2234      	movs	r2, #52	; 0x34
 8001110:	2100      	movs	r1, #0
 8001112:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <HAL_ADC_Start_DMA+0xf8>)
 800111a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <HAL_ADC_Start_DMA+0xfc>)
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_ADC_Start_DMA+0x100>)
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	221c      	movs	r2, #28
 8001132:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2110      	movs	r1, #16
 8001140:	430a      	orrs	r2, r1
 8001142:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2101      	movs	r1, #1
 8001150:	430a      	orrs	r2, r1
 8001152:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3340      	adds	r3, #64	; 0x40
 800115e:	0019      	movs	r1, r3
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f000 fb70 	bl	8001848 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2104      	movs	r1, #4
 8001174:	430a      	orrs	r2, r1
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	e003      	b.n	8001182 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800117a:	2317      	movs	r3, #23
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	2202      	movs	r2, #2
 8001180:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001182:	2317      	movs	r3, #23
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	781b      	ldrb	r3, [r3, #0]
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b007      	add	sp, #28
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	fffff0fe 	.word	0xfffff0fe
 8001194:	080014f5 	.word	0x080014f5
 8001198:	080015a9 	.word	0x080015a9
 800119c:	080015c7 	.word	0x080015c7

080011a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b002      	add	sp, #8
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011da:	230f      	movs	r3, #15
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	055b      	lsls	r3, r3, #21
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d011      	beq.n	8001216 <HAL_ADC_ConfigChannel+0x46>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d00d      	beq.n	8001216 <HAL_ADC_ConfigChannel+0x46>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d009      	beq.n	8001216 <HAL_ADC_ConfigChannel+0x46>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	2b03      	cmp	r3, #3
 8001208:	d005      	beq.n	8001216 <HAL_ADC_ConfigChannel+0x46>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	2b04      	cmp	r3, #4
 8001210:	d001      	beq.n	8001216 <HAL_ADC_ConfigChannel+0x46>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2234      	movs	r2, #52	; 0x34
 800121a:	5c9b      	ldrb	r3, [r3, r2]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x54>
 8001220:	2302      	movs	r3, #2
 8001222:	e0d0      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x1f6>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2234      	movs	r2, #52	; 0x34
 8001228:	2101      	movs	r1, #1
 800122a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2204      	movs	r2, #4
 8001234:	4013      	ands	r3, r2
 8001236:	d000      	beq.n	800123a <HAL_ADC_ConfigChannel+0x6a>
 8001238:	e0b4      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a64      	ldr	r2, [pc, #400]	; (80013d0 <HAL_ADC_ConfigChannel+0x200>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d100      	bne.n	8001246 <HAL_ADC_ConfigChannel+0x76>
 8001244:	e082      	b.n	800134c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	409a      	lsls	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	055b      	lsls	r3, r3, #21
 8001264:	429a      	cmp	r2, r3
 8001266:	d037      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x108>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	2b01      	cmp	r3, #1
 800126e:	d033      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x108>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	2b02      	cmp	r3, #2
 8001276:	d02f      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x108>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2b03      	cmp	r3, #3
 800127e:	d02b      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2b04      	cmp	r3, #4
 8001286:	d027      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b05      	cmp	r3, #5
 800128e:	d023      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	2b06      	cmp	r3, #6
 8001296:	d01f      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x108>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	2b07      	cmp	r3, #7
 800129e:	d01b      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	2107      	movs	r1, #7
 80012ac:	400b      	ands	r3, r1
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d012      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2107      	movs	r1, #7
 80012be:	438a      	bics	r2, r1
 80012c0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6959      	ldr	r1, [r3, #20]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2207      	movs	r2, #7
 80012ce:	401a      	ands	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b10      	cmp	r3, #16
 80012de:	d007      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x120>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b11      	cmp	r3, #17
 80012e6:	d003      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x120>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b12      	cmp	r3, #18
 80012ee:	d163      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012f0:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <HAL_ADC_ConfigChannel+0x204>)
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b10      	cmp	r3, #16
 80012fa:	d009      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x140>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b11      	cmp	r3, #17
 8001302:	d102      	bne.n	800130a <HAL_ADC_ConfigChannel+0x13a>
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	03db      	lsls	r3, r3, #15
 8001308:	e004      	b.n	8001314 <HAL_ADC_ConfigChannel+0x144>
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	045b      	lsls	r3, r3, #17
 800130e:	e001      	b.n	8001314 <HAL_ADC_ConfigChannel+0x144>
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	041b      	lsls	r3, r3, #16
 8001314:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <HAL_ADC_ConfigChannel+0x204>)
 8001316:	430b      	orrs	r3, r1
 8001318:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b10      	cmp	r3, #16
 8001320:	d14a      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_ADC_ConfigChannel+0x208>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	492d      	ldr	r1, [pc, #180]	; (80013dc <HAL_ADC_ConfigChannel+0x20c>)
 8001328:	0018      	movs	r0, r3
 800132a:	f7fe feed 	bl	8000108 <__udivsi3>
 800132e:	0003      	movs	r3, r0
 8001330:	001a      	movs	r2, r3
 8001332:	0013      	movs	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	189b      	adds	r3, r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800133c:	e002      	b.n	8001344 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3b01      	subs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f9      	bne.n	800133e <HAL_ADC_ConfigChannel+0x16e>
 800134a:	e035      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2101      	movs	r1, #1
 8001358:	4099      	lsls	r1, r3
 800135a:	000b      	movs	r3, r1
 800135c:	43d9      	mvns	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	400a      	ands	r2, r1
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b10      	cmp	r3, #16
 800136c:	d007      	beq.n	800137e <HAL_ADC_ConfigChannel+0x1ae>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b11      	cmp	r3, #17
 8001374:	d003      	beq.n	800137e <HAL_ADC_ConfigChannel+0x1ae>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b12      	cmp	r3, #18
 800137c:	d11c      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_ADC_ConfigChannel+0x204>)
 8001380:	6819      	ldr	r1, [r3, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b10      	cmp	r3, #16
 8001388:	d007      	beq.n	800139a <HAL_ADC_ConfigChannel+0x1ca>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b11      	cmp	r3, #17
 8001390:	d101      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x1c6>
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_ConfigChannel+0x210>)
 8001394:	e002      	b.n	800139c <HAL_ADC_ConfigChannel+0x1cc>
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_ADC_ConfigChannel+0x214>)
 8001398:	e000      	b.n	800139c <HAL_ADC_ConfigChannel+0x1cc>
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_ADC_ConfigChannel+0x218>)
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_ADC_ConfigChannel+0x204>)
 800139e:	400b      	ands	r3, r1
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e009      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a8:	2220      	movs	r2, #32
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2234      	movs	r2, #52	; 0x34
 80013bc:	2100      	movs	r1, #0
 80013be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013c0:	230f      	movs	r3, #15
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	781b      	ldrb	r3, [r3, #0]
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b004      	add	sp, #16
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	00001001 	.word	0x00001001
 80013d4:	40012708 	.word	0x40012708
 80013d8:	20000000 	.word	0x20000000
 80013dc:	000f4240 	.word	0x000f4240
 80013e0:	ffbfffff 	.word	0xffbfffff
 80013e4:	feffffff 	.word	0xfeffffff
 80013e8:	ff7fffff 	.word	0xff7fffff

080013ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2203      	movs	r2, #3
 8001404:	4013      	ands	r3, r2
 8001406:	2b01      	cmp	r3, #1
 8001408:	d112      	bne.n	8001430 <ADC_Enable+0x44>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	2b01      	cmp	r3, #1
 8001416:	d009      	beq.n	800142c <ADC_Enable+0x40>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	401a      	ands	r2, r3
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	429a      	cmp	r2, r3
 800142a:	d101      	bne.n	8001430 <ADC_Enable+0x44>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <ADC_Enable+0x46>
 8001430:	2300      	movs	r3, #0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d152      	bne.n	80014dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a2a      	ldr	r2, [pc, #168]	; (80014e8 <ADC_Enable+0xfc>)
 800143e:	4013      	ands	r3, r2
 8001440:	d00d      	beq.n	800145e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	2210      	movs	r2, #16
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001452:	2201      	movs	r2, #1
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e03f      	b.n	80014de <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <ADC_Enable+0x100>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	491f      	ldr	r1, [pc, #124]	; (80014f0 <ADC_Enable+0x104>)
 8001474:	0018      	movs	r0, r3
 8001476:	f7fe fe47 	bl	8000108 <__udivsi3>
 800147a:	0003      	movs	r3, r0
 800147c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800147e:	e002      	b.n	8001486 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3b01      	subs	r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f9      	bne.n	8001480 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800148c:	f7ff fc98 	bl	8000dc0 <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001494:	e01b      	b.n	80014ce <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001496:	f7ff fc93 	bl	8000dc0 <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d914      	bls.n	80014ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d00d      	beq.n	80014ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	2210      	movs	r2, #16
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c2:	2201      	movs	r2, #1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e007      	b.n	80014de <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d1dc      	bne.n	8001496 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	80000017 	.word	0x80000017
 80014ec:	20000000 	.word	0x20000000
 80014f0:	000f4240 	.word	0x000f4240

080014f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001506:	2250      	movs	r2, #80	; 0x50
 8001508:	4013      	ands	r3, r2
 800150a:	d140      	bne.n	800158e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	431a      	orrs	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	23c0      	movs	r3, #192	; 0xc0
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4013      	ands	r3, r2
 8001526:	d12d      	bne.n	8001584 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800152c:	2b00      	cmp	r3, #0
 800152e:	d129      	bne.n	8001584 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2208      	movs	r2, #8
 8001538:	4013      	ands	r3, r2
 800153a:	2b08      	cmp	r3, #8
 800153c:	d122      	bne.n	8001584 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2204      	movs	r2, #4
 8001546:	4013      	ands	r3, r2
 8001548:	d110      	bne.n	800156c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	210c      	movs	r1, #12
 8001556:	438a      	bics	r2, r1
 8001558:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <ADC_DMAConvCplt+0xb0>)
 8001560:	4013      	ands	r3, r2
 8001562:	2201      	movs	r2, #1
 8001564:	431a      	orrs	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	639a      	str	r2, [r3, #56]	; 0x38
 800156a:	e00b      	b.n	8001584 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001570:	2220      	movs	r2, #32
 8001572:	431a      	orrs	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157c:	2201      	movs	r2, #1
 800157e:	431a      	orrs	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff fe0a 	bl	80011a0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800158c:	e005      	b.n	800159a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	0010      	movs	r0, r2
 8001598:	4798      	blx	r3
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	fffffefe 	.word	0xfffffefe

080015a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff fdf9 	bl	80011b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b004      	add	sp, #16
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d8:	2240      	movs	r2, #64	; 0x40
 80015da:	431a      	orrs	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e4:	2204      	movs	r2, #4
 80015e6:	431a      	orrs	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff fde6 	bl	80011c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b004      	add	sp, #16
 80015fa:	bd80      	pop	{r7, pc}

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	0002      	movs	r2, r0
 8001604:	1dfb      	adds	r3, r7, #7
 8001606:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b7f      	cmp	r3, #127	; 0x7f
 800160e:	d809      	bhi.n	8001624 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	001a      	movs	r2, r3
 8001616:	231f      	movs	r3, #31
 8001618:	401a      	ands	r2, r3
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_EnableIRQ+0x30>)
 800161c:	2101      	movs	r1, #1
 800161e:	4091      	lsls	r1, r2
 8001620:	000a      	movs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
  }
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	0002      	movs	r2, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b7f      	cmp	r3, #127	; 0x7f
 8001644:	d828      	bhi.n	8001698 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001646:	4a2f      	ldr	r2, [pc, #188]	; (8001704 <__NVIC_SetPriority+0xd4>)
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b25b      	sxtb	r3, r3
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	33c0      	adds	r3, #192	; 0xc0
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	589b      	ldr	r3, [r3, r2]
 8001656:	1dfa      	adds	r2, r7, #7
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	0011      	movs	r1, r2
 800165c:	2203      	movs	r2, #3
 800165e:	400a      	ands	r2, r1
 8001660:	00d2      	lsls	r2, r2, #3
 8001662:	21ff      	movs	r1, #255	; 0xff
 8001664:	4091      	lsls	r1, r2
 8001666:	000a      	movs	r2, r1
 8001668:	43d2      	mvns	r2, r2
 800166a:	401a      	ands	r2, r3
 800166c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	22ff      	movs	r2, #255	; 0xff
 8001674:	401a      	ands	r2, r3
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	0018      	movs	r0, r3
 800167c:	2303      	movs	r3, #3
 800167e:	4003      	ands	r3, r0
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001684:	481f      	ldr	r0, [pc, #124]	; (8001704 <__NVIC_SetPriority+0xd4>)
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b25b      	sxtb	r3, r3
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	430a      	orrs	r2, r1
 8001690:	33c0      	adds	r3, #192	; 0xc0
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001696:	e031      	b.n	80016fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <__NVIC_SetPriority+0xd8>)
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	0019      	movs	r1, r3
 80016a0:	230f      	movs	r3, #15
 80016a2:	400b      	ands	r3, r1
 80016a4:	3b08      	subs	r3, #8
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3306      	adds	r3, #6
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	18d3      	adds	r3, r2, r3
 80016ae:	3304      	adds	r3, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1dfa      	adds	r2, r7, #7
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	0011      	movs	r1, r2
 80016b8:	2203      	movs	r2, #3
 80016ba:	400a      	ands	r2, r1
 80016bc:	00d2      	lsls	r2, r2, #3
 80016be:	21ff      	movs	r1, #255	; 0xff
 80016c0:	4091      	lsls	r1, r2
 80016c2:	000a      	movs	r2, r1
 80016c4:	43d2      	mvns	r2, r2
 80016c6:	401a      	ands	r2, r3
 80016c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	019b      	lsls	r3, r3, #6
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	401a      	ands	r2, r3
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	0018      	movs	r0, r3
 80016d8:	2303      	movs	r3, #3
 80016da:	4003      	ands	r3, r0
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <__NVIC_SetPriority+0xd8>)
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	001c      	movs	r4, r3
 80016e8:	230f      	movs	r3, #15
 80016ea:	4023      	ands	r3, r4
 80016ec:	3b08      	subs	r3, #8
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	430a      	orrs	r2, r1
 80016f2:	3306      	adds	r3, #6
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	18c3      	adds	r3, r0, r3
 80016f8:	3304      	adds	r3, #4
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b003      	add	sp, #12
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	1e5a      	subs	r2, r3, #1
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	045b      	lsls	r3, r3, #17
 800171c:	429a      	cmp	r2, r3
 800171e:	d301      	bcc.n	8001724 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001720:	2301      	movs	r3, #1
 8001722:	e010      	b.n	8001746 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <SysTick_Config+0x44>)
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	3a01      	subs	r2, #1
 800172a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172c:	2301      	movs	r3, #1
 800172e:	425b      	negs	r3, r3
 8001730:	2103      	movs	r1, #3
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff ff7c 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x44>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x44>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	210f      	movs	r1, #15
 8001760:	187b      	adds	r3, r7, r1
 8001762:	1c02      	adds	r2, r0, #0
 8001764:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	187b      	adds	r3, r7, r1
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b25b      	sxtb	r3, r3
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b004      	add	sp, #16
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	0002      	movs	r2, r0
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b25b      	sxtb	r3, r3
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff ff33 	bl	80015fc <__NVIC_EnableIRQ>
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b002      	add	sp, #8
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff ffaf 	bl	800170c <SysTick_Config>
 80017ae:	0003      	movs	r3, r0
}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e036      	b.n	800183c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2221      	movs	r2, #33	; 0x21
 80017d2:	2102      	movs	r1, #2
 80017d4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_DMA_Init+0x8c>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0018      	movs	r0, r3
 8001820:	f000 f946 	bl	8001ab0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2221      	movs	r2, #33	; 0x21
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2220      	movs	r2, #32
 8001836:	2100      	movs	r1, #0
 8001838:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}  
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b004      	add	sp, #16
 8001842:	bd80      	pop	{r7, pc}
 8001844:	ffffc00f 	.word	0xffffc00f

08001848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001856:	2317      	movs	r3, #23
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2220      	movs	r2, #32
 8001862:	5c9b      	ldrb	r3, [r3, r2]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_DMA_Start_IT+0x24>
 8001868:	2302      	movs	r3, #2
 800186a:	e04f      	b.n	800190c <HAL_DMA_Start_IT+0xc4>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2220      	movs	r2, #32
 8001870:	2101      	movs	r1, #1
 8001872:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2221      	movs	r2, #33	; 0x21
 8001878:	5c9b      	ldrb	r3, [r3, r2]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d13a      	bne.n	80018f6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2221      	movs	r2, #33	; 0x21
 8001884:	2102      	movs	r1, #2
 8001886:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	438a      	bics	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 f8d7 	bl	8001a58 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	210e      	movs	r1, #14
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e00f      	b.n	80018e4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	210a      	movs	r1, #10
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2104      	movs	r1, #4
 80018e0:	438a      	bics	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2101      	movs	r1, #1
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e007      	b.n	8001906 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2220      	movs	r2, #32
 80018fa:	2100      	movs	r1, #0
 80018fc:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80018fe:	2317      	movs	r3, #23
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2202      	movs	r2, #2
 8001904:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001906:	2317      	movs	r3, #23
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	781b      	ldrb	r3, [r3, #0]
} 
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b006      	add	sp, #24
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	2204      	movs	r2, #4
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	d024      	beq.n	8001986 <HAL_DMA_IRQHandler+0x72>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	d020      	beq.n	8001986 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2220      	movs	r2, #32
 800194c:	4013      	ands	r3, r2
 800194e:	d107      	bne.n	8001960 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2104      	movs	r1, #4
 800195c:	438a      	bics	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001968:	2104      	movs	r1, #4
 800196a:	4091      	lsls	r1, r2
 800196c:	000a      	movs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d100      	bne.n	800197a <HAL_DMA_IRQHandler+0x66>
 8001978:	e06a      	b.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	0010      	movs	r0, r2
 8001982:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001984:	e064      	b.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	2202      	movs	r2, #2
 800198c:	409a      	lsls	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4013      	ands	r3, r2
 8001994:	d02b      	beq.n	80019ee <HAL_DMA_IRQHandler+0xda>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d027      	beq.n	80019ee <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2220      	movs	r2, #32
 80019a6:	4013      	ands	r3, r2
 80019a8:	d10b      	bne.n	80019c2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	210a      	movs	r1, #10
 80019b6:	438a      	bics	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2221      	movs	r2, #33	; 0x21
 80019be:	2101      	movs	r1, #1
 80019c0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ca:	2102      	movs	r1, #2
 80019cc:	4091      	lsls	r1, r2
 80019ce:	000a      	movs	r2, r1
 80019d0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2220      	movs	r2, #32
 80019d6:	2100      	movs	r1, #0
 80019d8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d036      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	0010      	movs	r0, r2
 80019ea:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80019ec:	e030      	b.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2208      	movs	r2, #8
 80019f4:	409a      	lsls	r2, r3
 80019f6:	0013      	movs	r3, r2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	d028      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2208      	movs	r2, #8
 8001a02:	4013      	ands	r3, r2
 8001a04:	d024      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	210e      	movs	r1, #14
 8001a12:	438a      	bics	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4091      	lsls	r1, r2
 8001a22:	000a      	movs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2221      	movs	r2, #33	; 0x21
 8001a30:	2101      	movs	r1, #1
 8001a32:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	0010      	movs	r0, r2
 8001a4c:	4798      	blx	r3
    }
   }
}  
 8001a4e:	e7ff      	b.n	8001a50 <HAL_DMA_IRQHandler+0x13c>
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4091      	lsls	r1, r2
 8001a72:	000a      	movs	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d108      	bne.n	8001a98 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a96:	e007      	b.n	8001aa8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b004      	add	sp, #16
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	001a      	movs	r2, r3
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <DMA_CalcBaseAndBitshift+0x60>)
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d810      	bhi.n	8001ae6 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <DMA_CalcBaseAndBitshift+0x64>)
 8001aca:	4694      	mov	ip, r2
 8001acc:	4463      	add	r3, ip
 8001ace:	2114      	movs	r1, #20
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7fe fb19 	bl	8000108 <__udivsi3>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	009a      	lsls	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <DMA_CalcBaseAndBitshift+0x68>)
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001ae4:	e00f      	b.n	8001b06 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <DMA_CalcBaseAndBitshift+0x6c>)
 8001aec:	4694      	mov	ip, r2
 8001aee:	4463      	add	r3, ip
 8001af0:	2114      	movs	r1, #20
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7fe fb08 	bl	8000108 <__udivsi3>
 8001af8:	0003      	movs	r3, r0
 8001afa:	009a      	lsls	r2, r3, #2
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <DMA_CalcBaseAndBitshift+0x70>)
 8001b04:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	40020407 	.word	0x40020407
 8001b14:	bffdfff8 	.word	0xbffdfff8
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	bffdfbf8 	.word	0xbffdfbf8
 8001b20:	40020400 	.word	0x40020400

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	e155      	b.n	8001de0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4091      	lsls	r1, r2
 8001b3e:	000a      	movs	r2, r1
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d100      	bne.n	8001b4c <HAL_GPIO_Init+0x28>
 8001b4a:	e146      	b.n	8001dda <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2203      	movs	r2, #3
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d005      	beq.n	8001b64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d130      	bne.n	8001bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	409a      	lsls	r2, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	43da      	mvns	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	409a      	lsls	r2, r3
 8001b86:	0013      	movs	r3, r2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d017      	beq.n	8001c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	409a      	lsls	r2, r3
 8001be0:	0013      	movs	r3, r2
 8001be2:	43da      	mvns	r2, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2203      	movs	r2, #3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d123      	bne.n	8001c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	58d3      	ldr	r3, [r2, r3]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2207      	movs	r2, #7
 8001c20:	4013      	ands	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2107      	movs	r1, #7
 8001c3a:	400b      	ands	r3, r1
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	6939      	ldr	r1, [r7, #16]
 8001c54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	409a      	lsls	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	43da      	mvns	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2203      	movs	r2, #3
 8001c74:	401a      	ands	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	23c0      	movs	r3, #192	; 0xc0
 8001c90:	029b      	lsls	r3, r3, #10
 8001c92:	4013      	ands	r3, r2
 8001c94:	d100      	bne.n	8001c98 <HAL_GPIO_Init+0x174>
 8001c96:	e0a0      	b.n	8001dda <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_GPIO_Init+0x2d4>)
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_GPIO_Init+0x2d4>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	619a      	str	r2, [r3, #24]
 8001ca4:	4b54      	ldr	r3, [pc, #336]	; (8001df8 <HAL_GPIO_Init+0x2d4>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb0:	4a52      	ldr	r2, [pc, #328]	; (8001dfc <HAL_GPIO_Init+0x2d8>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	589b      	ldr	r3, [r3, r2]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	0013      	movs	r3, r2
 8001ccc:	43da      	mvns	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	2390      	movs	r3, #144	; 0x90
 8001cd8:	05db      	lsls	r3, r3, #23
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d019      	beq.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_GPIO_Init+0x2dc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_Init+0x1ea>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a46      	ldr	r2, [pc, #280]	; (8001e04 <HAL_GPIO_Init+0x2e0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_Init+0x1e6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_GPIO_Init+0x2e4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x1e2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a44      	ldr	r2, [pc, #272]	; (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_Init+0x1de>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	e008      	b.n	8001d14 <HAL_GPIO_Init+0x1f0>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x1f0>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e004      	b.n	8001d14 <HAL_GPIO_Init+0x1f0>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_Init+0x1f0>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x1f0>
 8001d12:	2300      	movs	r3, #0
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	2103      	movs	r1, #3
 8001d18:	400a      	ands	r2, r1
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d24:	4935      	ldr	r1, [pc, #212]	; (8001dfc <HAL_GPIO_Init+0x2d8>)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	025b      	lsls	r3, r3, #9
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d56:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	43da      	mvns	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d80:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	035b      	lsls	r3, r3, #13
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43da      	mvns	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	039b      	lsls	r3, r3, #14
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	40da      	lsrs	r2, r3
 8001de8:	1e13      	subs	r3, r2, #0
 8001dea:	d000      	beq.n	8001dee <HAL_GPIO_Init+0x2ca>
 8001dec:	e6a2      	b.n	8001b34 <HAL_GPIO_Init+0x10>
  } 
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b006      	add	sp, #24
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	48000400 	.word	0x48000400
 8001e04:	48000800 	.word	0x48000800
 8001e08:	48000c00 	.word	0x48000c00
 8001e0c:	48001000 	.word	0x48001000
 8001e10:	40010400 	.word	0x40010400

08001e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	0008      	movs	r0, r1
 8001e1e:	0011      	movs	r1, r2
 8001e20:	1cbb      	adds	r3, r7, #2
 8001e22:	1c02      	adds	r2, r0, #0
 8001e24:	801a      	strh	r2, [r3, #0]
 8001e26:	1c7b      	adds	r3, r7, #1
 8001e28:	1c0a      	adds	r2, r1, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e2c:	1c7b      	adds	r3, r7, #1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e34:	1cbb      	adds	r3, r7, #2
 8001e36:	881a      	ldrh	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e3c:	e003      	b.n	8001e46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3e:	1cbb      	adds	r3, r7, #2
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b002      	add	sp, #8
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f000 fb76 	bl	8002550 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d100      	bne.n	8001e70 <HAL_RCC_OscConfig+0x20>
 8001e6e:	e08e      	b.n	8001f8e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e70:	4bc5      	ldr	r3, [pc, #788]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	220c      	movs	r2, #12
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d00e      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7c:	4bc2      	ldr	r3, [pc, #776]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	220c      	movs	r2, #12
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d117      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x68>
 8001e88:	4bbf      	ldr	r3, [pc, #764]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	23c0      	movs	r3, #192	; 0xc0
 8001e8e:	025b      	lsls	r3, r3, #9
 8001e90:	401a      	ands	r2, r3
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	025b      	lsls	r3, r3, #9
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d10e      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9a:	4bbb      	ldr	r3, [pc, #748]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d100      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x58>
 8001ea6:	e071      	b.n	8001f8c <HAL_RCC_OscConfig+0x13c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d000      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x62>
 8001eb0:	e06c      	b.n	8001f8c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f000 fb4c 	bl	8002550 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x80>
 8001ec0:	4bb1      	ldr	r3, [pc, #708]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4bb0      	ldr	r3, [pc, #704]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	0249      	lsls	r1, r1, #9
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e02f      	b.n	8001f30 <HAL_RCC_OscConfig+0xe0>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0xa2>
 8001ed8:	4bab      	ldr	r3, [pc, #684]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4baa      	ldr	r3, [pc, #680]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001ede:	49ab      	ldr	r1, [pc, #684]	; (800218c <HAL_RCC_OscConfig+0x33c>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	4ba8      	ldr	r3, [pc, #672]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4ba7      	ldr	r3, [pc, #668]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001eea:	49a9      	ldr	r1, [pc, #676]	; (8002190 <HAL_RCC_OscConfig+0x340>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e01e      	b.n	8001f30 <HAL_RCC_OscConfig+0xe0>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d10e      	bne.n	8001f18 <HAL_RCC_OscConfig+0xc8>
 8001efa:	4ba3      	ldr	r3, [pc, #652]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4ba2      	ldr	r3, [pc, #648]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	02c9      	lsls	r1, r1, #11
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4b9f      	ldr	r3, [pc, #636]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b9e      	ldr	r3, [pc, #632]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	0249      	lsls	r1, r1, #9
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xe0>
 8001f18:	4b9b      	ldr	r3, [pc, #620]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b9a      	ldr	r3, [pc, #616]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f1e:	499b      	ldr	r1, [pc, #620]	; (800218c <HAL_RCC_OscConfig+0x33c>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	4b98      	ldr	r3, [pc, #608]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b97      	ldr	r3, [pc, #604]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f2a:	4999      	ldr	r1, [pc, #612]	; (8002190 <HAL_RCC_OscConfig+0x340>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d014      	beq.n	8001f62 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe ff42 	bl	8000dc0 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f42:	f7fe ff3d 	bl	8000dc0 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b64      	cmp	r3, #100	; 0x64
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e2fd      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f54:	4b8c      	ldr	r3, [pc, #560]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	029b      	lsls	r3, r3, #10
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0xf2>
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe ff2d 	bl	8000dc0 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7fe ff28 	bl	8000dc0 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e2e8      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b82      	ldr	r3, [pc, #520]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	029b      	lsls	r3, r3, #10
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x11c>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d100      	bne.n	8001f9a <HAL_RCC_OscConfig+0x14a>
 8001f98:	e06c      	b.n	8002074 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f9a:	4b7b      	ldr	r3, [pc, #492]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fa4:	4b78      	ldr	r3, [pc, #480]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	220c      	movs	r2, #12
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d11f      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1a0>
 8001fb0:	4b75      	ldr	r3, [pc, #468]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	23c0      	movs	r3, #192	; 0xc0
 8001fb6:	025b      	lsls	r3, r3, #9
 8001fb8:	401a      	ands	r2, r3
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	4b71      	ldr	r3, [pc, #452]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x188>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e2bb      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b6b      	ldr	r3, [pc, #428]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	22f8      	movs	r2, #248	; 0xf8
 8001fde:	4393      	bics	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00da      	lsls	r2, r3, #3
 8001fe8:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e041      	b.n	8002074 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d024      	beq.n	8002042 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b62      	ldr	r3, [pc, #392]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe fedc 	bl	8000dc0 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200e:	f7fe fed7 	bl	8000dc0 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e297      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2202      	movs	r2, #2
 8002026:	4013      	ands	r3, r2
 8002028:	d0f1      	beq.n	800200e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b57      	ldr	r3, [pc, #348]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	22f8      	movs	r2, #248	; 0xf8
 8002030:	4393      	bics	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	00da      	lsls	r2, r3, #3
 800203a:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e018      	b.n	8002074 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002042:	4b51      	ldr	r3, [pc, #324]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8002048:	2101      	movs	r1, #1
 800204a:	438a      	bics	r2, r1
 800204c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7fe feb7 	bl	8000dc0 <HAL_GetTick>
 8002052:	0003      	movs	r3, r0
 8002054:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002058:	f7fe feb2 	bl	8000dc0 <HAL_GetTick>
 800205c:	0002      	movs	r2, r0
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e272      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d1f1      	bne.n	8002058 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2208      	movs	r2, #8
 800207a:	4013      	ands	r3, r2
 800207c:	d036      	beq.n	80020ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d019      	beq.n	80020ba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002086:	4b40      	ldr	r3, [pc, #256]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8002088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 800208c:	2101      	movs	r1, #1
 800208e:	430a      	orrs	r2, r1
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002092:	f7fe fe95 	bl	8000dc0 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe fe90 	bl	8000dc0 <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e250      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2202      	movs	r2, #2
 80020b4:	4013      	ands	r3, r2
 80020b6:	d0f1      	beq.n	800209c <HAL_RCC_OscConfig+0x24c>
 80020b8:	e018      	b.n	80020ec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ba:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 80020bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020be:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	438a      	bics	r2, r1
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7fe fe7b 	bl	8000dc0 <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d0:	f7fe fe76 	bl	8000dc0 <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e236      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d1f1      	bne.n	80020d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2204      	movs	r2, #4
 80020f2:	4013      	ands	r3, r2
 80020f4:	d100      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2a8>
 80020f6:	e0b5      	b.n	8002264 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f8:	201f      	movs	r0, #31
 80020fa:	183b      	adds	r3, r7, r0
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	055b      	lsls	r3, r3, #21
 8002108:	4013      	ands	r3, r2
 800210a:	d110      	bne.n	800212e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0549      	lsls	r1, r1, #21
 8002116:	430a      	orrs	r2, r1
 8002118:	61da      	str	r2, [r3, #28]
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 800211c:	69da      	ldr	r2, [r3, #28]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	055b      	lsls	r3, r3, #21
 8002122:	4013      	ands	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002128:	183b      	adds	r3, r7, r0
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_OscConfig+0x344>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4013      	ands	r3, r2
 8002138:	d11a      	bne.n	8002170 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_RCC_OscConfig+0x344>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_RCC_OscConfig+0x344>)
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	0049      	lsls	r1, r1, #1
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002148:	f7fe fe3a 	bl	8000dc0 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe fe35 	bl	8000dc0 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	; 0x64
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1f5      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_OscConfig+0x344>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4013      	ands	r3, r2
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10f      	bne.n	8002198 <HAL_RCC_OscConfig+0x348>
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 800217a:	6a1a      	ldr	r2, [r3, #32]
 800217c:	4b02      	ldr	r3, [pc, #8]	; (8002188 <HAL_RCC_OscConfig+0x338>)
 800217e:	2101      	movs	r1, #1
 8002180:	430a      	orrs	r2, r1
 8002182:	621a      	str	r2, [r3, #32]
 8002184:	e036      	b.n	80021f4 <HAL_RCC_OscConfig+0x3a4>
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	40021000 	.word	0x40021000
 800218c:	fffeffff 	.word	0xfffeffff
 8002190:	fffbffff 	.word	0xfffbffff
 8002194:	40007000 	.word	0x40007000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x36a>
 80021a0:	4bca      	ldr	r3, [pc, #808]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021a2:	6a1a      	ldr	r2, [r3, #32]
 80021a4:	4bc9      	ldr	r3, [pc, #804]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	438a      	bics	r2, r1
 80021aa:	621a      	str	r2, [r3, #32]
 80021ac:	4bc7      	ldr	r3, [pc, #796]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021ae:	6a1a      	ldr	r2, [r3, #32]
 80021b0:	4bc6      	ldr	r3, [pc, #792]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021b2:	2104      	movs	r1, #4
 80021b4:	438a      	bics	r2, r1
 80021b6:	621a      	str	r2, [r3, #32]
 80021b8:	e01c      	b.n	80021f4 <HAL_RCC_OscConfig+0x3a4>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x38c>
 80021c2:	4bc2      	ldr	r3, [pc, #776]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021c4:	6a1a      	ldr	r2, [r3, #32]
 80021c6:	4bc1      	ldr	r3, [pc, #772]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021c8:	2104      	movs	r1, #4
 80021ca:	430a      	orrs	r2, r1
 80021cc:	621a      	str	r2, [r3, #32]
 80021ce:	4bbf      	ldr	r3, [pc, #764]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021d0:	6a1a      	ldr	r2, [r3, #32]
 80021d2:	4bbe      	ldr	r3, [pc, #760]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	430a      	orrs	r2, r1
 80021d8:	621a      	str	r2, [r3, #32]
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0x3a4>
 80021dc:	4bbb      	ldr	r3, [pc, #748]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	4bba      	ldr	r3, [pc, #744]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	438a      	bics	r2, r1
 80021e6:	621a      	str	r2, [r3, #32]
 80021e8:	4bb8      	ldr	r3, [pc, #736]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	4bb7      	ldr	r3, [pc, #732]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80021ee:	2104      	movs	r1, #4
 80021f0:	438a      	bics	r2, r1
 80021f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d014      	beq.n	8002226 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fc:	f7fe fde0 	bl	8000dc0 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	e009      	b.n	800221a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7fe fddb 	bl	8000dc0 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	4aaf      	ldr	r2, [pc, #700]	; (80024d0 <HAL_RCC_OscConfig+0x680>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e19a      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221a:	4bac      	ldr	r3, [pc, #688]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x3b6>
 8002224:	e013      	b.n	800224e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe fdcb 	bl	8000dc0 <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222e:	e009      	b.n	8002244 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7fe fdc6 	bl	8000dc0 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	4aa5      	ldr	r2, [pc, #660]	; (80024d0 <HAL_RCC_OscConfig+0x680>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e185      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	4ba1      	ldr	r3, [pc, #644]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	2202      	movs	r2, #2
 800224a:	4013      	ands	r3, r2
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800224e:	231f      	movs	r3, #31
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002258:	4b9c      	ldr	r3, [pc, #624]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	4b9b      	ldr	r3, [pc, #620]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800225e:	499d      	ldr	r1, [pc, #628]	; (80024d4 <HAL_RCC_OscConfig+0x684>)
 8002260:	400a      	ands	r2, r1
 8002262:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2210      	movs	r2, #16
 800226a:	4013      	ands	r3, r2
 800226c:	d063      	beq.n	8002336 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d12a      	bne.n	80022cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002276:	4b95      	ldr	r3, [pc, #596]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227a:	4b94      	ldr	r3, [pc, #592]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800227c:	2104      	movs	r1, #4
 800227e:	430a      	orrs	r2, r1
 8002280:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002282:	4b92      	ldr	r3, [pc, #584]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002286:	4b91      	ldr	r3, [pc, #580]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fd97 	bl	8000dc0 <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002298:	f7fe fd92 	bl	8000dc0 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e152      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022aa:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	2202      	movs	r2, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d0f1      	beq.n	8002298 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022b4:	4b85      	ldr	r3, [pc, #532]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b8:	22f8      	movs	r2, #248	; 0xf8
 80022ba:	4393      	bics	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	00da      	lsls	r2, r3, #3
 80022c4:	4b81      	ldr	r3, [pc, #516]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
 80022ca:	e034      	b.n	8002336 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	3305      	adds	r3, #5
 80022d2:	d111      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80022d4:	4b7d      	ldr	r3, [pc, #500]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80022d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d8:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80022da:	2104      	movs	r1, #4
 80022dc:	438a      	bics	r2, r1
 80022de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022e0:	4b7a      	ldr	r3, [pc, #488]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80022e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e4:	22f8      	movs	r2, #248	; 0xf8
 80022e6:	4393      	bics	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	00da      	lsls	r2, r3, #3
 80022f0:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34
 80022f6:	e01e      	b.n	8002336 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022f8:	4b74      	ldr	r3, [pc, #464]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80022fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fc:	4b73      	ldr	r3, [pc, #460]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80022fe:	2104      	movs	r1, #4
 8002300:	430a      	orrs	r2, r1
 8002302:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002304:	4b71      	ldr	r3, [pc, #452]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002308:	4b70      	ldr	r3, [pc, #448]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800230a:	2101      	movs	r1, #1
 800230c:	438a      	bics	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe fd56 	bl	8000dc0 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800231a:	f7fe fd51 	bl	8000dc0 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e111      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800232c:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	2202      	movs	r2, #2
 8002332:	4013      	ands	r3, r2
 8002334:	d1f1      	bne.n	800231a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2220      	movs	r2, #32
 800233c:	4013      	ands	r3, r2
 800233e:	d05c      	beq.n	80023fa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002340:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	220c      	movs	r2, #12
 8002346:	4013      	ands	r3, r2
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d00e      	beq.n	800236a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800234c:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	220c      	movs	r2, #12
 8002352:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002354:	2b08      	cmp	r3, #8
 8002356:	d114      	bne.n	8002382 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002358:	4b5c      	ldr	r3, [pc, #368]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	23c0      	movs	r3, #192	; 0xc0
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	401a      	ands	r2, r3
 8002362:	23c0      	movs	r3, #192	; 0xc0
 8002364:	025b      	lsls	r3, r3, #9
 8002366:	429a      	cmp	r2, r3
 8002368:	d10b      	bne.n	8002382 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800236a:	4b58      	ldr	r3, [pc, #352]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800236c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	4013      	ands	r3, r2
 8002374:	d040      	beq.n	80023f8 <HAL_RCC_OscConfig+0x5a8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d03c      	beq.n	80023f8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0e6      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800238a:	4b50      	ldr	r3, [pc, #320]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800238c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238e:	4b4f      	ldr	r3, [pc, #316]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	0249      	lsls	r1, r1, #9
 8002394:	430a      	orrs	r2, r1
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fd12 	bl	8000dc0 <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a2:	f7fe fd0d 	bl	8000dc0 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0cd      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023b4:	4b45      	ldr	r3, [pc, #276]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80023b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	025b      	lsls	r3, r3, #9
 80023bc:	4013      	ands	r3, r2
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x552>
 80023c0:	e01b      	b.n	80023fa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023c2:	4b42      	ldr	r3, [pc, #264]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80023c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80023c8:	4943      	ldr	r1, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x688>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fcf7 	bl	8000dc0 <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023d8:	f7fe fcf2 	bl	8000dc0 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e0b2      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023ea:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80023ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	025b      	lsls	r3, r3, #9
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x588>
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023f8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d100      	bne.n	8002404 <HAL_RCC_OscConfig+0x5b4>
 8002402:	e0a4      	b.n	800254e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	220c      	movs	r2, #12
 800240a:	4013      	ands	r3, r2
 800240c:	2b08      	cmp	r3, #8
 800240e:	d100      	bne.n	8002412 <HAL_RCC_OscConfig+0x5c2>
 8002410:	e078      	b.n	8002504 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	2b02      	cmp	r3, #2
 8002418:	d14c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002420:	492e      	ldr	r1, [pc, #184]	; (80024dc <HAL_RCC_OscConfig+0x68c>)
 8002422:	400a      	ands	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe fccb 	bl	8000dc0 <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fcc6 	bl	8000dc0 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e086      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	049b      	lsls	r3, r3, #18
 800244a:	4013      	ands	r3, r2
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244e:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	220f      	movs	r2, #15
 8002454:	4393      	bics	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800245e:	430a      	orrs	r2, r1
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <HAL_RCC_OscConfig+0x690>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	431a      	orrs	r2, r3
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002478:	430a      	orrs	r2, r1
 800247a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	0449      	lsls	r1, r1, #17
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe fc99 	bl	8000dc0 <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe fc94 	bl	8000dc0 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e054      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	049b      	lsls	r3, r3, #18
 80024ae:	4013      	ands	r3, r2
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x644>
 80024b2:	e04c      	b.n	800254e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_RCC_OscConfig+0x67c>)
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <HAL_RCC_OscConfig+0x68c>)
 80024bc:	400a      	ands	r2, r1
 80024be:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fc7e 	bl	8000dc0 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	e015      	b.n	80024f6 <HAL_RCC_OscConfig+0x6a6>
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	40021000 	.word	0x40021000
 80024d0:	00001388 	.word	0x00001388
 80024d4:	efffffff 	.word	0xefffffff
 80024d8:	fffeffff 	.word	0xfffeffff
 80024dc:	feffffff 	.word	0xfeffffff
 80024e0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fc6c 	bl	8000dc0 <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e02c      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_RCC_OscConfig+0x708>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	049b      	lsls	r3, r3, #18
 80024fe:	4013      	ands	r3, r2
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x694>
 8002502:	e024      	b.n	800254e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e01f      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_RCC_OscConfig+0x708>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCC_OscConfig+0x708>)
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	23c0      	movs	r3, #192	; 0xc0
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	401a      	ands	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	429a      	cmp	r2, r3
 800252a:	d10e      	bne.n	800254a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	220f      	movs	r2, #15
 8002530:	401a      	ands	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d107      	bne.n	800254a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	23f0      	movs	r3, #240	; 0xf0
 800253e:	039b      	lsls	r3, r3, #14
 8002540:	401a      	ands	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	b008      	add	sp, #32
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0bf      	b.n	80026f0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_RCC_ClockConfig+0x19c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d911      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <HAL_RCC_ClockConfig+0x19c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	4393      	bics	r3, r2
 8002586:	0019      	movs	r1, r3
 8002588:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_RCC_ClockConfig+0x19c>)
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002590:	4b59      	ldr	r3, [pc, #356]	; (80026f8 <HAL_RCC_ClockConfig+0x19c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0a6      	b.n	80026f0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2202      	movs	r2, #2
 80025a8:	4013      	ands	r3, r2
 80025aa:	d015      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2204      	movs	r2, #4
 80025b2:	4013      	ands	r3, r2
 80025b4:	d006      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025b6:	4b51      	ldr	r3, [pc, #324]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 80025bc:	21e0      	movs	r1, #224	; 0xe0
 80025be:	00c9      	lsls	r1, r1, #3
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	22f0      	movs	r2, #240	; 0xf0
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 80025d4:	430a      	orrs	r2, r1
 80025d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	d04c      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	029b      	lsls	r3, r3, #10
 80025f2:	4013      	ands	r3, r2
 80025f4:	d120      	bne.n	8002638 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07a      	b.n	80026f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	049b      	lsls	r3, r3, #18
 800260a:	4013      	ands	r3, r2
 800260c:	d114      	bne.n	8002638 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e06e      	b.n	80026f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 800261c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	025b      	lsls	r3, r3, #9
 8002622:	4013      	ands	r3, r2
 8002624:	d108      	bne.n	8002638 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e062      	b.n	80026f0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2202      	movs	r2, #2
 8002630:	4013      	ands	r3, r2
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e05b      	b.n	80026f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2203      	movs	r2, #3
 800263e:	4393      	bics	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 8002648:	430a      	orrs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7fe fbb8 	bl	8000dc0 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002654:	e009      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002656:	f7fe fbb3 	bl	8000dc0 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	4a27      	ldr	r2, [pc, #156]	; (8002700 <HAL_RCC_ClockConfig+0x1a4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e042      	b.n	80026f0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	220c      	movs	r2, #12
 8002670:	401a      	ands	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1ec      	bne.n	8002656 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_RCC_ClockConfig+0x19c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2201      	movs	r2, #1
 8002682:	4013      	ands	r3, r2
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d211      	bcs.n	80026ae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_ClockConfig+0x19c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2201      	movs	r2, #1
 8002690:	4393      	bics	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_RCC_ClockConfig+0x19c>)
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_RCC_ClockConfig+0x19c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e020      	b.n	80026f0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2204      	movs	r2, #4
 80026b4:	4013      	ands	r3, r2
 80026b6:	d009      	beq.n	80026cc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_RCC_ClockConfig+0x1a8>)
 80026be:	4013      	ands	r3, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026cc:	f000 f820 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 80026d0:	0001      	movs	r1, r0
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_RCC_ClockConfig+0x1a0>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	220f      	movs	r2, #15
 80026da:	4013      	ands	r3, r2
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_RCC_ClockConfig+0x1ac>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	000a      	movs	r2, r1
 80026e2:	40da      	lsrs	r2, r3
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x1b0>)
 80026e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f7fe fb23 	bl	8000d34 <HAL_InitTick>
  
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b004      	add	sp, #16
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40022000 	.word	0x40022000
 80026fc:	40021000 	.word	0x40021000
 8002700:	00001388 	.word	0x00001388
 8002704:	fffff8ff 	.word	0xfffff8ff
 8002708:	080065e4 	.word	0x080065e4
 800270c:	20000000 	.word	0x20000000

08002710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b08f      	sub	sp, #60	; 0x3c
 8002714:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002716:	2314      	movs	r3, #20
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	4a38      	ldr	r2, [pc, #224]	; (80027fc <HAL_RCC_GetSysClockFreq+0xec>)
 800271c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800271e:	c313      	stmia	r3!, {r0, r1, r4}
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	4a36      	ldr	r2, [pc, #216]	; (8002800 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002728:	ca13      	ldmia	r2!, {r0, r1, r4}
 800272a:	c313      	stmia	r3!, {r0, r1, r4}
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002734:	2300      	movs	r3, #0
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
 8002738:	2300      	movs	r3, #0
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002744:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	220c      	movs	r2, #12
 800274e:	4013      	ands	r3, r2
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d047      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0xd4>
 8002754:	d849      	bhi.n	80027ea <HAL_RCC_GetSysClockFreq+0xda>
 8002756:	2b04      	cmp	r3, #4
 8002758:	d002      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x50>
 800275a:	2b08      	cmp	r3, #8
 800275c:	d003      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x56>
 800275e:	e044      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002764:	e044      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	0c9b      	lsrs	r3, r3, #18
 800276a:	220f      	movs	r2, #15
 800276c:	4013      	ands	r3, r2
 800276e:	2214      	movs	r2, #20
 8002770:	18ba      	adds	r2, r7, r2
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002776:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	220f      	movs	r2, #15
 800277c:	4013      	ands	r3, r2
 800277e:	1d3a      	adds	r2, r7, #4
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002786:	23c0      	movs	r3, #192	; 0xc0
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	401a      	ands	r2, r3
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	025b      	lsls	r3, r3, #9
 8002790:	429a      	cmp	r2, r3
 8002792:	d109      	bne.n	80027a8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002796:	481c      	ldr	r0, [pc, #112]	; (8002808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002798:	f7fd fcb6 	bl	8000108 <__udivsi3>
 800279c:	0003      	movs	r3, r0
 800279e:	001a      	movs	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	4353      	muls	r3, r2
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
 80027a6:	e01a      	b.n	80027de <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80027a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027aa:	23c0      	movs	r3, #192	; 0xc0
 80027ac:	025b      	lsls	r3, r3, #9
 80027ae:	401a      	ands	r2, r3
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	025b      	lsls	r3, r3, #9
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d109      	bne.n	80027cc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ba:	4814      	ldr	r0, [pc, #80]	; (800280c <HAL_RCC_GetSysClockFreq+0xfc>)
 80027bc:	f7fd fca4 	bl	8000108 <__udivsi3>
 80027c0:	0003      	movs	r3, r0
 80027c2:	001a      	movs	r2, r3
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	4353      	muls	r3, r2
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
 80027ca:	e008      	b.n	80027de <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ce:	480e      	ldr	r0, [pc, #56]	; (8002808 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d0:	f7fd fc9a 	bl	8000108 <__udivsi3>
 80027d4:	0003      	movs	r3, r0
 80027d6:	001a      	movs	r2, r3
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	4353      	muls	r3, r2
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027e2:	e005      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_GetSysClockFreq+0xfc>)
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027e8:	e002      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b00f      	add	sp, #60	; 0x3c
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	08006588 	.word	0x08006588
 8002800:	08006598 	.word	0x08006598
 8002804:	40021000 	.word	0x40021000
 8002808:	007a1200 	.word	0x007a1200
 800280c:	02dc6c00 	.word	0x02dc6c00

08002810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002814:	4b02      	ldr	r3, [pc, #8]	; (8002820 <HAL_RCC_GetHCLKFreq+0x10>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	20000000 	.word	0x20000000

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002828:	f7ff fff2 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 800282c:	0001      	movs	r1, r0
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	2207      	movs	r2, #7
 8002836:	4013      	ands	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_RCC_GetPCLK1Freq+0x28>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	40d9      	lsrs	r1, r3
 800283e:	000b      	movs	r3, r1
}    
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40021000 	.word	0x40021000
 800284c:	080065f4 	.word	0x080065f4

08002850 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	025b      	lsls	r3, r3, #9
 8002868:	4013      	ands	r3, r2
 800286a:	d100      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800286c:	e08e      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2017      	movs	r0, #23
 8002870:	183b      	adds	r3, r7, r0
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b6e      	ldr	r3, [pc, #440]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	055b      	lsls	r3, r3, #21
 800287e:	4013      	ands	r3, r2
 8002880:	d110      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b6b      	ldr	r3, [pc, #428]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	4b6a      	ldr	r3, [pc, #424]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002888:	2180      	movs	r1, #128	; 0x80
 800288a:	0549      	lsls	r1, r1, #21
 800288c:	430a      	orrs	r2, r1
 800288e:	61da      	str	r2, [r3, #28]
 8002890:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	055b      	lsls	r3, r3, #21
 8002898:	4013      	ands	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d11a      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b0:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b5f      	ldr	r3, [pc, #380]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	0049      	lsls	r1, r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe fa7f 	bl	8000dc0 <HAL_GetTick>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	e008      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c8:	f7fe fa7a 	bl	8000dc0 <HAL_GetTick>
 80028cc:	0002      	movs	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0a6      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4013      	ands	r3, r2
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e6:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028e8:	6a1a      	ldr	r2, [r3, #32]
 80028ea:	23c0      	movs	r3, #192	; 0xc0
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d034      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	23c0      	movs	r3, #192	; 0xc0
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4013      	ands	r3, r2
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	429a      	cmp	r2, r3
 8002906:	d02c      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a4a      	ldr	r2, [pc, #296]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800290e:	4013      	ands	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002914:	6a1a      	ldr	r2, [r3, #32]
 8002916:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	0249      	lsls	r1, r1, #9
 800291c:	430a      	orrs	r2, r1
 800291e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002920:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002926:	4945      	ldr	r1, [pc, #276]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002928:	400a      	ands	r2, r1
 800292a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800292c:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	4013      	ands	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe fa41 	bl	8000dc0 <HAL_GetTick>
 800293e:	0003      	movs	r3, r0
 8002940:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	e009      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7fe fa3c 	bl	8000dc0 <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	4a3c      	ldr	r2, [pc, #240]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e067      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d0f0      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002972:	430a      	orrs	r2, r1
 8002974:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002976:	2317      	movs	r3, #23
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002986:	492f      	ldr	r1, [pc, #188]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002988:	400a      	ands	r2, r1
 800298a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	4013      	ands	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	2203      	movs	r2, #3
 800299c:	4393      	bics	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029c4:	430a      	orrs	r2, r1
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	02db      	lsls	r3, r3, #11
 80029d0:	4013      	ands	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2220      	movs	r2, #32
 80029ee:	4013      	ands	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	2210      	movs	r2, #16
 80029f8:	4393      	bics	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a02:	430a      	orrs	r2, r1
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	2240      	movs	r2, #64	; 0x40
 8002a18:	4393      	bics	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a22:	430a      	orrs	r2, r1
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b006      	add	sp, #24
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
 8002a38:	fffffcff 	.word	0xfffffcff
 8002a3c:	fffeffff 	.word	0xfffeffff
 8002a40:	00001388 	.word	0x00001388
 8002a44:	efffffff 	.word	0xefffffff
 8002a48:	fffcffff 	.word	0xfffcffff
 8002a4c:	fff3ffff 	.word	0xfff3ffff

08002a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e042      	b.n	8002ae8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	223d      	movs	r2, #61	; 0x3d
 8002a66:	5c9b      	ldrb	r3, [r3, r2]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	223c      	movs	r2, #60	; 0x3c
 8002a72:	2100      	movs	r1, #0
 8002a74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fd fffd 	bl	8000a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223d      	movs	r2, #61	; 0x3d
 8002a82:	2102      	movs	r1, #2
 8002a84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	0019      	movs	r1, r3
 8002a90:	0010      	movs	r0, r2
 8002a92:	f000 fad7 	bl	8003044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2246      	movs	r2, #70	; 0x46
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	223e      	movs	r2, #62	; 0x3e
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223f      	movs	r2, #63	; 0x3f
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2241      	movs	r2, #65	; 0x41
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2242      	movs	r2, #66	; 0x42
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2243      	movs	r2, #67	; 0x43
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2244      	movs	r2, #68	; 0x44
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2245      	movs	r2, #69	; 0x45
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	223d      	movs	r2, #61	; 0x3d
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b002      	add	sp, #8
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e042      	b.n	8002b88 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	223d      	movs	r2, #61	; 0x3d
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d107      	bne.n	8002b1e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	223c      	movs	r2, #60	; 0x3c
 8002b12:	2100      	movs	r1, #0
 8002b14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 f839 	bl	8002b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	223d      	movs	r2, #61	; 0x3d
 8002b22:	2102      	movs	r1, #2
 8002b24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	0019      	movs	r1, r3
 8002b30:	0010      	movs	r0, r2
 8002b32:	f000 fa87 	bl	8003044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2246      	movs	r2, #70	; 0x46
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	223e      	movs	r2, #62	; 0x3e
 8002b42:	2101      	movs	r1, #1
 8002b44:	5499      	strb	r1, [r3, r2]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	223f      	movs	r2, #63	; 0x3f
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5499      	strb	r1, [r3, r2]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2240      	movs	r2, #64	; 0x40
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2241      	movs	r2, #65	; 0x41
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2242      	movs	r2, #66	; 0x42
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2243      	movs	r2, #67	; 0x43
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2244      	movs	r2, #68	; 0x44
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2245      	movs	r2, #69	; 0x45
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	223d      	movs	r2, #61	; 0x3d
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d108      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0x22>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	223e      	movs	r2, #62	; 0x3e
 8002bb4:	5c9b      	ldrb	r3, [r3, r2]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	1e5a      	subs	r2, r3, #1
 8002bbc:	4193      	sbcs	r3, r2
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e01f      	b.n	8002c02 <HAL_TIM_PWM_Start+0x62>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d108      	bne.n	8002bda <HAL_TIM_PWM_Start+0x3a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	223f      	movs	r2, #63	; 0x3f
 8002bcc:	5c9b      	ldrb	r3, [r3, r2]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	1e5a      	subs	r2, r3, #1
 8002bd4:	4193      	sbcs	r3, r2
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	e013      	b.n	8002c02 <HAL_TIM_PWM_Start+0x62>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d108      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x52>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2240      	movs	r2, #64	; 0x40
 8002be4:	5c9b      	ldrb	r3, [r3, r2]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	1e5a      	subs	r2, r3, #1
 8002bec:	4193      	sbcs	r3, r2
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	e007      	b.n	8002c02 <HAL_TIM_PWM_Start+0x62>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2241      	movs	r2, #65	; 0x41
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	4193      	sbcs	r3, r2
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e074      	b.n	8002cf4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d104      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x7a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	223e      	movs	r2, #62	; 0x3e
 8002c14:	2102      	movs	r1, #2
 8002c16:	5499      	strb	r1, [r3, r2]
 8002c18:	e013      	b.n	8002c42 <HAL_TIM_PWM_Start+0xa2>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d104      	bne.n	8002c2a <HAL_TIM_PWM_Start+0x8a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	223f      	movs	r2, #63	; 0x3f
 8002c24:	2102      	movs	r1, #2
 8002c26:	5499      	strb	r1, [r3, r2]
 8002c28:	e00b      	b.n	8002c42 <HAL_TIM_PWM_Start+0xa2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d104      	bne.n	8002c3a <HAL_TIM_PWM_Start+0x9a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	2102      	movs	r1, #2
 8002c36:	5499      	strb	r1, [r3, r2]
 8002c38:	e003      	b.n	8002c42 <HAL_TIM_PWM_Start+0xa2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2241      	movs	r2, #65	; 0x41
 8002c3e:	2102      	movs	r1, #2
 8002c40:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f000 fd10 	bl	8003670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a29      	ldr	r2, [pc, #164]	; (8002cfc <HAL_TIM_PWM_Start+0x15c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00e      	beq.n	8002c78 <HAL_TIM_PWM_Start+0xd8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <HAL_TIM_PWM_Start+0x160>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d009      	beq.n	8002c78 <HAL_TIM_PWM_Start+0xd8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <HAL_TIM_PWM_Start+0x164>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <HAL_TIM_PWM_Start+0xd8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <HAL_TIM_PWM_Start+0x168>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_TIM_PWM_Start+0xdc>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <HAL_TIM_PWM_Start+0xde>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0209      	lsls	r1, r1, #8
 8002c90:	430a      	orrs	r2, r1
 8002c92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_TIM_PWM_Start+0x15c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00f      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x11e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	05db      	lsls	r3, r3, #23
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d009      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x11e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_TIM_PWM_Start+0x16c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x11e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <HAL_TIM_PWM_Start+0x160>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d111      	bne.n	8002ce2 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d010      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2101      	movs	r1, #1
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce0:	e007      	b.n	8002cf2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b004      	add	sp, #16
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40014400 	.word	0x40014400
 8002d08:	40014800 	.word	0x40014800
 8002d0c:	40000400 	.word	0x40000400

08002d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2317      	movs	r3, #23
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	223c      	movs	r2, #60	; 0x3c
 8002d28:	5c9b      	ldrb	r3, [r3, r2]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0ad      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	223c      	movs	r2, #60	; 0x3c
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d100      	bne.n	8002d42 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d40:	e076      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d900      	bls.n	8002d4a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002d48:	e095      	b.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d04e      	beq.n	8002dee <HAL_TIM_PWM_ConfigChannel+0xde>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d900      	bls.n	8002d58 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002d56:	e08e      	b.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d021      	beq.n	8002da8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002d64:	e087      	b.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	0011      	movs	r1, r2
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 f9e8 	bl	8003144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2108      	movs	r1, #8
 8002d80:	430a      	orrs	r2, r1
 8002d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2104      	movs	r1, #4
 8002d90:	438a      	bics	r2, r1
 8002d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6999      	ldr	r1, [r3, #24]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	619a      	str	r2, [r3, #24]
      break;
 8002da6:	e06b      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	0011      	movs	r1, r2
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 fa4f 	bl	8003254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0109      	lsls	r1, r1, #4
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4931      	ldr	r1, [pc, #196]	; (8002e98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6999      	ldr	r1, [r3, #24]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	021a      	lsls	r2, r3, #8
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	619a      	str	r2, [r3, #24]
      break;
 8002dec:	e048      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	0011      	movs	r1, r2
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 fab0 	bl	800335c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2108      	movs	r1, #8
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2104      	movs	r1, #4
 8002e18:	438a      	bics	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69d9      	ldr	r1, [r3, #28]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	61da      	str	r2, [r3, #28]
      break;
 8002e2e:	e027      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	0011      	movs	r1, r2
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 fb15 	bl	8003468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2180      	movs	r1, #128	; 0x80
 8002e4a:	0109      	lsls	r1, r1, #4
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	490f      	ldr	r1, [pc, #60]	; (8002e98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69d9      	ldr	r1, [r3, #28]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	021a      	lsls	r2, r3, #8
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	61da      	str	r2, [r3, #28]
      break;
 8002e74:	e004      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002e76:	2317      	movs	r3, #23
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
      break;
 8002e7e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	223c      	movs	r2, #60	; 0x3c
 8002e84:	2100      	movs	r1, #0
 8002e86:	5499      	strb	r1, [r3, r2]

  return status;
 8002e88:	2317      	movs	r3, #23
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b006      	add	sp, #24
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	fffffbff 	.word	0xfffffbff

08002e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	230f      	movs	r3, #15
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	223c      	movs	r2, #60	; 0x3c
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIM_ConfigClockSource+0x20>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0bc      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x19a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	223c      	movs	r2, #60	; 0x3c
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	223d      	movs	r2, #61	; 0x3d
 8002ec8:	2102      	movs	r1, #2
 8002eca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2277      	movs	r2, #119	; 0x77
 8002ed8:	4393      	bics	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	0192      	lsls	r2, r2, #6
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d040      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xde>
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	0192      	lsls	r2, r2, #6
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d900      	bls.n	8002f02 <HAL_TIM_ConfigClockSource+0x66>
 8002f00:	e088      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
 8002f02:	2280      	movs	r2, #128	; 0x80
 8002f04:	0152      	lsls	r2, r2, #5
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d100      	bne.n	8002f0c <HAL_TIM_ConfigClockSource+0x70>
 8002f0a:	e088      	b.n	800301e <HAL_TIM_ConfigClockSource+0x182>
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	0152      	lsls	r2, r2, #5
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d900      	bls.n	8002f16 <HAL_TIM_ConfigClockSource+0x7a>
 8002f14:	e07e      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
 8002f16:	2b70      	cmp	r3, #112	; 0x70
 8002f18:	d018      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0xb0>
 8002f1a:	d900      	bls.n	8002f1e <HAL_TIM_ConfigClockSource+0x82>
 8002f1c:	e07a      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
 8002f1e:	2b60      	cmp	r3, #96	; 0x60
 8002f20:	d04f      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x126>
 8002f22:	d900      	bls.n	8002f26 <HAL_TIM_ConfigClockSource+0x8a>
 8002f24:	e076      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
 8002f26:	2b50      	cmp	r3, #80	; 0x50
 8002f28:	d03b      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x106>
 8002f2a:	d900      	bls.n	8002f2e <HAL_TIM_ConfigClockSource+0x92>
 8002f2c:	e072      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d057      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0x146>
 8002f32:	d900      	bls.n	8002f36 <HAL_TIM_ConfigClockSource+0x9a>
 8002f34:	e06e      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
 8002f36:	2b30      	cmp	r3, #48	; 0x30
 8002f38:	d063      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x166>
 8002f3a:	d86b      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d060      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x166>
 8002f40:	d868      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d05d      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x166>
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d05b      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x166>
 8002f4a:	e063      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f000 fb68 	bl	8003630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2277      	movs	r2, #119	; 0x77
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	609a      	str	r2, [r3, #8]
      break;
 8002f78:	e052      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f000 fb51 	bl	8003630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	01c9      	lsls	r1, r1, #7
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
      break;
 8002fa0:	e03e      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	001a      	movs	r2, r3
 8002fb0:	f000 fac4 	bl	800353c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2150      	movs	r1, #80	; 0x50
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 fb1e 	bl	80035fc <TIM_ITRx_SetConfig>
      break;
 8002fc0:	e02e      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	001a      	movs	r2, r3
 8002fd0:	f000 fae2 	bl	8003598 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2160      	movs	r1, #96	; 0x60
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fb0e 	bl	80035fc <TIM_ITRx_SetConfig>
      break;
 8002fe0:	e01e      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	001a      	movs	r2, r3
 8002ff0:	f000 faa4 	bl	800353c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2140      	movs	r1, #64	; 0x40
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fafe 	bl	80035fc <TIM_ITRx_SetConfig>
      break;
 8003000:	e00e      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0019      	movs	r1, r3
 800300c:	0010      	movs	r0, r2
 800300e:	f000 faf5 	bl	80035fc <TIM_ITRx_SetConfig>
      break;
 8003012:	e005      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003014:	230f      	movs	r3, #15
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
      break;
 800301c:	e000      	b.n	8003020 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800301e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	223d      	movs	r2, #61	; 0x3d
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	223c      	movs	r2, #60	; 0x3c
 800302c:	2100      	movs	r1, #0
 800302e:	5499      	strb	r1, [r3, r2]

  return status;
 8003030:	230f      	movs	r3, #15
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b004      	add	sp, #16
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	ffff00ff 	.word	0xffff00ff

08003044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a34      	ldr	r2, [pc, #208]	; (8003128 <TIM_Base_SetConfig+0xe4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d008      	beq.n	800306e <TIM_Base_SetConfig+0x2a>
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	05db      	lsls	r3, r3, #23
 8003062:	429a      	cmp	r2, r3
 8003064:	d003      	beq.n	800306e <TIM_Base_SetConfig+0x2a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a30      	ldr	r2, [pc, #192]	; (800312c <TIM_Base_SetConfig+0xe8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d108      	bne.n	8003080 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2270      	movs	r2, #112	; 0x70
 8003072:	4393      	bics	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a29      	ldr	r2, [pc, #164]	; (8003128 <TIM_Base_SetConfig+0xe4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d018      	beq.n	80030ba <TIM_Base_SetConfig+0x76>
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	05db      	lsls	r3, r3, #23
 800308e:	429a      	cmp	r2, r3
 8003090:	d013      	beq.n	80030ba <TIM_Base_SetConfig+0x76>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a25      	ldr	r2, [pc, #148]	; (800312c <TIM_Base_SetConfig+0xe8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00f      	beq.n	80030ba <TIM_Base_SetConfig+0x76>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a24      	ldr	r2, [pc, #144]	; (8003130 <TIM_Base_SetConfig+0xec>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00b      	beq.n	80030ba <TIM_Base_SetConfig+0x76>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a23      	ldr	r2, [pc, #140]	; (8003134 <TIM_Base_SetConfig+0xf0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <TIM_Base_SetConfig+0x76>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a22      	ldr	r2, [pc, #136]	; (8003138 <TIM_Base_SetConfig+0xf4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_Base_SetConfig+0x76>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a21      	ldr	r2, [pc, #132]	; (800313c <TIM_Base_SetConfig+0xf8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d108      	bne.n	80030cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <TIM_Base_SetConfig+0xfc>)
 80030be:	4013      	ands	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	4393      	bics	r3, r2
 80030d2:	001a      	movs	r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <TIM_Base_SetConfig+0xe4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <TIM_Base_SetConfig+0xce>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <TIM_Base_SetConfig+0xf0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_Base_SetConfig+0xce>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <TIM_Base_SetConfig+0xf4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_Base_SetConfig+0xce>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a0b      	ldr	r2, [pc, #44]	; (800313c <TIM_Base_SetConfig+0xf8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d103      	bne.n	800311a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	615a      	str	r2, [r3, #20]
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b004      	add	sp, #16
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40012c00 	.word	0x40012c00
 800312c:	40000400 	.word	0x40000400
 8003130:	40002000 	.word	0x40002000
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800
 8003140:	fffffcff 	.word	0xfffffcff

08003144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	2201      	movs	r2, #1
 8003154:	4393      	bics	r3, r2
 8003156:	001a      	movs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2270      	movs	r2, #112	; 0x70
 8003172:	4393      	bics	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2203      	movs	r2, #3
 800317a:	4393      	bics	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2202      	movs	r2, #2
 800318c:	4393      	bics	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a27      	ldr	r2, [pc, #156]	; (800323c <TIM_OC1_SetConfig+0xf8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00b      	beq.n	80031ba <TIM_OC1_SetConfig+0x76>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a26      	ldr	r2, [pc, #152]	; (8003240 <TIM_OC1_SetConfig+0xfc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <TIM_OC1_SetConfig+0x76>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a25      	ldr	r2, [pc, #148]	; (8003244 <TIM_OC1_SetConfig+0x100>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_OC1_SetConfig+0x76>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a24      	ldr	r2, [pc, #144]	; (8003248 <TIM_OC1_SetConfig+0x104>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10c      	bne.n	80031d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2208      	movs	r2, #8
 80031be:	4393      	bics	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2204      	movs	r2, #4
 80031d0:	4393      	bics	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a19      	ldr	r2, [pc, #100]	; (800323c <TIM_OC1_SetConfig+0xf8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <TIM_OC1_SetConfig+0xb0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a18      	ldr	r2, [pc, #96]	; (8003240 <TIM_OC1_SetConfig+0xfc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_OC1_SetConfig+0xb0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a17      	ldr	r2, [pc, #92]	; (8003244 <TIM_OC1_SetConfig+0x100>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_OC1_SetConfig+0xb0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a16      	ldr	r2, [pc, #88]	; (8003248 <TIM_OC1_SetConfig+0x104>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d111      	bne.n	8003218 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4a15      	ldr	r2, [pc, #84]	; (800324c <TIM_OC1_SetConfig+0x108>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <TIM_OC1_SetConfig+0x10c>)
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b006      	add	sp, #24
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40014000 	.word	0x40014000
 8003244:	40014400 	.word	0x40014400
 8003248:	40014800 	.word	0x40014800
 800324c:	fffffeff 	.word	0xfffffeff
 8003250:	fffffdff 	.word	0xfffffdff

08003254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	2210      	movs	r2, #16
 8003264:	4393      	bics	r3, r2
 8003266:	001a      	movs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4a2e      	ldr	r2, [pc, #184]	; (800333c <TIM_OC2_SetConfig+0xe8>)
 8003282:	4013      	ands	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4a2d      	ldr	r2, [pc, #180]	; (8003340 <TIM_OC2_SetConfig+0xec>)
 800328a:	4013      	ands	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2220      	movs	r2, #32
 800329e:	4393      	bics	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a24      	ldr	r2, [pc, #144]	; (8003344 <TIM_OC2_SetConfig+0xf0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10d      	bne.n	80032d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	4393      	bics	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	4393      	bics	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <TIM_OC2_SetConfig+0xf0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_OC2_SetConfig+0x9e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1a      	ldr	r2, [pc, #104]	; (8003348 <TIM_OC2_SetConfig+0xf4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_OC2_SetConfig+0x9e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a19      	ldr	r2, [pc, #100]	; (800334c <TIM_OC2_SetConfig+0xf8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_OC2_SetConfig+0x9e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a18      	ldr	r2, [pc, #96]	; (8003350 <TIM_OC2_SetConfig+0xfc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d113      	bne.n	800331a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4a17      	ldr	r2, [pc, #92]	; (8003354 <TIM_OC2_SetConfig+0x100>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4a16      	ldr	r2, [pc, #88]	; (8003358 <TIM_OC2_SetConfig+0x104>)
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	621a      	str	r2, [r3, #32]
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b006      	add	sp, #24
 800333a:	bd80      	pop	{r7, pc}
 800333c:	ffff8fff 	.word	0xffff8fff
 8003340:	fffffcff 	.word	0xfffffcff
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40014000 	.word	0x40014000
 800334c:	40014400 	.word	0x40014400
 8003350:	40014800 	.word	0x40014800
 8003354:	fffffbff 	.word	0xfffffbff
 8003358:	fffff7ff 	.word	0xfffff7ff

0800335c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a35      	ldr	r2, [pc, #212]	; (8003440 <TIM_OC3_SetConfig+0xe4>)
 800336c:	401a      	ands	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2270      	movs	r2, #112	; 0x70
 8003388:	4393      	bics	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2203      	movs	r2, #3
 8003390:	4393      	bics	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	4a28      	ldr	r2, [pc, #160]	; (8003444 <TIM_OC3_SetConfig+0xe8>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a24      	ldr	r2, [pc, #144]	; (8003448 <TIM_OC3_SetConfig+0xec>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d10d      	bne.n	80033d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	4a23      	ldr	r2, [pc, #140]	; (800344c <TIM_OC3_SetConfig+0xf0>)
 80033be:	4013      	ands	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <TIM_OC3_SetConfig+0xf4>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <TIM_OC3_SetConfig+0xec>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00b      	beq.n	80033f6 <TIM_OC3_SetConfig+0x9a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <TIM_OC3_SetConfig+0xf8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <TIM_OC3_SetConfig+0x9a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <TIM_OC3_SetConfig+0xfc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d003      	beq.n	80033f6 <TIM_OC3_SetConfig+0x9a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1a      	ldr	r2, [pc, #104]	; (800345c <TIM_OC3_SetConfig+0x100>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d113      	bne.n	800341e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4a19      	ldr	r2, [pc, #100]	; (8003460 <TIM_OC3_SetConfig+0x104>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4a18      	ldr	r2, [pc, #96]	; (8003464 <TIM_OC3_SetConfig+0x108>)
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	621a      	str	r2, [r3, #32]
}
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b006      	add	sp, #24
 800343e:	bd80      	pop	{r7, pc}
 8003440:	fffffeff 	.word	0xfffffeff
 8003444:	fffffdff 	.word	0xfffffdff
 8003448:	40012c00 	.word	0x40012c00
 800344c:	fffff7ff 	.word	0xfffff7ff
 8003450:	fffffbff 	.word	0xfffffbff
 8003454:	40014000 	.word	0x40014000
 8003458:	40014400 	.word	0x40014400
 800345c:	40014800 	.word	0x40014800
 8003460:	ffffefff 	.word	0xffffefff
 8003464:	ffffdfff 	.word	0xffffdfff

08003468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a28      	ldr	r2, [pc, #160]	; (8003518 <TIM_OC4_SetConfig+0xb0>)
 8003478:	401a      	ands	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a22      	ldr	r2, [pc, #136]	; (800351c <TIM_OC4_SetConfig+0xb4>)
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <TIM_OC4_SetConfig+0xb8>)
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <TIM_OC4_SetConfig+0xbc>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	031b      	lsls	r3, r3, #12
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a19      	ldr	r2, [pc, #100]	; (8003528 <TIM_OC4_SetConfig+0xc0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <TIM_OC4_SetConfig+0x78>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a18      	ldr	r2, [pc, #96]	; (800352c <TIM_OC4_SetConfig+0xc4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <TIM_OC4_SetConfig+0x78>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a17      	ldr	r2, [pc, #92]	; (8003530 <TIM_OC4_SetConfig+0xc8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_OC4_SetConfig+0x78>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a16      	ldr	r2, [pc, #88]	; (8003534 <TIM_OC4_SetConfig+0xcc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d109      	bne.n	80034f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	4a15      	ldr	r2, [pc, #84]	; (8003538 <TIM_OC4_SetConfig+0xd0>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	019b      	lsls	r3, r3, #6
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b006      	add	sp, #24
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	ffffefff 	.word	0xffffefff
 800351c:	ffff8fff 	.word	0xffff8fff
 8003520:	fffffcff 	.word	0xfffffcff
 8003524:	ffffdfff 	.word	0xffffdfff
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40014000 	.word	0x40014000
 8003530:	40014400 	.word	0x40014400
 8003534:	40014800 	.word	0x40014800
 8003538:	ffffbfff 	.word	0xffffbfff

0800353c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	2201      	movs	r2, #1
 8003554:	4393      	bics	r3, r2
 8003556:	001a      	movs	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	22f0      	movs	r2, #240	; 0xf0
 8003566:	4393      	bics	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	220a      	movs	r2, #10
 8003578:	4393      	bics	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b006      	add	sp, #24
 8003596:	bd80      	pop	{r7, pc}

08003598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	2210      	movs	r2, #16
 80035aa:	4393      	bics	r3, r2
 80035ac:	001a      	movs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <TIM_TI2_ConfigInputStage+0x60>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	031b      	lsls	r3, r3, #12
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	22a0      	movs	r2, #160	; 0xa0
 80035d4:	4393      	bics	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	621a      	str	r2, [r3, #32]
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b006      	add	sp, #24
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	ffff0fff 	.word	0xffff0fff

080035fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2270      	movs	r2, #112	; 0x70
 8003610:	4393      	bics	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	2207      	movs	r2, #7
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	609a      	str	r2, [r3, #8]
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <TIM_ETR_SetConfig+0x3c>)
 8003648:	4013      	ands	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	021a      	lsls	r2, r3, #8
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	431a      	orrs	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	609a      	str	r2, [r3, #8]
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b006      	add	sp, #24
 800366a:	bd80      	pop	{r7, pc}
 800366c:	ffff00ff 	.word	0xffff00ff

08003670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	221f      	movs	r2, #31
 8003680:	4013      	ands	r3, r2
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	0013      	movs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	43d2      	mvns	r2, r2
 8003692:	401a      	ands	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	211f      	movs	r1, #31
 80036a0:	400b      	ands	r3, r1
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4099      	lsls	r1, r3
 80036a6:	000b      	movs	r3, r1
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b006      	add	sp, #24
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	223c      	movs	r2, #60	; 0x3c
 80036c6:	5c9b      	ldrb	r3, [r3, r2]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e047      	b.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	223c      	movs	r2, #60	; 0x3c
 80036d4:	2101      	movs	r1, #1
 80036d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	223d      	movs	r2, #61	; 0x3d
 80036dc:	2102      	movs	r1, #2
 80036de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2270      	movs	r2, #112	; 0x70
 80036f4:	4393      	bics	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a16      	ldr	r2, [pc, #88]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00f      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	05db      	lsls	r3, r3, #23
 800371c:	429a      	cmp	r2, r3
 800371e:	d009      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a11      	ldr	r2, [pc, #68]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10c      	bne.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	4393      	bics	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	4313      	orrs	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	223d      	movs	r2, #61	; 0x3d
 8003752:	2101      	movs	r1, #1
 8003754:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	223c      	movs	r2, #60	; 0x3c
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b004      	add	sp, #16
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40000400 	.word	0x40000400
 8003770:	40014000 	.word	0x40014000

08003774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e044      	b.n	8003810 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2274      	movs	r2, #116	; 0x74
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0018      	movs	r0, r3
 800379a:	f7fd fa0f 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2224      	movs	r2, #36	; 0x24
 80037a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2101      	movs	r1, #1
 80037b0:	438a      	bics	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 f830 	bl	800381c <UART_SetConfig>
 80037bc:	0003      	movs	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e024      	b.n	8003810 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 fa0b 	bl	8003bec <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	490d      	ldr	r1, [pc, #52]	; (8003818 <HAL_UART_Init+0xa4>)
 80037e2:	400a      	ands	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	212a      	movs	r1, #42	; 0x2a
 80037f2:	438a      	bics	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2101      	movs	r1, #1
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 faa3 	bl	8003d54 <UART_CheckIdleState>
 800380e:	0003      	movs	r3, r0
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}
 8003818:	ffffb7ff 	.word	0xffffb7ff

0800381c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003824:	231e      	movs	r3, #30
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4abe      	ldr	r2, [pc, #760]	; (8003b44 <UART_SetConfig+0x328>)
 800384c:	4013      	ands	r3, r2
 800384e:	0019      	movs	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	430a      	orrs	r2, r1
 8003858:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4ab9      	ldr	r2, [pc, #740]	; (8003b48 <UART_SetConfig+0x32c>)
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4ab0      	ldr	r2, [pc, #704]	; (8003b4c <UART_SetConfig+0x330>)
 800388a:	4013      	ands	r3, r2
 800388c:	0019      	movs	r1, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	430a      	orrs	r2, r1
 8003896:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4aac      	ldr	r2, [pc, #688]	; (8003b50 <UART_SetConfig+0x334>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d127      	bne.n	80038f2 <UART_SetConfig+0xd6>
 80038a2:	4bac      	ldr	r3, [pc, #688]	; (8003b54 <UART_SetConfig+0x338>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	2203      	movs	r2, #3
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d00d      	beq.n	80038ca <UART_SetConfig+0xae>
 80038ae:	d81b      	bhi.n	80038e8 <UART_SetConfig+0xcc>
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d014      	beq.n	80038de <UART_SetConfig+0xc2>
 80038b4:	d818      	bhi.n	80038e8 <UART_SetConfig+0xcc>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <UART_SetConfig+0xa4>
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d00a      	beq.n	80038d4 <UART_SetConfig+0xb8>
 80038be:	e013      	b.n	80038e8 <UART_SetConfig+0xcc>
 80038c0:	231f      	movs	r3, #31
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	e0bd      	b.n	8003a46 <UART_SetConfig+0x22a>
 80038ca:	231f      	movs	r3, #31
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	2202      	movs	r2, #2
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e0b8      	b.n	8003a46 <UART_SetConfig+0x22a>
 80038d4:	231f      	movs	r3, #31
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2204      	movs	r2, #4
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	e0b3      	b.n	8003a46 <UART_SetConfig+0x22a>
 80038de:	231f      	movs	r3, #31
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2208      	movs	r2, #8
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e0ae      	b.n	8003a46 <UART_SetConfig+0x22a>
 80038e8:	231f      	movs	r3, #31
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2210      	movs	r2, #16
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e0a9      	b.n	8003a46 <UART_SetConfig+0x22a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a98      	ldr	r2, [pc, #608]	; (8003b58 <UART_SetConfig+0x33c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d134      	bne.n	8003966 <UART_SetConfig+0x14a>
 80038fc:	4b95      	ldr	r3, [pc, #596]	; (8003b54 <UART_SetConfig+0x338>)
 80038fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003900:	23c0      	movs	r3, #192	; 0xc0
 8003902:	029b      	lsls	r3, r3, #10
 8003904:	4013      	ands	r3, r2
 8003906:	22c0      	movs	r2, #192	; 0xc0
 8003908:	0292      	lsls	r2, r2, #10
 800390a:	4293      	cmp	r3, r2
 800390c:	d017      	beq.n	800393e <UART_SetConfig+0x122>
 800390e:	22c0      	movs	r2, #192	; 0xc0
 8003910:	0292      	lsls	r2, r2, #10
 8003912:	4293      	cmp	r3, r2
 8003914:	d822      	bhi.n	800395c <UART_SetConfig+0x140>
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	0292      	lsls	r2, r2, #10
 800391a:	4293      	cmp	r3, r2
 800391c:	d019      	beq.n	8003952 <UART_SetConfig+0x136>
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	0292      	lsls	r2, r2, #10
 8003922:	4293      	cmp	r3, r2
 8003924:	d81a      	bhi.n	800395c <UART_SetConfig+0x140>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <UART_SetConfig+0x118>
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	0252      	lsls	r2, r2, #9
 800392e:	4293      	cmp	r3, r2
 8003930:	d00a      	beq.n	8003948 <UART_SetConfig+0x12c>
 8003932:	e013      	b.n	800395c <UART_SetConfig+0x140>
 8003934:	231f      	movs	r3, #31
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e083      	b.n	8003a46 <UART_SetConfig+0x22a>
 800393e:	231f      	movs	r3, #31
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	2202      	movs	r2, #2
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e07e      	b.n	8003a46 <UART_SetConfig+0x22a>
 8003948:	231f      	movs	r3, #31
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2204      	movs	r2, #4
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e079      	b.n	8003a46 <UART_SetConfig+0x22a>
 8003952:	231f      	movs	r3, #31
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	2208      	movs	r2, #8
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e074      	b.n	8003a46 <UART_SetConfig+0x22a>
 800395c:	231f      	movs	r3, #31
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	2210      	movs	r2, #16
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e06f      	b.n	8003a46 <UART_SetConfig+0x22a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7c      	ldr	r2, [pc, #496]	; (8003b5c <UART_SetConfig+0x340>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d134      	bne.n	80039da <UART_SetConfig+0x1be>
 8003970:	4b78      	ldr	r3, [pc, #480]	; (8003b54 <UART_SetConfig+0x338>)
 8003972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003974:	23c0      	movs	r3, #192	; 0xc0
 8003976:	031b      	lsls	r3, r3, #12
 8003978:	4013      	ands	r3, r2
 800397a:	22c0      	movs	r2, #192	; 0xc0
 800397c:	0312      	lsls	r2, r2, #12
 800397e:	4293      	cmp	r3, r2
 8003980:	d017      	beq.n	80039b2 <UART_SetConfig+0x196>
 8003982:	22c0      	movs	r2, #192	; 0xc0
 8003984:	0312      	lsls	r2, r2, #12
 8003986:	4293      	cmp	r3, r2
 8003988:	d822      	bhi.n	80039d0 <UART_SetConfig+0x1b4>
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	0312      	lsls	r2, r2, #12
 800398e:	4293      	cmp	r3, r2
 8003990:	d019      	beq.n	80039c6 <UART_SetConfig+0x1aa>
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	0312      	lsls	r2, r2, #12
 8003996:	4293      	cmp	r3, r2
 8003998:	d81a      	bhi.n	80039d0 <UART_SetConfig+0x1b4>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <UART_SetConfig+0x18c>
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	02d2      	lsls	r2, r2, #11
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00a      	beq.n	80039bc <UART_SetConfig+0x1a0>
 80039a6:	e013      	b.n	80039d0 <UART_SetConfig+0x1b4>
 80039a8:	231f      	movs	r3, #31
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	e049      	b.n	8003a46 <UART_SetConfig+0x22a>
 80039b2:	231f      	movs	r3, #31
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2202      	movs	r2, #2
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e044      	b.n	8003a46 <UART_SetConfig+0x22a>
 80039bc:	231f      	movs	r3, #31
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	2204      	movs	r2, #4
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e03f      	b.n	8003a46 <UART_SetConfig+0x22a>
 80039c6:	231f      	movs	r3, #31
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2208      	movs	r2, #8
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e03a      	b.n	8003a46 <UART_SetConfig+0x22a>
 80039d0:	231f      	movs	r3, #31
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	2210      	movs	r2, #16
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e035      	b.n	8003a46 <UART_SetConfig+0x22a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a60      	ldr	r2, [pc, #384]	; (8003b60 <UART_SetConfig+0x344>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d104      	bne.n	80039ee <UART_SetConfig+0x1d2>
 80039e4:	231f      	movs	r3, #31
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	e02b      	b.n	8003a46 <UART_SetConfig+0x22a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a5c      	ldr	r2, [pc, #368]	; (8003b64 <UART_SetConfig+0x348>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d104      	bne.n	8003a02 <UART_SetConfig+0x1e6>
 80039f8:	231f      	movs	r3, #31
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	e021      	b.n	8003a46 <UART_SetConfig+0x22a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a58      	ldr	r2, [pc, #352]	; (8003b68 <UART_SetConfig+0x34c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d104      	bne.n	8003a16 <UART_SetConfig+0x1fa>
 8003a0c:	231f      	movs	r3, #31
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	e017      	b.n	8003a46 <UART_SetConfig+0x22a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a54      	ldr	r2, [pc, #336]	; (8003b6c <UART_SetConfig+0x350>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d104      	bne.n	8003a2a <UART_SetConfig+0x20e>
 8003a20:	231f      	movs	r3, #31
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e00d      	b.n	8003a46 <UART_SetConfig+0x22a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a50      	ldr	r2, [pc, #320]	; (8003b70 <UART_SetConfig+0x354>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d104      	bne.n	8003a3e <UART_SetConfig+0x222>
 8003a34:	231f      	movs	r3, #31
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e003      	b.n	8003a46 <UART_SetConfig+0x22a>
 8003a3e:	231f      	movs	r3, #31
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	2210      	movs	r2, #16
 8003a44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d15d      	bne.n	8003b0e <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8003a52:	231f      	movs	r3, #31
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d015      	beq.n	8003a88 <UART_SetConfig+0x26c>
 8003a5c:	dc18      	bgt.n	8003a90 <UART_SetConfig+0x274>
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d00d      	beq.n	8003a7e <UART_SetConfig+0x262>
 8003a62:	dc15      	bgt.n	8003a90 <UART_SetConfig+0x274>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <UART_SetConfig+0x252>
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d005      	beq.n	8003a78 <UART_SetConfig+0x25c>
 8003a6c:	e010      	b.n	8003a90 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a6e:	f7fe fed9 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8003a72:	0003      	movs	r3, r0
 8003a74:	61bb      	str	r3, [r7, #24]
        break;
 8003a76:	e012      	b.n	8003a9e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a78:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <UART_SetConfig+0x358>)
 8003a7a:	61bb      	str	r3, [r7, #24]
        break;
 8003a7c:	e00f      	b.n	8003a9e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7e:	f7fe fe47 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 8003a82:	0003      	movs	r3, r0
 8003a84:	61bb      	str	r3, [r7, #24]
        break;
 8003a86:	e00a      	b.n	8003a9e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	61bb      	str	r3, [r7, #24]
        break;
 8003a8e:	e006      	b.n	8003a9e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a94:	231e      	movs	r3, #30
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
        break;
 8003a9c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d100      	bne.n	8003aa6 <UART_SetConfig+0x28a>
 8003aa4:	e095      	b.n	8003bd2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	005a      	lsls	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	18d2      	adds	r2, r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	0010      	movs	r0, r2
 8003aba:	f7fc fb25 	bl	8000108 <__udivsi3>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	d91c      	bls.n	8003b04 <UART_SetConfig+0x2e8>
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	025b      	lsls	r3, r3, #9
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d217      	bcs.n	8003b04 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	200e      	movs	r0, #14
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	210f      	movs	r1, #15
 8003ade:	438a      	bics	r2, r1
 8003ae0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2207      	movs	r2, #7
 8003aea:	4013      	ands	r3, r2
 8003aec:	b299      	uxth	r1, r3
 8003aee:	183b      	adds	r3, r7, r0
 8003af0:	183a      	adds	r2, r7, r0
 8003af2:	8812      	ldrh	r2, [r2, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	183a      	adds	r2, r7, r0
 8003afe:	8812      	ldrh	r2, [r2, #0]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	e066      	b.n	8003bd2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003b04:	231e      	movs	r3, #30
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e061      	b.n	8003bd2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b0e:	231f      	movs	r3, #31
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d02f      	beq.n	8003b78 <UART_SetConfig+0x35c>
 8003b18:	dc32      	bgt.n	8003b80 <UART_SetConfig+0x364>
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d00d      	beq.n	8003b3a <UART_SetConfig+0x31e>
 8003b1e:	dc2f      	bgt.n	8003b80 <UART_SetConfig+0x364>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <UART_SetConfig+0x30e>
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d005      	beq.n	8003b34 <UART_SetConfig+0x318>
 8003b28:	e02a      	b.n	8003b80 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b2a:	f7fe fe7b 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	61bb      	str	r3, [r7, #24]
        break;
 8003b32:	e02c      	b.n	8003b8e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <UART_SetConfig+0x358>)
 8003b36:	61bb      	str	r3, [r7, #24]
        break;
 8003b38:	e029      	b.n	8003b8e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b3a:	f7fe fde9 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	61bb      	str	r3, [r7, #24]
        break;
 8003b42:	e024      	b.n	8003b8e <UART_SetConfig+0x372>
 8003b44:	efff69f3 	.word	0xefff69f3
 8003b48:	ffffcfff 	.word	0xffffcfff
 8003b4c:	fffff4ff 	.word	0xfffff4ff
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40004400 	.word	0x40004400
 8003b5c:	40004800 	.word	0x40004800
 8003b60:	40004c00 	.word	0x40004c00
 8003b64:	40005000 	.word	0x40005000
 8003b68:	40011400 	.word	0x40011400
 8003b6c:	40011800 	.word	0x40011800
 8003b70:	40011c00 	.word	0x40011c00
 8003b74:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	61bb      	str	r3, [r7, #24]
        break;
 8003b7e:	e006      	b.n	8003b8e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b84:	231e      	movs	r3, #30
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
        break;
 8003b8c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01e      	beq.n	8003bd2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	085a      	lsrs	r2, r3, #1
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	18d2      	adds	r2, r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	0010      	movs	r0, r2
 8003ba6:	f7fc faaf 	bl	8000108 <__udivsi3>
 8003baa:	0003      	movs	r3, r0
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d909      	bls.n	8003bca <UART_SetConfig+0x3ae>
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	025b      	lsls	r3, r3, #9
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d204      	bcs.n	8003bca <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	e003      	b.n	8003bd2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003bca:	231e      	movs	r3, #30
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003bde:	231e      	movs	r3, #30
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	781b      	ldrb	r3, [r3, #0]
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b008      	add	sp, #32
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a4a      	ldr	r2, [pc, #296]	; (8003d30 <UART_AdvFeatureConfig+0x144>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <UART_AdvFeatureConfig+0x148>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d00b      	beq.n	8003c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a3b      	ldr	r2, [pc, #236]	; (8003d38 <UART_AdvFeatureConfig+0x14c>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	2208      	movs	r2, #8
 8003c60:	4013      	ands	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <UART_AdvFeatureConfig+0x150>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	0019      	movs	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	2210      	movs	r2, #16
 8003c82:	4013      	ands	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a2c      	ldr	r2, [pc, #176]	; (8003d40 <UART_AdvFeatureConfig+0x154>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	4a25      	ldr	r2, [pc, #148]	; (8003d44 <UART_AdvFeatureConfig+0x158>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2240      	movs	r2, #64	; 0x40
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <UART_AdvFeatureConfig+0x15c>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	035b      	lsls	r3, r3, #13
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d10b      	bne.n	8003d06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <UART_AdvFeatureConfig+0x160>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2280      	movs	r2, #128	; 0x80
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d00b      	beq.n	8003d28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <UART_AdvFeatureConfig+0x164>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	fffdffff 	.word	0xfffdffff
 8003d34:	fffeffff 	.word	0xfffeffff
 8003d38:	fffbffff 	.word	0xfffbffff
 8003d3c:	ffff7fff 	.word	0xffff7fff
 8003d40:	ffffefff 	.word	0xffffefff
 8003d44:	ffffdfff 	.word	0xffffdfff
 8003d48:	ffefffff 	.word	0xffefffff
 8003d4c:	ff9fffff 	.word	0xff9fffff
 8003d50:	fff7ffff 	.word	0xfff7ffff

08003d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	2100      	movs	r1, #0
 8003d62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d64:	f7fd f82c 	bl	8000dc0 <HAL_GetTick>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2208      	movs	r2, #8
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d10c      	bne.n	8003d94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	0391      	lsls	r1, r2, #14
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <UART_CheckIdleState+0x8c>)
 8003d84:	9200      	str	r2, [sp, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f000 f82c 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e021      	b.n	8003dd8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d10c      	bne.n	8003dbc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2280      	movs	r2, #128	; 0x80
 8003da6:	03d1      	lsls	r1, r2, #15
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <UART_CheckIdleState+0x8c>)
 8003dac:	9200      	str	r2, [sp, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f000 f818 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d001      	beq.n	8003dbc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e00d      	b.n	8003dd8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2274      	movs	r2, #116	; 0x74
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b004      	add	sp, #16
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	01ffffff 	.word	0x01ffffff

08003de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b094      	sub	sp, #80	; 0x50
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	1dfb      	adds	r3, r7, #7
 8003df2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df4:	e0a3      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df8:	3301      	adds	r3, #1
 8003dfa:	d100      	bne.n	8003dfe <UART_WaitOnFlagUntilTimeout+0x1a>
 8003dfc:	e09f      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fc ffdf 	bl	8000dc0 <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d13d      	bne.n	8003e90 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e14:	f3ef 8310 	mrs	r3, PRIMASK
 8003e18:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1e:	2301      	movs	r3, #1
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	f383 8810 	msr	PRIMASK, r3
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	494c      	ldr	r1, [pc, #304]	; (8003f68 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	f383 8810 	msr	PRIMASK, r3
}
 8003e44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e46:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e50:	2301      	movs	r3, #1
 8003e52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	f383 8810 	msr	PRIMASK, r3
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	438a      	bics	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e72:	f383 8810 	msr	PRIMASK, r3
}
 8003e76:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2274      	movs	r2, #116	; 0x74
 8003e88:	2100      	movs	r1, #0
 8003e8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e067      	b.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2204      	movs	r2, #4
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d050      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d146      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	0112      	lsls	r2, r2, #4
 8003eb8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eba:	f3ef 8310 	mrs	r3, PRIMASK
 8003ebe:	613b      	str	r3, [r7, #16]
  return(result);
 8003ec0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f383 8810 	msr	PRIMASK, r3
}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4923      	ldr	r1, [pc, #140]	; (8003f68 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003edc:	400a      	ands	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ef2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f383 8810 	msr	PRIMASK, r3
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	438a      	bics	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	f383 8810 	msr	PRIMASK, r3
}
 8003f1c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	2120      	movs	r1, #32
 8003f30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2274      	movs	r2, #116	; 0x74
 8003f36:	2100      	movs	r1, #0
 8003f38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e010      	b.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	425a      	negs	r2, r3
 8003f4e:	4153      	adcs	r3, r2
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	001a      	movs	r2, r3
 8003f54:	1dfb      	adds	r3, r7, #7
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d100      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x17a>
 8003f5c:	e74b      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b014      	add	sp, #80	; 0x50
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	fffffe5f 	.word	0xfffffe5f

08003f6c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f72:	f3ef 8305 	mrs	r3, IPSR
 8003f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f82:	607b      	str	r3, [r7, #4]
  return(result);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <osKernelInitialize+0x2e>
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <osKernelInitialize+0x54>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d103      	bne.n	8003f9a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8003f92:	2306      	movs	r3, #6
 8003f94:	425b      	negs	r3, r3
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e00c      	b.n	8003fb4 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <osKernelInitialize+0x54>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d105      	bne.n	8003fae <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <osKernelInitialize+0x54>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e002      	b.n	8003fb4 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b004      	add	sp, #16
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	2000022c 	.word	0x2000022c

08003fc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fca:	f3ef 8305 	mrs	r3, IPSR
 8003fce:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fda:	607b      	str	r3, [r7, #4]
  return(result);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <osKernelStart+0x2e>
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <osKernelStart+0x58>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d103      	bne.n	8003ff2 <osKernelStart+0x2e>
    stat = osErrorISR;
 8003fea:	2306      	movs	r3, #6
 8003fec:	425b      	negs	r3, r3
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e00e      	b.n	8004010 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <osKernelStart+0x58>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d107      	bne.n	800400a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <osKernelStart+0x58>)
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004000:	f000 ff46 	bl	8004e90 <vTaskStartScheduler>
      stat = osOK;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e002      	b.n	8004010 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800400a:	2301      	movs	r3, #1
 800400c:	425b      	negs	r3, r3
 800400e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004010:	68fb      	ldr	r3, [r7, #12]
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	2000022c 	.word	0x2000022c

08004020 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004020:	b5b0      	push	{r4, r5, r7, lr}
 8004022:	b090      	sub	sp, #64	; 0x40
 8004024:	af04      	add	r7, sp, #16
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004030:	f3ef 8305 	mrs	r3, IPSR
 8004034:	61fb      	str	r3, [r7, #28]
  return(result);
 8004036:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004038:	2b00      	cmp	r3, #0
 800403a:	d000      	beq.n	800403e <osThreadNew+0x1e>
 800403c:	e090      	b.n	8004160 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403e:	f3ef 8310 	mrs	r3, PRIMASK
 8004042:	61bb      	str	r3, [r7, #24]
  return(result);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <osThreadNew+0x34>
 800404a:	4b48      	ldr	r3, [pc, #288]	; (800416c <osThreadNew+0x14c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d100      	bne.n	8004054 <osThreadNew+0x34>
 8004052:	e085      	b.n	8004160 <osThreadNew+0x140>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d100      	bne.n	800405c <osThreadNew+0x3c>
 800405a:	e081      	b.n	8004160 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004060:	2318      	movs	r3, #24
 8004062:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8004064:	2117      	movs	r1, #23
 8004066:	187b      	adds	r3, r7, r1
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800406c:	187b      	adds	r3, r7, r1
 800406e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8004070:	2301      	movs	r3, #1
 8004072:	425b      	negs	r3, r3
 8004074:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d044      	beq.n	8004106 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <osThreadNew+0x6a>
        name = attr->name;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <osThreadNew+0x8e>
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	2b38      	cmp	r3, #56	; 0x38
 80040a2:	d804      	bhi.n	80040ae <osThreadNew+0x8e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	4013      	ands	r3, r2
 80040ac:	d001      	beq.n	80040b2 <osThreadNew+0x92>
        return (NULL);
 80040ae:	2300      	movs	r3, #0
 80040b0:	e057      	b.n	8004162 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00e      	beq.n	80040e8 <osThreadNew+0xc8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2bbb      	cmp	r3, #187	; 0xbb
 80040d0:	d90a      	bls.n	80040e8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d006      	beq.n	80040e8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <osThreadNew+0xc8>
        mem = 1;
 80040e2:	2301      	movs	r3, #1
 80040e4:	623b      	str	r3, [r7, #32]
 80040e6:	e010      	b.n	800410a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10c      	bne.n	800410a <osThreadNew+0xea>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d108      	bne.n	800410a <osThreadNew+0xea>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d104      	bne.n	800410a <osThreadNew+0xea>
          mem = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	623b      	str	r3, [r7, #32]
 8004104:	e001      	b.n	800410a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d112      	bne.n	8004136 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004118:	68bd      	ldr	r5, [r7, #8]
 800411a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800411c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	9201      	str	r2, [sp, #4]
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	002b      	movs	r3, r5
 800412a:	0022      	movs	r2, r4
 800412c:	f000 fd21 	bl	8004b72 <xTaskCreateStatic>
 8004130:	0003      	movs	r3, r0
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	e014      	b.n	8004160 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d111      	bne.n	8004160 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	b29a      	uxth	r2, r3
 8004140:	68bc      	ldr	r4, [r7, #8]
 8004142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	2310      	movs	r3, #16
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	0023      	movs	r3, r4
 8004152:	f000 fd51 	bl	8004bf8 <xTaskCreate>
 8004156:	0003      	movs	r3, r0
 8004158:	2b01      	cmp	r3, #1
 800415a:	d001      	beq.n	8004160 <osThreadNew+0x140>
          hTask = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004160:	693b      	ldr	r3, [r7, #16]
}
 8004162:	0018      	movs	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	b00c      	add	sp, #48	; 0x30
 8004168:	bdb0      	pop	{r4, r5, r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	2000022c 	.word	0x2000022c

08004170 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a06      	ldr	r2, [pc, #24]	; (8004198 <vApplicationGetIdleTaskMemory+0x28>)
 8004180:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4a05      	ldr	r2, [pc, #20]	; (800419c <vApplicationGetIdleTaskMemory+0x2c>)
 8004186:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2280      	movs	r2, #128	; 0x80
 800418c:	601a      	str	r2, [r3, #0]
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	20000230 	.word	0x20000230
 800419c:	200002ec 	.word	0x200002ec

080041a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a06      	ldr	r2, [pc, #24]	; (80041c8 <vApplicationGetTimerTaskMemory+0x28>)
 80041b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4a05      	ldr	r2, [pc, #20]	; (80041cc <vApplicationGetTimerTaskMemory+0x2c>)
 80041b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	0052      	lsls	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b004      	add	sp, #16
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	200004ec 	.word	0x200004ec
 80041cc:	200005a8 	.word	0x200005a8

080041d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3308      	adds	r3, #8
 80041dc:	001a      	movs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	4252      	negs	r2, r2
 80041e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3308      	adds	r3, #8
 80041ee:	001a      	movs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3308      	adds	r3, #8
 80041f8:	001a      	movs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}

0800420c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b002      	add	sp, #8
 8004220:	bd80      	pop	{r7, pc}

08004222 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	b004      	add	sp, #16
 8004264:	bd80      	pop	{r7, pc}

08004266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	3301      	adds	r3, #1
 800427a:	d103      	bne.n	8004284 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e00c      	b.n	800429e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3308      	adds	r3, #8
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e002      	b.n	8004292 <vListInsert+0x2c>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	429a      	cmp	r2, r3
 800429c:	d2f6      	bcs.n	800428c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b004      	add	sp, #16
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6892      	ldr	r2, [r2, #8]
 80042e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6852      	ldr	r2, [r2, #4]
 80042f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d103      	bne.n	8004306 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	1e5a      	subs	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b004      	add	sp, #16
 8004320:	bd80      	pop	{r7, pc}

08004322 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <xQueueGenericReset+0x18>
 8004336:	b672      	cpsid	i
 8004338:	e7fe      	b.n	8004338 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800433a:	f001 fdd1 	bl	8005ee0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	434b      	muls	r3, r1
 800434c:	18d2      	adds	r2, r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	1e59      	subs	r1, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	434b      	muls	r3, r1
 8004370:	18d2      	adds	r2, r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2244      	movs	r2, #68	; 0x44
 800437a:	21ff      	movs	r1, #255	; 0xff
 800437c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2245      	movs	r2, #69	; 0x45
 8004382:	21ff      	movs	r1, #255	; 0xff
 8004384:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d013      	beq.n	80043bc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3310      	adds	r3, #16
 8004398:	0018      	movs	r0, r3
 800439a:	f000 ffcf 	bl	800533c <xTaskRemoveFromEventList>
 800439e:	1e03      	subs	r3, r0, #0
 80043a0:	d00c      	beq.n	80043bc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043a2:	f001 fd8d 	bl	8005ec0 <vPortYield>
 80043a6:	e009      	b.n	80043bc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3310      	adds	r3, #16
 80043ac:	0018      	movs	r0, r3
 80043ae:	f7ff ff0f 	bl	80041d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3324      	adds	r3, #36	; 0x24
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7ff ff0a 	bl	80041d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043bc:	f001 fda2 	bl	8005f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043c0:	2301      	movs	r3, #1
}
 80043c2:	0018      	movs	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b004      	add	sp, #16
 80043c8:	bd80      	pop	{r7, pc}

080043ca <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043ca:	b590      	push	{r4, r7, lr}
 80043cc:	b089      	sub	sp, #36	; 0x24
 80043ce:	af02      	add	r7, sp, #8
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <xQueueGenericCreateStatic+0x18>
 80043de:	b672      	cpsid	i
 80043e0:	e7fe      	b.n	80043e0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <xQueueGenericCreateStatic+0x22>
 80043e8:	b672      	cpsid	i
 80043ea:	e7fe      	b.n	80043ea <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <xQueueGenericCreateStatic+0x2e>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <xQueueGenericCreateStatic+0x32>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <xQueueGenericCreateStatic+0x34>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <xQueueGenericCreateStatic+0x3c>
 8004402:	b672      	cpsid	i
 8004404:	e7fe      	b.n	8004404 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <xQueueGenericCreateStatic+0x48>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <xQueueGenericCreateStatic+0x4c>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <xQueueGenericCreateStatic+0x4e>
 8004416:	2300      	movs	r3, #0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <xQueueGenericCreateStatic+0x56>
 800441c:	b672      	cpsid	i
 800441e:	e7fe      	b.n	800441e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004420:	2350      	movs	r3, #80	; 0x50
 8004422:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b50      	cmp	r3, #80	; 0x50
 8004428:	d001      	beq.n	800442e <xQueueGenericCreateStatic+0x64>
 800442a:	b672      	cpsid	i
 800442c:	e7fe      	b.n	800442c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2246      	movs	r2, #70	; 0x46
 800443c:	2101      	movs	r1, #1
 800443e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004440:	2328      	movs	r3, #40	; 0x28
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	781c      	ldrb	r4, [r3, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	0023      	movs	r3, r4
 8004452:	f000 f805 	bl	8004460 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004456:	697b      	ldr	r3, [r7, #20]
	}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b007      	add	sp, #28
 800445e:	bd90      	pop	{r4, r7, pc}

08004460 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	001a      	movs	r2, r3
 800446e:	1cfb      	adds	r3, r7, #3
 8004470:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d103      	bne.n	8004480 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e002      	b.n	8004486 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2101      	movs	r1, #1
 8004496:	0018      	movs	r0, r3
 8004498:	f7ff ff43 	bl	8004322 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	1cfa      	adds	r2, r7, #3
 80044a0:	214c      	movs	r1, #76	; 0x4c
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b004      	add	sp, #16
 80044ac:	bd80      	pop	{r7, pc}

080044ae <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b08a      	sub	sp, #40	; 0x28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <xQueueGenericSend+0x20>
 80044ca:	b672      	cpsid	i
 80044cc:	e7fe      	b.n	80044cc <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <xQueueGenericSend+0x2e>
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <xQueueGenericSend+0x32>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <xQueueGenericSend+0x34>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <xQueueGenericSend+0x3c>
 80044e6:	b672      	cpsid	i
 80044e8:	e7fe      	b.n	80044e8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d103      	bne.n	80044f8 <xQueueGenericSend+0x4a>
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <xQueueGenericSend+0x4e>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <xQueueGenericSend+0x50>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <xQueueGenericSend+0x58>
 8004502:	b672      	cpsid	i
 8004504:	e7fe      	b.n	8004504 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004506:	f001 f8b7 	bl	8005678 <xTaskGetSchedulerState>
 800450a:	1e03      	subs	r3, r0, #0
 800450c:	d102      	bne.n	8004514 <xQueueGenericSend+0x66>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <xQueueGenericSend+0x6a>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <xQueueGenericSend+0x6c>
 8004518:	2300      	movs	r3, #0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <xQueueGenericSend+0x74>
 800451e:	b672      	cpsid	i
 8004520:	e7fe      	b.n	8004520 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004522:	f001 fcdd 	bl	8005ee0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <xQueueGenericSend+0x8a>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d11e      	bne.n	8004576 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	0018      	movs	r0, r3
 8004540:	f000 f99f 	bl	8004882 <prvCopyDataToQueue>
 8004544:	0003      	movs	r3, r0
 8004546:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	3324      	adds	r3, #36	; 0x24
 8004554:	0018      	movs	r0, r3
 8004556:	f000 fef1 	bl	800533c <xTaskRemoveFromEventList>
 800455a:	1e03      	subs	r3, r0, #0
 800455c:	d007      	beq.n	800456e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800455e:	f001 fcaf 	bl	8005ec0 <vPortYield>
 8004562:	e004      	b.n	800456e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800456a:	f001 fca9 	bl	8005ec0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800456e:	f001 fcc9 	bl	8005f04 <vPortExitCritical>
				return pdPASS;
 8004572:	2301      	movs	r3, #1
 8004574:	e05b      	b.n	800462e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800457c:	f001 fcc2 	bl	8005f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004580:	2300      	movs	r3, #0
 8004582:	e054      	b.n	800462e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800458a:	2314      	movs	r3, #20
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	0018      	movs	r0, r3
 8004590:	f000 ff30 	bl	80053f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004598:	f001 fcb4 	bl	8005f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800459c:	f000 fcd6 	bl	8004f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045a0:	f001 fc9e 	bl	8005ee0 <vPortEnterCritical>
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	2244      	movs	r2, #68	; 0x44
 80045a8:	5c9b      	ldrb	r3, [r3, r2]
 80045aa:	b25b      	sxtb	r3, r3
 80045ac:	3301      	adds	r3, #1
 80045ae:	d103      	bne.n	80045b8 <xQueueGenericSend+0x10a>
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	2244      	movs	r2, #68	; 0x44
 80045b4:	2100      	movs	r1, #0
 80045b6:	5499      	strb	r1, [r3, r2]
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	2245      	movs	r2, #69	; 0x45
 80045bc:	5c9b      	ldrb	r3, [r3, r2]
 80045be:	b25b      	sxtb	r3, r3
 80045c0:	3301      	adds	r3, #1
 80045c2:	d103      	bne.n	80045cc <xQueueGenericSend+0x11e>
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2245      	movs	r2, #69	; 0x45
 80045c8:	2100      	movs	r1, #0
 80045ca:	5499      	strb	r1, [r3, r2]
 80045cc:	f001 fc9a 	bl	8005f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045d0:	1d3a      	adds	r2, r7, #4
 80045d2:	2314      	movs	r3, #20
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	0011      	movs	r1, r2
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 ff1f 	bl	800541c <xTaskCheckForTimeOut>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d11e      	bne.n	8004620 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 fa51 	bl	8004a8c <prvIsQueueFull>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d011      	beq.n	8004612 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	3310      	adds	r3, #16
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	0011      	movs	r1, r2
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 fe5c 	bl	80052b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	0018      	movs	r0, r3
 8004600:	f000 f9d0 	bl	80049a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004604:	f000 fcae 	bl	8004f64 <xTaskResumeAll>
 8004608:	1e03      	subs	r3, r0, #0
 800460a:	d18a      	bne.n	8004522 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800460c:	f001 fc58 	bl	8005ec0 <vPortYield>
 8004610:	e787      	b.n	8004522 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	0018      	movs	r0, r3
 8004616:	f000 f9c5 	bl	80049a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800461a:	f000 fca3 	bl	8004f64 <xTaskResumeAll>
 800461e:	e780      	b.n	8004522 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	0018      	movs	r0, r3
 8004624:	f000 f9be 	bl	80049a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004628:	f000 fc9c 	bl	8004f64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800462c:	2300      	movs	r3, #0
		}
	}
}
 800462e:	0018      	movs	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	b00a      	add	sp, #40	; 0x28
 8004634:	bd80      	pop	{r7, pc}

08004636 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004636:	b590      	push	{r4, r7, lr}
 8004638:	b089      	sub	sp, #36	; 0x24
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
 8004642:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <xQueueGenericSendFromISR+0x1c>
 800464e:	b672      	cpsid	i
 8004650:	e7fe      	b.n	8004650 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d103      	bne.n	8004660 <xQueueGenericSendFromISR+0x2a>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <xQueueGenericSendFromISR+0x2e>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <xQueueGenericSendFromISR+0x30>
 8004664:	2300      	movs	r3, #0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <xQueueGenericSendFromISR+0x38>
 800466a:	b672      	cpsid	i
 800466c:	e7fe      	b.n	800466c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d103      	bne.n	800467c <xQueueGenericSendFromISR+0x46>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <xQueueGenericSendFromISR+0x4a>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <xQueueGenericSendFromISR+0x4c>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <xQueueGenericSendFromISR+0x54>
 8004686:	b672      	cpsid	i
 8004688:	e7fe      	b.n	8004688 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800468a:	f001 fc53 	bl	8005f34 <ulSetInterruptMaskFromISR>
 800468e:	0003      	movs	r3, r0
 8004690:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469a:	429a      	cmp	r2, r3
 800469c:	d302      	bcc.n	80046a4 <xQueueGenericSendFromISR+0x6e>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d12e      	bne.n	8004702 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046a4:	2413      	movs	r4, #19
 80046a6:	193b      	adds	r3, r7, r4
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	2145      	movs	r1, #69	; 0x45
 80046ac:	5c52      	ldrb	r2, [r2, r1]
 80046ae:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 f8e3 	bl	8004882 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046bc:	193b      	adds	r3, r7, r4
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b25b      	sxtb	r3, r3
 80046c2:	3301      	adds	r3, #1
 80046c4:	d111      	bne.n	80046ea <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d016      	beq.n	80046fc <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	3324      	adds	r3, #36	; 0x24
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 fe32 	bl	800533c <xTaskRemoveFromEventList>
 80046d8:	1e03      	subs	r3, r0, #0
 80046da:	d00f      	beq.n	80046fc <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e008      	b.n	80046fc <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046ea:	2313      	movs	r3, #19
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	b259      	sxtb	r1, r3
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2245      	movs	r2, #69	; 0x45
 80046fa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80046fc:	2301      	movs	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
		{
 8004700:	e001      	b.n	8004706 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	0018      	movs	r0, r3
 800470a:	f001 fc19 	bl	8005f40 <vClearInterruptMaskFromISR>

	return xReturn;
 800470e:	69fb      	ldr	r3, [r7, #28]
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b009      	add	sp, #36	; 0x24
 8004716:	bd90      	pop	{r4, r7, pc}

08004718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004724:	2300      	movs	r3, #0
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <xQueueReceive+0x1e>
 8004732:	b672      	cpsid	i
 8004734:	e7fe      	b.n	8004734 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d103      	bne.n	8004744 <xQueueReceive+0x2c>
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <xQueueReceive+0x30>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <xQueueReceive+0x32>
 8004748:	2300      	movs	r3, #0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <xQueueReceive+0x3a>
 800474e:	b672      	cpsid	i
 8004750:	e7fe      	b.n	8004750 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004752:	f000 ff91 	bl	8005678 <xTaskGetSchedulerState>
 8004756:	1e03      	subs	r3, r0, #0
 8004758:	d102      	bne.n	8004760 <xQueueReceive+0x48>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <xQueueReceive+0x4c>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <xQueueReceive+0x4e>
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <xQueueReceive+0x56>
 800476a:	b672      	cpsid	i
 800476c:	e7fe      	b.n	800476c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800476e:	f001 fbb7 	bl	8005ee0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01a      	beq.n	80047b4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	0011      	movs	r1, r2
 8004784:	0018      	movs	r0, r3
 8004786:	f000 f8e7 	bl	8004958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	1e5a      	subs	r2, r3, #1
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	3310      	adds	r3, #16
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 fdcc 	bl	800533c <xTaskRemoveFromEventList>
 80047a4:	1e03      	subs	r3, r0, #0
 80047a6:	d001      	beq.n	80047ac <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047a8:	f001 fb8a 	bl	8005ec0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047ac:	f001 fbaa 	bl	8005f04 <vPortExitCritical>
				return pdPASS;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e062      	b.n	800487a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047ba:	f001 fba3 	bl	8005f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047be:	2300      	movs	r3, #0
 80047c0:	e05b      	b.n	800487a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047c8:	2314      	movs	r3, #20
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 fe11 	bl	80053f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047d2:	2301      	movs	r3, #1
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047d6:	f001 fb95 	bl	8005f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047da:	f000 fbb7 	bl	8004f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047de:	f001 fb7f 	bl	8005ee0 <vPortEnterCritical>
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2244      	movs	r2, #68	; 0x44
 80047e6:	5c9b      	ldrb	r3, [r3, r2]
 80047e8:	b25b      	sxtb	r3, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	d103      	bne.n	80047f6 <xQueueReceive+0xde>
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	2244      	movs	r2, #68	; 0x44
 80047f2:	2100      	movs	r1, #0
 80047f4:	5499      	strb	r1, [r3, r2]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2245      	movs	r2, #69	; 0x45
 80047fa:	5c9b      	ldrb	r3, [r3, r2]
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	d103      	bne.n	800480a <xQueueReceive+0xf2>
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2245      	movs	r2, #69	; 0x45
 8004806:	2100      	movs	r1, #0
 8004808:	5499      	strb	r1, [r3, r2]
 800480a:	f001 fb7b 	bl	8005f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800480e:	1d3a      	adds	r2, r7, #4
 8004810:	2314      	movs	r3, #20
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	0011      	movs	r1, r2
 8004816:	0018      	movs	r0, r3
 8004818:	f000 fe00 	bl	800541c <xTaskCheckForTimeOut>
 800481c:	1e03      	subs	r3, r0, #0
 800481e:	d11e      	bne.n	800485e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	0018      	movs	r0, r3
 8004824:	f000 f91c 	bl	8004a60 <prvIsQueueEmpty>
 8004828:	1e03      	subs	r3, r0, #0
 800482a:	d011      	beq.n	8004850 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	3324      	adds	r3, #36	; 0x24
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	0011      	movs	r1, r2
 8004834:	0018      	movs	r0, r3
 8004836:	f000 fd3d 	bl	80052b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	0018      	movs	r0, r3
 800483e:	f000 f8b1 	bl	80049a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004842:	f000 fb8f 	bl	8004f64 <xTaskResumeAll>
 8004846:	1e03      	subs	r3, r0, #0
 8004848:	d191      	bne.n	800476e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800484a:	f001 fb39 	bl	8005ec0 <vPortYield>
 800484e:	e78e      	b.n	800476e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	0018      	movs	r0, r3
 8004854:	f000 f8a6 	bl	80049a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004858:	f000 fb84 	bl	8004f64 <xTaskResumeAll>
 800485c:	e787      	b.n	800476e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	0018      	movs	r0, r3
 8004862:	f000 f89f 	bl	80049a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004866:	f000 fb7d 	bl	8004f64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	0018      	movs	r0, r3
 800486e:	f000 f8f7 	bl	8004a60 <prvIsQueueEmpty>
 8004872:	1e03      	subs	r3, r0, #0
 8004874:	d100      	bne.n	8004878 <xQueueReceive+0x160>
 8004876:	e77a      	b.n	800476e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004878:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b00a      	add	sp, #40	; 0x28
 8004880:	bd80      	pop	{r7, pc}

08004882 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10e      	bne.n	80048be <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d14e      	bne.n	8004946 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	0018      	movs	r0, r3
 80048ae:	f000 feff 	bl	80056b0 <xTaskPriorityDisinherit>
 80048b2:	0003      	movs	r3, r0
 80048b4:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	e043      	b.n	8004946 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d119      	bne.n	80048f8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6898      	ldr	r0, [r3, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	0019      	movs	r1, r3
 80048d0:	f001 fd6a 	bl	80063a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	18d2      	adds	r2, r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d32b      	bcc.n	8004946 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	e026      	b.n	8004946 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68d8      	ldr	r0, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	0019      	movs	r1, r3
 8004904:	f001 fd50 	bl	80063a8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	425b      	negs	r3, r3
 8004912:	18d2      	adds	r2, r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d207      	bcs.n	8004934 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	425b      	negs	r3, r3
 800492e:	18d2      	adds	r2, r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d105      	bne.n	8004946 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3b01      	subs	r3, #1
 8004944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800494e:	697b      	ldr	r3, [r7, #20]
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b006      	add	sp, #24
 8004956:	bd80      	pop	{r7, pc}

08004958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d018      	beq.n	800499c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	18d2      	adds	r2, r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d303      	bcc.n	800498c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68d9      	ldr	r1, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	0018      	movs	r0, r3
 8004998:	f001 fd06 	bl	80063a8 <memcpy>
	}
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049ac:	f001 fa98 	bl	8005ee0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049b0:	230f      	movs	r3, #15
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	2145      	movs	r1, #69	; 0x45
 80049b8:	5c52      	ldrb	r2, [r2, r1]
 80049ba:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049bc:	e013      	b.n	80049e6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d016      	beq.n	80049f4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3324      	adds	r3, #36	; 0x24
 80049ca:	0018      	movs	r0, r3
 80049cc:	f000 fcb6 	bl	800533c <xTaskRemoveFromEventList>
 80049d0:	1e03      	subs	r3, r0, #0
 80049d2:	d001      	beq.n	80049d8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049d4:	f000 fd72 	bl	80054bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049d8:	210f      	movs	r1, #15
 80049da:	187b      	adds	r3, r7, r1
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	3b01      	subs	r3, #1
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	187b      	adds	r3, r7, r1
 80049e4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049e6:	230f      	movs	r3, #15
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	dce5      	bgt.n	80049be <prvUnlockQueue+0x1a>
 80049f2:	e000      	b.n	80049f6 <prvUnlockQueue+0x52>
					break;
 80049f4:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2245      	movs	r2, #69	; 0x45
 80049fa:	21ff      	movs	r1, #255	; 0xff
 80049fc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80049fe:	f001 fa81 	bl	8005f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a02:	f001 fa6d 	bl	8005ee0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a06:	230e      	movs	r3, #14
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	2144      	movs	r1, #68	; 0x44
 8004a0e:	5c52      	ldrb	r2, [r2, r1]
 8004a10:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a12:	e013      	b.n	8004a3c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d016      	beq.n	8004a4a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3310      	adds	r3, #16
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 fc8b 	bl	800533c <xTaskRemoveFromEventList>
 8004a26:	1e03      	subs	r3, r0, #0
 8004a28:	d001      	beq.n	8004a2e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004a2a:	f000 fd47 	bl	80054bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a2e:	210e      	movs	r1, #14
 8004a30:	187b      	adds	r3, r7, r1
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	187b      	adds	r3, r7, r1
 8004a3a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a3c:	230e      	movs	r3, #14
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	b25b      	sxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	dce5      	bgt.n	8004a14 <prvUnlockQueue+0x70>
 8004a48:	e000      	b.n	8004a4c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004a4a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2244      	movs	r2, #68	; 0x44
 8004a50:	21ff      	movs	r1, #255	; 0xff
 8004a52:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004a54:	f001 fa56 	bl	8005f04 <vPortExitCritical>
}
 8004a58:	46c0      	nop			; (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b004      	add	sp, #16
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a68:	f001 fa3a 	bl	8005ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e001      	b.n	8004a7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a7e:	f001 fa41 	bl	8005f04 <vPortExitCritical>

	return xReturn;
 8004a82:	68fb      	ldr	r3, [r7, #12]
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b004      	add	sp, #16
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a94:	f001 fa24 	bl	8005ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d102      	bne.n	8004aaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e001      	b.n	8004aae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aae:	f001 fa29 	bl	8005f04 <vPortExitCritical>

	return xReturn;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b004      	add	sp, #16
 8004aba:	bd80      	pop	{r7, pc}

08004abc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e015      	b.n	8004af8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004acc:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <vQueueAddToRegistry+0x4c>)
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	00d2      	lsls	r2, r2, #3
 8004ad2:	58d3      	ldr	r3, [r2, r3]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10c      	bne.n	8004af2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <vQueueAddToRegistry+0x4c>)
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	00d2      	lsls	r2, r2, #3
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <vQueueAddToRegistry+0x4c>)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	3304      	adds	r3, #4
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004af0:	e006      	b.n	8004b00 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3301      	adds	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b07      	cmp	r3, #7
 8004afc:	d9e6      	bls.n	8004acc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b004      	add	sp, #16
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	200009a8 	.word	0x200009a8

08004b0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b1c:	f001 f9e0 	bl	8005ee0 <vPortEnterCritical>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2244      	movs	r2, #68	; 0x44
 8004b24:	5c9b      	ldrb	r3, [r3, r2]
 8004b26:	b25b      	sxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	d103      	bne.n	8004b34 <vQueueWaitForMessageRestricted+0x28>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2244      	movs	r2, #68	; 0x44
 8004b30:	2100      	movs	r1, #0
 8004b32:	5499      	strb	r1, [r3, r2]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2245      	movs	r2, #69	; 0x45
 8004b38:	5c9b      	ldrb	r3, [r3, r2]
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	d103      	bne.n	8004b48 <vQueueWaitForMessageRestricted+0x3c>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2245      	movs	r2, #69	; 0x45
 8004b44:	2100      	movs	r1, #0
 8004b46:	5499      	strb	r1, [r3, r2]
 8004b48:	f001 f9dc 	bl	8005f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	3324      	adds	r3, #36	; 0x24
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f000 fbc7 	bl	80052f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7ff ff1d 	bl	80049a4 <prvUnlockQueue>
	}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b006      	add	sp, #24
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b72:	b590      	push	{r4, r7, lr}
 8004b74:	b08d      	sub	sp, #52	; 0x34
 8004b76:	af04      	add	r7, sp, #16
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <xTaskCreateStatic+0x18>
 8004b86:	b672      	cpsid	i
 8004b88:	e7fe      	b.n	8004b88 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <xTaskCreateStatic+0x22>
 8004b90:	b672      	cpsid	i
 8004b92:	e7fe      	b.n	8004b92 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b94:	23bc      	movs	r3, #188	; 0xbc
 8004b96:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2bbc      	cmp	r3, #188	; 0xbc
 8004b9c:	d001      	beq.n	8004ba2 <xTaskCreateStatic+0x30>
 8004b9e:	b672      	cpsid	i
 8004ba0:	e7fe      	b.n	8004ba0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <xTaskCreateStatic+0x78>
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01d      	beq.n	8004bea <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	22b9      	movs	r2, #185	; 0xb9
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bc0:	683c      	ldr	r4, [r7, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9303      	str	r3, [sp, #12]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	2318      	movs	r3, #24
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	0023      	movs	r3, r4
 8004bdc:	f000 f858 	bl	8004c90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	0018      	movs	r0, r3
 8004be4:	f000 f8ec 	bl	8004dc0 <prvAddNewTaskToReadyList>
 8004be8:	e001      	b.n	8004bee <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bee:	69bb      	ldr	r3, [r7, #24]
	}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b009      	add	sp, #36	; 0x24
 8004bf6:	bd90      	pop	{r4, r7, pc}

08004bf8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b08d      	sub	sp, #52	; 0x34
 8004bfc:	af04      	add	r7, sp, #16
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	1dbb      	adds	r3, r7, #6
 8004c06:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c08:	1dbb      	adds	r3, r7, #6
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f001 f9fe 	bl	8006010 <pvPortMalloc>
 8004c14:	0003      	movs	r3, r0
 8004c16:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d010      	beq.n	8004c40 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c1e:	20bc      	movs	r0, #188	; 0xbc
 8004c20:	f001 f9f6 	bl	8006010 <pvPortMalloc>
 8004c24:	0003      	movs	r3, r0
 8004c26:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
 8004c34:	e006      	b.n	8004c44 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f001 fa8f 	bl	800615c <vPortFree>
 8004c3e:	e001      	b.n	8004c44 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01a      	beq.n	8004c80 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	22b9      	movs	r2, #185	; 0xb9
 8004c4e:	2100      	movs	r1, #0
 8004c50:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c52:	1dbb      	adds	r3, r7, #6
 8004c54:	881a      	ldrh	r2, [r3, #0]
 8004c56:	683c      	ldr	r4, [r7, #0]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	9303      	str	r3, [sp, #12]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	9302      	str	r3, [sp, #8]
 8004c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	0023      	movs	r3, r4
 8004c6e:	f000 f80f 	bl	8004c90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 f8a3 	bl	8004dc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e002      	b.n	8004c86 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c80:	2301      	movs	r3, #1
 8004c82:	425b      	negs	r3, r3
 8004c84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c86:	69bb      	ldr	r3, [r7, #24]
	}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b009      	add	sp, #36	; 0x24
 8004c8e:	bd90      	pop	{r4, r7, pc}

08004c90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	001a      	movs	r2, r3
 8004ca8:	21a5      	movs	r1, #165	; 0xa5
 8004caa:	f001 fb86 	bl	80063ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	493e      	ldr	r1, [pc, #248]	; (8004db0 <prvInitialiseNewTask+0x120>)
 8004cb6:	468c      	mov	ip, r1
 8004cb8:	4463      	add	r3, ip
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2207      	movs	r2, #7
 8004cc4:	4393      	bics	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2207      	movs	r2, #7
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d001      	beq.n	8004cd4 <prvInitialiseNewTask+0x44>
 8004cd0:	b672      	cpsid	i
 8004cd2:	e7fe      	b.n	8004cd2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e013      	b.n	8004d02 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	18d3      	adds	r3, r2, r3
 8004ce0:	7818      	ldrb	r0, [r3, #0]
 8004ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce4:	2134      	movs	r1, #52	; 0x34
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	18d3      	adds	r3, r2, r3
 8004cea:	185b      	adds	r3, r3, r1
 8004cec:	1c02      	adds	r2, r0, #0
 8004cee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	18d3      	adds	r3, r2, r3
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d006      	beq.n	8004d0a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b0f      	cmp	r3, #15
 8004d06:	d9e8      	bls.n	8004cda <prvInitialiseNewTask+0x4a>
 8004d08:	e000      	b.n	8004d0c <prvInitialiseNewTask+0x7c>
		{
			break;
 8004d0a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	2243      	movs	r2, #67	; 0x43
 8004d10:	2100      	movs	r1, #0
 8004d12:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b37      	cmp	r3, #55	; 0x37
 8004d18:	d901      	bls.n	8004d1e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d1a:	2337      	movs	r3, #55	; 0x37
 8004d1c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	3304      	adds	r3, #4
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7ff fa69 	bl	800420c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	3318      	adds	r3, #24
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f7ff fa64 	bl	800420c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	2238      	movs	r2, #56	; 0x38
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	22b4      	movs	r2, #180	; 0xb4
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	22b8      	movs	r2, #184	; 0xb8
 8004d66:	2100      	movs	r1, #0
 8004d68:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	3354      	adds	r3, #84	; 0x54
 8004d6e:	2260      	movs	r2, #96	; 0x60
 8004d70:	2100      	movs	r1, #0
 8004d72:	0018      	movs	r0, r3
 8004d74:	f001 fb21 	bl	80063ba <memset>
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	4a0e      	ldr	r2, [pc, #56]	; (8004db4 <prvInitialiseNewTask+0x124>)
 8004d7c:	659a      	str	r2, [r3, #88]	; 0x58
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	4a0d      	ldr	r2, [pc, #52]	; (8004db8 <prvInitialiseNewTask+0x128>)
 8004d82:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <prvInitialiseNewTask+0x12c>)
 8004d88:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f001 f80d 	bl	8005db0 <pxPortInitialiseStack>
 8004d96:	0002      	movs	r2, r0
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b006      	add	sp, #24
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	3fffffff 	.word	0x3fffffff
 8004db4:	08006644 	.word	0x08006644
 8004db8:	08006664 	.word	0x08006664
 8004dbc:	08006624 	.word	0x08006624

08004dc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dc8:	f001 f88a 	bl	8005ee0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <prvAddNewTaskToReadyList+0xb8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <prvAddNewTaskToReadyList+0xb8>)
 8004dd4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <prvAddNewTaskToReadyList+0xbc>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dde:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <prvAddNewTaskToReadyList+0xbc>)
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004de4:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <prvAddNewTaskToReadyList+0xb8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d110      	bne.n	8004e0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dec:	f000 fb80 	bl	80054f0 <prvInitialiseTaskLists>
 8004df0:	e00d      	b.n	8004e0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004df2:	4b23      	ldr	r3, [pc, #140]	; (8004e80 <prvAddNewTaskToReadyList+0xc0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <prvAddNewTaskToReadyList+0xbc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d802      	bhi.n	8004e0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e08:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <prvAddNewTaskToReadyList+0xbc>)
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <prvAddNewTaskToReadyList+0xc4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <prvAddNewTaskToReadyList+0xc4>)
 8004e16:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <prvAddNewTaskToReadyList+0xc4>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e24:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <prvAddNewTaskToReadyList+0xc8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d903      	bls.n	8004e34 <prvAddNewTaskToReadyList+0x74>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e30:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <prvAddNewTaskToReadyList+0xc8>)
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	0013      	movs	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	189b      	adds	r3, r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <prvAddNewTaskToReadyList+0xcc>)
 8004e42:	189a      	adds	r2, r3, r2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3304      	adds	r3, #4
 8004e48:	0019      	movs	r1, r3
 8004e4a:	0010      	movs	r0, r2
 8004e4c:	f7ff f9e9 	bl	8004222 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e50:	f001 f858 	bl	8005f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <prvAddNewTaskToReadyList+0xc0>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <prvAddNewTaskToReadyList+0xbc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d201      	bcs.n	8004e6e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e6a:	f001 f829 	bl	8005ec0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b002      	add	sp, #8
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	20000ebc 	.word	0x20000ebc
 8004e7c:	200009e8 	.word	0x200009e8
 8004e80:	20000ec8 	.word	0x20000ec8
 8004e84:	20000ed8 	.word	0x20000ed8
 8004e88:	20000ec4 	.word	0x20000ec4
 8004e8c:	200009ec 	.word	0x200009ec

08004e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b089      	sub	sp, #36	; 0x24
 8004e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e9e:	003a      	movs	r2, r7
 8004ea0:	1d39      	adds	r1, r7, #4
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7ff f962 	bl	8004170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004eac:	683c      	ldr	r4, [r7, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	491e      	ldr	r1, [pc, #120]	; (8004f2c <vTaskStartScheduler+0x9c>)
 8004eb4:	481e      	ldr	r0, [pc, #120]	; (8004f30 <vTaskStartScheduler+0xa0>)
 8004eb6:	9202      	str	r2, [sp, #8]
 8004eb8:	9301      	str	r3, [sp, #4]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	0022      	movs	r2, r4
 8004ec2:	f7ff fe56 	bl	8004b72 <xTaskCreateStatic>
 8004ec6:	0002      	movs	r2, r0
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <vTaskStartScheduler+0xa4>)
 8004eca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <vTaskStartScheduler+0xa4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e001      	b.n	8004ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d103      	bne.n	8004eec <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004ee4:	f000 fc94 	bl	8005810 <xTimerCreateTimerTask>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d113      	bne.n	8004f1a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004ef2:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ef4:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <vTaskStartScheduler+0xa8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3354      	adds	r3, #84	; 0x54
 8004efa:	001a      	movs	r2, r3
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <vTaskStartScheduler+0xac>)
 8004efe:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f00:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <vTaskStartScheduler+0xb0>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	4252      	negs	r2, r2
 8004f06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <vTaskStartScheduler+0xb4>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <vTaskStartScheduler+0xb8>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f14:	f000 ffb0 	bl	8005e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f18:	e004      	b.n	8004f24 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <vTaskStartScheduler+0x94>
 8004f20:	b672      	cpsid	i
 8004f22:	e7fe      	b.n	8004f22 <vTaskStartScheduler+0x92>
}
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b005      	add	sp, #20
 8004f2a:	bd90      	pop	{r4, r7, pc}
 8004f2c:	080065a8 	.word	0x080065a8
 8004f30:	080054d1 	.word	0x080054d1
 8004f34:	20000ee0 	.word	0x20000ee0
 8004f38:	200009e8 	.word	0x200009e8
 8004f3c:	20000010 	.word	0x20000010
 8004f40:	20000edc 	.word	0x20000edc
 8004f44:	20000ec8 	.word	0x20000ec8
 8004f48:	20000ec0 	.word	0x20000ec0

08004f4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <vTaskSuspendAll+0x14>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <vTaskSuspendAll+0x14>)
 8004f58:	601a      	str	r2, [r3, #0]
}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20000ee4 	.word	0x20000ee4

08004f64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f72:	4b3a      	ldr	r3, [pc, #232]	; (800505c <xTaskResumeAll+0xf8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <xTaskResumeAll+0x1a>
 8004f7a:	b672      	cpsid	i
 8004f7c:	e7fe      	b.n	8004f7c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f7e:	f000 ffaf 	bl	8005ee0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f82:	4b36      	ldr	r3, [pc, #216]	; (800505c <xTaskResumeAll+0xf8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	1e5a      	subs	r2, r3, #1
 8004f88:	4b34      	ldr	r3, [pc, #208]	; (800505c <xTaskResumeAll+0xf8>)
 8004f8a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8c:	4b33      	ldr	r3, [pc, #204]	; (800505c <xTaskResumeAll+0xf8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d15b      	bne.n	800504c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f94:	4b32      	ldr	r3, [pc, #200]	; (8005060 <xTaskResumeAll+0xfc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d057      	beq.n	800504c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f9c:	e02f      	b.n	8004ffe <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f9e:	4b31      	ldr	r3, [pc, #196]	; (8005064 <xTaskResumeAll+0x100>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3318      	adds	r3, #24
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7ff f991 	bl	80042d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7ff f98c 	bl	80042d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	4b2a      	ldr	r3, [pc, #168]	; (8005068 <xTaskResumeAll+0x104>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d903      	bls.n	8004fce <xTaskResumeAll+0x6a>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fca:	4b27      	ldr	r3, [pc, #156]	; (8005068 <xTaskResumeAll+0x104>)
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd2:	0013      	movs	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4a24      	ldr	r2, [pc, #144]	; (800506c <xTaskResumeAll+0x108>)
 8004fdc:	189a      	adds	r2, r3, r2
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	0019      	movs	r1, r3
 8004fe4:	0010      	movs	r0, r2
 8004fe6:	f7ff f91c 	bl	8004222 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	4b20      	ldr	r3, [pc, #128]	; (8005070 <xTaskResumeAll+0x10c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <xTaskResumeAll+0x110>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ffe:	4b19      	ldr	r3, [pc, #100]	; (8005064 <xTaskResumeAll+0x100>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1cb      	bne.n	8004f9e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800500c:	f000 fb10 	bl	8005630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <xTaskResumeAll+0x114>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00f      	beq.n	800503c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800501c:	f000 f83c 	bl	8005098 <xTaskIncrementTick>
 8005020:	1e03      	subs	r3, r0, #0
 8005022:	d002      	beq.n	800502a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005024:	4b13      	ldr	r3, [pc, #76]	; (8005074 <xTaskResumeAll+0x110>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3b01      	subs	r3, #1
 800502e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f2      	bne.n	800501c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005036:	4b10      	ldr	r3, [pc, #64]	; (8005078 <xTaskResumeAll+0x114>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800503c:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <xTaskResumeAll+0x110>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005044:	2301      	movs	r3, #1
 8005046:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005048:	f000 ff3a 	bl	8005ec0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800504c:	f000 ff5a 	bl	8005f04 <vPortExitCritical>

	return xAlreadyYielded;
 8005050:	68bb      	ldr	r3, [r7, #8]
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b004      	add	sp, #16
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	20000ee4 	.word	0x20000ee4
 8005060:	20000ebc 	.word	0x20000ebc
 8005064:	20000e7c 	.word	0x20000e7c
 8005068:	20000ec4 	.word	0x20000ec4
 800506c:	200009ec 	.word	0x200009ec
 8005070:	200009e8 	.word	0x200009e8
 8005074:	20000ed0 	.word	0x20000ed0
 8005078:	20000ecc 	.word	0x20000ecc

0800507c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005082:	4b04      	ldr	r3, [pc, #16]	; (8005094 <xTaskGetTickCount+0x18>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005088:	687b      	ldr	r3, [r7, #4]
}
 800508a:	0018      	movs	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	b002      	add	sp, #8
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	20000ec0 	.word	0x20000ec0

08005098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a2:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <xTaskIncrementTick+0x13c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d000      	beq.n	80050ac <xTaskIncrementTick+0x14>
 80050aa:	e083      	b.n	80051b4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050ac:	4b4a      	ldr	r3, [pc, #296]	; (80051d8 <xTaskIncrementTick+0x140>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050b4:	4b48      	ldr	r3, [pc, #288]	; (80051d8 <xTaskIncrementTick+0x140>)
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d117      	bne.n	80050f0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80050c0:	4b46      	ldr	r3, [pc, #280]	; (80051dc <xTaskIncrementTick+0x144>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <xTaskIncrementTick+0x36>
 80050ca:	b672      	cpsid	i
 80050cc:	e7fe      	b.n	80050cc <xTaskIncrementTick+0x34>
 80050ce:	4b43      	ldr	r3, [pc, #268]	; (80051dc <xTaskIncrementTick+0x144>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <xTaskIncrementTick+0x148>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b40      	ldr	r3, [pc, #256]	; (80051dc <xTaskIncrementTick+0x144>)
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	4b40      	ldr	r3, [pc, #256]	; (80051e0 <xTaskIncrementTick+0x148>)
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	4b40      	ldr	r3, [pc, #256]	; (80051e4 <xTaskIncrementTick+0x14c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	4b3e      	ldr	r3, [pc, #248]	; (80051e4 <xTaskIncrementTick+0x14c>)
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	f000 faa0 	bl	8005630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050f0:	4b3d      	ldr	r3, [pc, #244]	; (80051e8 <xTaskIncrementTick+0x150>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d34e      	bcc.n	8005198 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050fa:	4b38      	ldr	r3, [pc, #224]	; (80051dc <xTaskIncrementTick+0x144>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <xTaskIncrementTick+0x70>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <xTaskIncrementTick+0x72>
 8005108:	2300      	movs	r3, #0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800510e:	4b36      	ldr	r3, [pc, #216]	; (80051e8 <xTaskIncrementTick+0x150>)
 8005110:	2201      	movs	r2, #1
 8005112:	4252      	negs	r2, r2
 8005114:	601a      	str	r2, [r3, #0]
					break;
 8005116:	e03f      	b.n	8005198 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005118:	4b30      	ldr	r3, [pc, #192]	; (80051dc <xTaskIncrementTick+0x144>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d203      	bcs.n	8005138 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005130:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <xTaskIncrementTick+0x150>)
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
						break;
 8005136:	e02f      	b.n	8005198 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	3304      	adds	r3, #4
 800513c:	0018      	movs	r0, r3
 800513e:	f7ff f8c8 	bl	80042d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	3318      	adds	r3, #24
 800514e:	0018      	movs	r0, r3
 8005150:	f7ff f8bf 	bl	80042d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	4b24      	ldr	r3, [pc, #144]	; (80051ec <xTaskIncrementTick+0x154>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d903      	bls.n	8005168 <xTaskIncrementTick+0xd0>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	4b21      	ldr	r3, [pc, #132]	; (80051ec <xTaskIncrementTick+0x154>)
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516c:	0013      	movs	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	189b      	adds	r3, r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4a1e      	ldr	r2, [pc, #120]	; (80051f0 <xTaskIncrementTick+0x158>)
 8005176:	189a      	adds	r2, r3, r2
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	3304      	adds	r3, #4
 800517c:	0019      	movs	r1, r3
 800517e:	0010      	movs	r0, r2
 8005180:	f7ff f84f 	bl	8004222 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <xTaskIncrementTick+0x15c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	429a      	cmp	r2, r3
 8005190:	d3b3      	bcc.n	80050fa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005192:	2301      	movs	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005196:	e7b0      	b.n	80050fa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005198:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <xTaskIncrementTick+0x15c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	4914      	ldr	r1, [pc, #80]	; (80051f0 <xTaskIncrementTick+0x158>)
 80051a0:	0013      	movs	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	189b      	adds	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	585b      	ldr	r3, [r3, r1]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d907      	bls.n	80051be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e004      	b.n	80051be <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80051b4:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <xTaskIncrementTick+0x160>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <xTaskIncrementTick+0x160>)
 80051bc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <xTaskIncrementTick+0x164>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80051ca:	697b      	ldr	r3, [r7, #20]
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b006      	add	sp, #24
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000ee4 	.word	0x20000ee4
 80051d8:	20000ec0 	.word	0x20000ec0
 80051dc:	20000e74 	.word	0x20000e74
 80051e0:	20000e78 	.word	0x20000e78
 80051e4:	20000ed4 	.word	0x20000ed4
 80051e8:	20000edc 	.word	0x20000edc
 80051ec:	20000ec4 	.word	0x20000ec4
 80051f0:	200009ec 	.word	0x200009ec
 80051f4:	200009e8 	.word	0x200009e8
 80051f8:	20000ecc 	.word	0x20000ecc
 80051fc:	20000ed0 	.word	0x20000ed0

08005200 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005206:	4b25      	ldr	r3, [pc, #148]	; (800529c <vTaskSwitchContext+0x9c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800520e:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <vTaskSwitchContext+0xa0>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005214:	e03d      	b.n	8005292 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8005216:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <vTaskSwitchContext+0xa0>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800521c:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <vTaskSwitchContext+0xa4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	e007      	b.n	8005234 <vTaskSwitchContext+0x34>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <vTaskSwitchContext+0x2e>
 800522a:	b672      	cpsid	i
 800522c:	e7fe      	b.n	800522c <vTaskSwitchContext+0x2c>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3b01      	subs	r3, #1
 8005232:	607b      	str	r3, [r7, #4]
 8005234:	491c      	ldr	r1, [pc, #112]	; (80052a8 <vTaskSwitchContext+0xa8>)
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	0013      	movs	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	189b      	adds	r3, r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	585b      	ldr	r3, [r3, r1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0ee      	beq.n	8005224 <vTaskSwitchContext+0x24>
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	0013      	movs	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	189b      	adds	r3, r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <vTaskSwitchContext+0xa8>)
 8005252:	189b      	adds	r3, r3, r2
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	605a      	str	r2, [r3, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	3308      	adds	r3, #8
 8005268:	429a      	cmp	r2, r3
 800526a:	d104      	bne.n	8005276 <vTaskSwitchContext+0x76>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <vTaskSwitchContext+0xac>)
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <vTaskSwitchContext+0xa4>)
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <vTaskSwitchContext+0xac>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3354      	adds	r3, #84	; 0x54
 800528c:	001a      	movs	r2, r3
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <vTaskSwitchContext+0xb0>)
 8005290:	601a      	str	r2, [r3, #0]
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b002      	add	sp, #8
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	20000ee4 	.word	0x20000ee4
 80052a0:	20000ed0 	.word	0x20000ed0
 80052a4:	20000ec4 	.word	0x20000ec4
 80052a8:	200009ec 	.word	0x200009ec
 80052ac:	200009e8 	.word	0x200009e8
 80052b0:	20000010 	.word	0x20000010

080052b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <vTaskPlaceOnEventList+0x14>
 80052c4:	b672      	cpsid	i
 80052c6:	e7fe      	b.n	80052c6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <vTaskPlaceOnEventList+0x38>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3318      	adds	r3, #24
 80052ce:	001a      	movs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	0011      	movs	r1, r2
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7fe ffc6 	bl	8004266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2101      	movs	r1, #1
 80052de:	0018      	movs	r0, r3
 80052e0:	f000 fa42 	bl	8005768 <prvAddCurrentTaskToDelayedList>
}
 80052e4:	46c0      	nop			; (mov r8, r8)
 80052e6:	46bd      	mov	sp, r7
 80052e8:	b002      	add	sp, #8
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200009e8 	.word	0x200009e8

080052f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <vTaskPlaceOnEventListRestricted+0x16>
 8005302:	b672      	cpsid	i
 8005304:	e7fe      	b.n	8005304 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005306:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <vTaskPlaceOnEventListRestricted+0x48>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3318      	adds	r3, #24
 800530c:	001a      	movs	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	0011      	movs	r1, r2
 8005312:	0018      	movs	r0, r3
 8005314:	f7fe ff85 	bl	8004222 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800531e:	2301      	movs	r3, #1
 8005320:	425b      	negs	r3, r3
 8005322:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	0011      	movs	r1, r2
 800532a:	0018      	movs	r0, r3
 800532c:	f000 fa1c 	bl	8005768 <prvAddCurrentTaskToDelayedList>
	}
 8005330:	46c0      	nop			; (mov r8, r8)
 8005332:	46bd      	mov	sp, r7
 8005334:	b004      	add	sp, #16
 8005336:	bd80      	pop	{r7, pc}
 8005338:	200009e8 	.word	0x200009e8

0800533c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <xTaskRemoveFromEventList+0x1a>
 8005352:	b672      	cpsid	i
 8005354:	e7fe      	b.n	8005354 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	3318      	adds	r3, #24
 800535a:	0018      	movs	r0, r3
 800535c:	f7fe ffb9 	bl	80042d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005360:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <xTaskRemoveFromEventList+0xa0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d11d      	bne.n	80053a4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	3304      	adds	r3, #4
 800536c:	0018      	movs	r0, r3
 800536e:	f7fe ffb0 	bl	80042d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005376:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <xTaskRemoveFromEventList+0xa4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d903      	bls.n	8005386 <xTaskRemoveFromEventList+0x4a>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <xTaskRemoveFromEventList+0xa4>)
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538a:	0013      	movs	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	189b      	adds	r3, r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <xTaskRemoveFromEventList+0xa8>)
 8005394:	189a      	adds	r2, r3, r2
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	3304      	adds	r3, #4
 800539a:	0019      	movs	r1, r3
 800539c:	0010      	movs	r0, r2
 800539e:	f7fe ff40 	bl	8004222 <vListInsertEnd>
 80053a2:	e007      	b.n	80053b4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	3318      	adds	r3, #24
 80053a8:	001a      	movs	r2, r3
 80053aa:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <xTaskRemoveFromEventList+0xac>)
 80053ac:	0011      	movs	r1, r2
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7fe ff37 	bl	8004222 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <xTaskRemoveFromEventList+0xb0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	429a      	cmp	r2, r3
 80053c0:	d905      	bls.n	80053ce <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053c2:	2301      	movs	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <xTaskRemoveFromEventList+0xb4>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e001      	b.n	80053d2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80053d2:	68fb      	ldr	r3, [r7, #12]
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b004      	add	sp, #16
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000ee4 	.word	0x20000ee4
 80053e0:	20000ec4 	.word	0x20000ec4
 80053e4:	200009ec 	.word	0x200009ec
 80053e8:	20000e7c 	.word	0x20000e7c
 80053ec:	200009e8 	.word	0x200009e8
 80053f0:	20000ed0 	.word	0x20000ed0

080053f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <vTaskInternalSetTimeOutState+0x20>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <vTaskInternalSetTimeOutState+0x24>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	605a      	str	r2, [r3, #4]
}
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	46bd      	mov	sp, r7
 8005410:	b002      	add	sp, #8
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000ed4 	.word	0x20000ed4
 8005418:	20000ec0 	.word	0x20000ec0

0800541c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <xTaskCheckForTimeOut+0x14>
 800542c:	b672      	cpsid	i
 800542e:	e7fe      	b.n	800542e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <xTaskCheckForTimeOut+0x1e>
 8005436:	b672      	cpsid	i
 8005438:	e7fe      	b.n	8005438 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800543a:	f000 fd51 	bl	8005ee0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <xTaskCheckForTimeOut+0x98>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	d102      	bne.n	800545c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	e024      	b.n	80054a6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <xTaskCheckForTimeOut+0x9c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d007      	beq.n	8005478 <xTaskCheckForTimeOut+0x5c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e016      	b.n	80054a6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	429a      	cmp	r2, r3
 8005480:	d20c      	bcs.n	800549c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad2      	subs	r2, r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	0018      	movs	r0, r3
 8005492:	f7ff ffaf 	bl	80053f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e004      	b.n	80054a6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054a2:	2301      	movs	r3, #1
 80054a4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80054a6:	f000 fd2d 	bl	8005f04 <vPortExitCritical>

	return xReturn;
 80054aa:	697b      	ldr	r3, [r7, #20]
}
 80054ac:	0018      	movs	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b006      	add	sp, #24
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000ec0 	.word	0x20000ec0
 80054b8:	20000ed4 	.word	0x20000ed4

080054bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054c0:	4b02      	ldr	r3, [pc, #8]	; (80054cc <vTaskMissedYield+0x10>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000ed0 	.word	0x20000ed0

080054d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054d8:	f000 f84e 	bl	8005578 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054dc:	4b03      	ldr	r3, [pc, #12]	; (80054ec <prvIdleTask+0x1c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d9f9      	bls.n	80054d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054e4:	f000 fcec 	bl	8005ec0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80054e8:	e7f6      	b.n	80054d8 <prvIdleTask+0x8>
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	200009ec 	.word	0x200009ec

080054f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f6:	2300      	movs	r3, #0
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	e00c      	b.n	8005516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	0013      	movs	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	189b      	adds	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4a14      	ldr	r2, [pc, #80]	; (8005558 <prvInitialiseTaskLists+0x68>)
 8005508:	189b      	adds	r3, r3, r2
 800550a:	0018      	movs	r0, r3
 800550c:	f7fe fe60 	bl	80041d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3301      	adds	r3, #1
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b37      	cmp	r3, #55	; 0x37
 800551a:	d9ef      	bls.n	80054fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800551c:	4b0f      	ldr	r3, [pc, #60]	; (800555c <prvInitialiseTaskLists+0x6c>)
 800551e:	0018      	movs	r0, r3
 8005520:	f7fe fe56 	bl	80041d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005524:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <prvInitialiseTaskLists+0x70>)
 8005526:	0018      	movs	r0, r3
 8005528:	f7fe fe52 	bl	80041d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800552c:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <prvInitialiseTaskLists+0x74>)
 800552e:	0018      	movs	r0, r3
 8005530:	f7fe fe4e 	bl	80041d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <prvInitialiseTaskLists+0x78>)
 8005536:	0018      	movs	r0, r3
 8005538:	f7fe fe4a 	bl	80041d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <prvInitialiseTaskLists+0x7c>)
 800553e:	0018      	movs	r0, r3
 8005540:	f7fe fe46 	bl	80041d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <prvInitialiseTaskLists+0x80>)
 8005546:	4a05      	ldr	r2, [pc, #20]	; (800555c <prvInitialiseTaskLists+0x6c>)
 8005548:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <prvInitialiseTaskLists+0x84>)
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <prvInitialiseTaskLists+0x70>)
 800554e:	601a      	str	r2, [r3, #0]
}
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	b002      	add	sp, #8
 8005556:	bd80      	pop	{r7, pc}
 8005558:	200009ec 	.word	0x200009ec
 800555c:	20000e4c 	.word	0x20000e4c
 8005560:	20000e60 	.word	0x20000e60
 8005564:	20000e7c 	.word	0x20000e7c
 8005568:	20000e90 	.word	0x20000e90
 800556c:	20000ea8 	.word	0x20000ea8
 8005570:	20000e74 	.word	0x20000e74
 8005574:	20000e78 	.word	0x20000e78

08005578 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800557e:	e01a      	b.n	80055b6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005580:	f000 fcae 	bl	8005ee0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005584:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <prvCheckTasksWaitingTermination+0x50>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	0018      	movs	r0, r3
 8005592:	f7fe fe9e 	bl	80042d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <prvCheckTasksWaitingTermination+0x54>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	1e5a      	subs	r2, r3, #1
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <prvCheckTasksWaitingTermination+0x54>)
 800559e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <prvCheckTasksWaitingTermination+0x58>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	1e5a      	subs	r2, r3, #1
 80055a6:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <prvCheckTasksWaitingTermination+0x58>)
 80055a8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80055aa:	f000 fcab 	bl	8005f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f000 f80f 	bl	80055d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <prvCheckTasksWaitingTermination+0x58>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e0      	bne.n	8005580 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b002      	add	sp, #8
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000e90 	.word	0x20000e90
 80055cc:	20000ebc 	.word	0x20000ebc
 80055d0:	20000ea4 	.word	0x20000ea4

080055d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3354      	adds	r3, #84	; 0x54
 80055e0:	0018      	movs	r0, r3
 80055e2:	f000 feff 	bl	80063e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	22b9      	movs	r2, #185	; 0xb9
 80055ea:	5c9b      	ldrb	r3, [r3, r2]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	0018      	movs	r0, r3
 80055f6:	f000 fdb1 	bl	800615c <vPortFree>
				vPortFree( pxTCB );
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	0018      	movs	r0, r3
 80055fe:	f000 fdad 	bl	800615c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005602:	e010      	b.n	8005626 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	22b9      	movs	r2, #185	; 0xb9
 8005608:	5c9b      	ldrb	r3, [r3, r2]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d104      	bne.n	8005618 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0018      	movs	r0, r3
 8005612:	f000 fda3 	bl	800615c <vPortFree>
	}
 8005616:	e006      	b.n	8005626 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	22b9      	movs	r2, #185	; 0xb9
 800561c:	5c9b      	ldrb	r3, [r3, r2]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d001      	beq.n	8005626 <prvDeleteTCB+0x52>
 8005622:	b672      	cpsid	i
 8005624:	e7fe      	b.n	8005624 <prvDeleteTCB+0x50>
	}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	46bd      	mov	sp, r7
 800562a:	b002      	add	sp, #8
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <prvResetNextTaskUnblockTime+0x40>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <prvResetNextTaskUnblockTime+0x14>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <prvResetNextTaskUnblockTime+0x16>
 8005644:	2300      	movs	r3, #0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <prvResetNextTaskUnblockTime+0x44>)
 800564c:	2201      	movs	r2, #1
 800564e:	4252      	negs	r2, r2
 8005650:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005652:	e008      	b.n	8005666 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005654:	4b06      	ldr	r3, [pc, #24]	; (8005670 <prvResetNextTaskUnblockTime+0x40>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	4b04      	ldr	r3, [pc, #16]	; (8005674 <prvResetNextTaskUnblockTime+0x44>)
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	46bd      	mov	sp, r7
 800566a:	b002      	add	sp, #8
 800566c:	bd80      	pop	{r7, pc}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	20000e74 	.word	0x20000e74
 8005674:	20000edc 	.word	0x20000edc

08005678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800567e:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <xTaskGetSchedulerState+0x30>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d102      	bne.n	800568c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005686:	2301      	movs	r3, #1
 8005688:	607b      	str	r3, [r7, #4]
 800568a:	e008      	b.n	800569e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <xTaskGetSchedulerState+0x34>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005694:	2302      	movs	r3, #2
 8005696:	607b      	str	r3, [r7, #4]
 8005698:	e001      	b.n	800569e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800569a:	2300      	movs	r3, #0
 800569c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800569e:	687b      	ldr	r3, [r7, #4]
	}
 80056a0:	0018      	movs	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b002      	add	sp, #8
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000ec8 	.word	0x20000ec8
 80056ac:	20000ee4 	.word	0x20000ee4

080056b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d044      	beq.n	8005750 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056c6:	4b25      	ldr	r3, [pc, #148]	; (800575c <xTaskPriorityDisinherit+0xac>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <xTaskPriorityDisinherit+0x24>
 80056d0:	b672      	cpsid	i
 80056d2:	e7fe      	b.n	80056d2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <xTaskPriorityDisinherit+0x30>
 80056dc:	b672      	cpsid	i
 80056de:	e7fe      	b.n	80056de <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	1e5a      	subs	r2, r3, #1
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d02c      	beq.n	8005750 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d128      	bne.n	8005750 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	3304      	adds	r3, #4
 8005702:	0018      	movs	r0, r3
 8005704:	f7fe fde5 	bl	80042d2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	2238      	movs	r2, #56	; 0x38
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <xTaskPriorityDisinherit+0xb0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d903      	bls.n	8005730 <xTaskPriorityDisinherit+0x80>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <xTaskPriorityDisinherit+0xb0>)
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	0013      	movs	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	189b      	adds	r3, r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4a09      	ldr	r2, [pc, #36]	; (8005764 <xTaskPriorityDisinherit+0xb4>)
 800573e:	189a      	adds	r2, r3, r2
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	3304      	adds	r3, #4
 8005744:	0019      	movs	r1, r3
 8005746:	0010      	movs	r0, r2
 8005748:	f7fe fd6b 	bl	8004222 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800574c:	2301      	movs	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005750:	68fb      	ldr	r3, [r7, #12]
	}
 8005752:	0018      	movs	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	b004      	add	sp, #16
 8005758:	bd80      	pop	{r7, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	200009e8 	.word	0x200009e8
 8005760:	20000ec4 	.word	0x20000ec4
 8005764:	200009ec 	.word	0x200009ec

08005768 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005772:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005778:	4b20      	ldr	r3, [pc, #128]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3304      	adds	r3, #4
 800577e:	0018      	movs	r0, r3
 8005780:	f7fe fda7 	bl	80042d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3301      	adds	r3, #1
 8005788:	d10b      	bne.n	80057a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005790:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	1d1a      	adds	r2, r3, #4
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <prvAddCurrentTaskToDelayedList+0x98>)
 8005798:	0011      	movs	r1, r2
 800579a:	0018      	movs	r0, r3
 800579c:	f7fe fd41 	bl	8004222 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057a0:	e026      	b.n	80057f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	18d3      	adds	r3, r2, r3
 80057a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d209      	bcs.n	80057ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3304      	adds	r3, #4
 80057c4:	0019      	movs	r1, r3
 80057c6:	0010      	movs	r0, r2
 80057c8:	f7fe fd4d 	bl	8004266 <vListInsert>
}
 80057cc:	e010      	b.n	80057f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ce:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3304      	adds	r3, #4
 80057d8:	0019      	movs	r1, r3
 80057da:	0010      	movs	r0, r2
 80057dc:	f7fe fd43 	bl	8004266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <prvAddCurrentTaskToDelayedList+0xa4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d202      	bcs.n	80057f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057ea:	4b08      	ldr	r3, [pc, #32]	; (800580c <prvAddCurrentTaskToDelayedList+0xa4>)
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	601a      	str	r2, [r3, #0]
}
 80057f0:	46c0      	nop			; (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b004      	add	sp, #16
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000ec0 	.word	0x20000ec0
 80057fc:	200009e8 	.word	0x200009e8
 8005800:	20000ea8 	.word	0x20000ea8
 8005804:	20000e78 	.word	0x20000e78
 8005808:	20000e74 	.word	0x20000e74
 800580c:	20000edc 	.word	0x20000edc

08005810 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b089      	sub	sp, #36	; 0x24
 8005814:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800581a:	f000 fa87 	bl	8005d2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800581e:	4b17      	ldr	r3, [pc, #92]	; (800587c <xTimerCreateTimerTask+0x6c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d020      	beq.n	8005868 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800582e:	003a      	movs	r2, r7
 8005830:	1d39      	adds	r1, r7, #4
 8005832:	2308      	movs	r3, #8
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	0018      	movs	r0, r3
 8005838:	f7fe fcb2 	bl	80041a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800583c:	683c      	ldr	r4, [r7, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	490f      	ldr	r1, [pc, #60]	; (8005880 <xTimerCreateTimerTask+0x70>)
 8005844:	480f      	ldr	r0, [pc, #60]	; (8005884 <xTimerCreateTimerTask+0x74>)
 8005846:	9202      	str	r2, [sp, #8]
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	2306      	movs	r3, #6
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	2300      	movs	r3, #0
 8005850:	0022      	movs	r2, r4
 8005852:	f7ff f98e 	bl	8004b72 <xTaskCreateStatic>
 8005856:	0002      	movs	r2, r0
 8005858:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <xTimerCreateTimerTask+0x78>)
 800585a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <xTimerCreateTimerTask+0x78>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005864:	2301      	movs	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <xTimerCreateTimerTask+0x62>
 800586e:	b672      	cpsid	i
 8005870:	e7fe      	b.n	8005870 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8005872:	68fb      	ldr	r3, [r7, #12]
}
 8005874:	0018      	movs	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	b005      	add	sp, #20
 800587a:	bd90      	pop	{r4, r7, pc}
 800587c:	20000f18 	.word	0x20000f18
 8005880:	080065b0 	.word	0x080065b0
 8005884:	08005991 	.word	0x08005991
 8005888:	20000f1c 	.word	0x20000f1c

0800588c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b08b      	sub	sp, #44	; 0x2c
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800589a:	2300      	movs	r3, #0
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <xTimerGenericCommand+0x1c>
 80058a4:	b672      	cpsid	i
 80058a6:	e7fe      	b.n	80058a6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058a8:	4b1c      	ldr	r3, [pc, #112]	; (800591c <xTimerGenericCommand+0x90>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d030      	beq.n	8005912 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058b0:	2414      	movs	r4, #20
 80058b2:	193b      	adds	r3, r7, r4
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058b8:	193b      	adds	r3, r7, r4
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80058be:	193b      	adds	r3, r7, r4
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	dc19      	bgt.n	80058fe <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058ca:	f7ff fed5 	bl	8005678 <xTaskGetSchedulerState>
 80058ce:	0003      	movs	r3, r0
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d109      	bne.n	80058e8 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058d4:	4b11      	ldr	r3, [pc, #68]	; (800591c <xTimerGenericCommand+0x90>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058da:	1939      	adds	r1, r7, r4
 80058dc:	2300      	movs	r3, #0
 80058de:	f7fe fde6 	bl	80044ae <xQueueGenericSend>
 80058e2:	0003      	movs	r3, r0
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
 80058e6:	e014      	b.n	8005912 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <xTimerGenericCommand+0x90>)
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	2314      	movs	r3, #20
 80058ee:	18f9      	adds	r1, r7, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	2200      	movs	r2, #0
 80058f4:	f7fe fddb 	bl	80044ae <xQueueGenericSend>
 80058f8:	0003      	movs	r3, r0
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
 80058fc:	e009      	b.n	8005912 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058fe:	4b07      	ldr	r3, [pc, #28]	; (800591c <xTimerGenericCommand+0x90>)
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	2314      	movs	r3, #20
 8005906:	18f9      	adds	r1, r7, r3
 8005908:	2300      	movs	r3, #0
 800590a:	f7fe fe94 	bl	8004636 <xQueueGenericSendFromISR>
 800590e:	0003      	movs	r3, r0
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005914:	0018      	movs	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	b00b      	add	sp, #44	; 0x2c
 800591a:	bd90      	pop	{r4, r7, pc}
 800591c:	20000f18 	.word	0x20000f18

08005920 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af02      	add	r7, sp, #8
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <prvProcessExpiredTimer+0x6c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3304      	adds	r3, #4
 8005938:	0018      	movs	r0, r3
 800593a:	f7fe fcca 	bl	80042d2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d119      	bne.n	800597a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	18d1      	adds	r1, r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f8b6 	bl	8005ac4 <prvInsertTimerInActiveList>
 8005958:	1e03      	subs	r3, r0, #0
 800595a:	d00e      	beq.n	800597a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	2300      	movs	r3, #0
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	2100      	movs	r1, #0
 8005968:	f7ff ff90 	bl	800588c <xTimerGenericCommand>
 800596c:	0003      	movs	r3, r0
 800596e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <prvProcessExpiredTimer+0x5a>
 8005976:	b672      	cpsid	i
 8005978:	e7fe      	b.n	8005978 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	0010      	movs	r0, r2
 8005982:	4798      	blx	r3
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	b004      	add	sp, #16
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20000f10 	.word	0x20000f10

08005990 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005998:	2308      	movs	r3, #8
 800599a:	18fb      	adds	r3, r7, r3
 800599c:	0018      	movs	r0, r3
 800599e:	f000 f851 	bl	8005a44 <prvGetNextExpireTime>
 80059a2:	0003      	movs	r3, r0
 80059a4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	0011      	movs	r1, r2
 80059ac:	0018      	movs	r0, r3
 80059ae:	f000 f803 	bl	80059b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059b2:	f000 f8c9 	bl	8005b48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059b6:	e7ef      	b.n	8005998 <prvTimerTask+0x8>

080059b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059c2:	f7ff fac3 	bl	8004f4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059c6:	2308      	movs	r3, #8
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	0018      	movs	r0, r3
 80059cc:	f000 f85a 	bl	8005a84 <prvSampleTimeNow>
 80059d0:	0003      	movs	r3, r0
 80059d2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d129      	bne.n	8005a2e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10c      	bne.n	80059fa <prvProcessTimerOrBlockTask+0x42>
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d808      	bhi.n	80059fa <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80059e8:	f7ff fabc 	bl	8004f64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0011      	movs	r1, r2
 80059f2:	0018      	movs	r0, r3
 80059f4:	f7ff ff94 	bl	8005920 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059f8:	e01b      	b.n	8005a32 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d006      	beq.n	8005a0e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a00:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <prvProcessTimerOrBlockTask+0x84>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	425a      	negs	r2, r3
 8005a08:	4153      	adcs	r3, r2
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <prvProcessTimerOrBlockTask+0x88>)
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	f7ff f876 	bl	8004b0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a20:	f7ff faa0 	bl	8004f64 <xTaskResumeAll>
 8005a24:	1e03      	subs	r3, r0, #0
 8005a26:	d104      	bne.n	8005a32 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005a28:	f000 fa4a 	bl	8005ec0 <vPortYield>
}
 8005a2c:	e001      	b.n	8005a32 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8005a2e:	f7ff fa99 	bl	8004f64 <xTaskResumeAll>
}
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b004      	add	sp, #16
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	20000f14 	.word	0x20000f14
 8005a40:	20000f18 	.word	0x20000f18

08005a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <prvGetNextExpireTime+0x3c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	425a      	negs	r2, r3
 8005a54:	4153      	adcs	r3, r2
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	001a      	movs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d105      	bne.n	8005a72 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <prvGetNextExpireTime+0x3c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e001      	b.n	8005a76 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a76:	68fb      	ldr	r3, [r7, #12]
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b004      	add	sp, #16
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	20000f10 	.word	0x20000f10

08005a84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a8c:	f7ff faf6 	bl	800507c <xTaskGetTickCount>
 8005a90:	0003      	movs	r3, r0
 8005a92:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <prvSampleTimeNow+0x3c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d205      	bcs.n	8005aaa <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005a9e:	f000 f8eb 	bl	8005c78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e002      	b.n	8005ab0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <prvSampleTimeNow+0x3c>)
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b004      	add	sp, #16
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000f20 	.word	0x20000f20

08005ac4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d812      	bhi.n	8005b10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e01b      	b.n	8005b36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005afe:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <prvInsertTimerInActiveList+0x7c>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3304      	adds	r3, #4
 8005b06:	0019      	movs	r1, r3
 8005b08:	0010      	movs	r0, r2
 8005b0a:	f7fe fbac 	bl	8004266 <vListInsert>
 8005b0e:	e012      	b.n	8005b36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d206      	bcs.n	8005b26 <prvInsertTimerInActiveList+0x62>
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d302      	bcc.n	8005b26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b20:	2301      	movs	r3, #1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e007      	b.n	8005b36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b26:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <prvInsertTimerInActiveList+0x80>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	0019      	movs	r1, r3
 8005b30:	0010      	movs	r0, r2
 8005b32:	f7fe fb98 	bl	8004266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b36:	697b      	ldr	r3, [r7, #20]
}
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b006      	add	sp, #24
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000f14 	.word	0x20000f14
 8005b44:	20000f10 	.word	0x20000f10

08005b48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b48:	b590      	push	{r4, r7, lr}
 8005b4a:	b08d      	sub	sp, #52	; 0x34
 8005b4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b4e:	e07f      	b.n	8005c50 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b50:	2208      	movs	r2, #8
 8005b52:	18bb      	adds	r3, r7, r2
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	da0f      	bge.n	8005b7a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b5a:	18bb      	adds	r3, r7, r2
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <prvProcessReceivedCommands+0x22>
 8005b66:	b672      	cpsid	i
 8005b68:	e7fe      	b.n	8005b68 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	6858      	ldr	r0, [r3, #4]
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	0019      	movs	r1, r3
 8005b78:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	18bb      	adds	r3, r7, r2
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	db64      	blt.n	8005c4e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b84:	18bb      	adds	r3, r7, r2
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	3304      	adds	r3, #4
 8005b96:	0018      	movs	r0, r3
 8005b98:	f7fe fb9b 	bl	80042d2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f7ff ff70 	bl	8005a84 <prvSampleTimeNow>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8005ba8:	2308      	movs	r3, #8
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	d84e      	bhi.n	8005c50 <prvProcessReceivedCommands+0x108>
 8005bb2:	009a      	lsls	r2, r3, #2
 8005bb4:	4b2e      	ldr	r3, [pc, #184]	; (8005c70 <prvProcessReceivedCommands+0x128>)
 8005bb6:	18d3      	adds	r3, r2, r3
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bbc:	2408      	movs	r4, #8
 8005bbe:	193b      	adds	r3, r7, r4
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	18d1      	adds	r1, r2, r3
 8005bc8:	193b      	adds	r3, r7, r4
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	6a38      	ldr	r0, [r7, #32]
 8005bd0:	f7ff ff78 	bl	8005ac4 <prvInsertTimerInActiveList>
 8005bd4:	1e03      	subs	r3, r0, #0
 8005bd6:	d03b      	beq.n	8005c50 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	6a3a      	ldr	r2, [r7, #32]
 8005bde:	0010      	movs	r0, r2
 8005be0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d132      	bne.n	8005c50 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bea:	193b      	adds	r3, r7, r4
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	18d2      	adds	r2, r2, r3
 8005bf4:	6a38      	ldr	r0, [r7, #32]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	f7ff fe45 	bl	800588c <xTimerGenericCommand>
 8005c02:	0003      	movs	r3, r0
 8005c04:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d121      	bne.n	8005c50 <prvProcessReceivedCommands+0x108>
 8005c0c:	b672      	cpsid	i
 8005c0e:	e7fe      	b.n	8005c0e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c10:	2308      	movs	r3, #8
 8005c12:	18fb      	adds	r3, r7, r3
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <prvProcessReceivedCommands+0xde>
 8005c22:	b672      	cpsid	i
 8005c24:	e7fe      	b.n	8005c24 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	18d1      	adds	r1, r2, r3
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	69fa      	ldr	r2, [r7, #28]
 8005c32:	6a38      	ldr	r0, [r7, #32]
 8005c34:	f7ff ff46 	bl	8005ac4 <prvInsertTimerInActiveList>
					break;
 8005c38:	e00a      	b.n	8005c50 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	222c      	movs	r2, #44	; 0x2c
 8005c3e:	5c9b      	ldrb	r3, [r3, r2]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	0018      	movs	r0, r3
 8005c48:	f000 fa88 	bl	800615c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c4c:	e000      	b.n	8005c50 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c4e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c50:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <prvProcessReceivedCommands+0x12c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2208      	movs	r2, #8
 8005c56:	18b9      	adds	r1, r7, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f7fe fd5c 	bl	8004718 <xQueueReceive>
 8005c60:	1e03      	subs	r3, r0, #0
 8005c62:	d000      	beq.n	8005c66 <prvProcessReceivedCommands+0x11e>
 8005c64:	e774      	b.n	8005b50 <prvProcessReceivedCommands+0x8>
	}
}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	46c0      	nop			; (mov r8, r8)
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b00b      	add	sp, #44	; 0x2c
 8005c6e:	bd90      	pop	{r4, r7, pc}
 8005c70:	080065fc 	.word	0x080065fc
 8005c74:	20000f18 	.word	0x20000f18

08005c78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c7e:	e03e      	b.n	8005cfe <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c80:	4b28      	ldr	r3, [pc, #160]	; (8005d24 <prvSwitchTimerLists+0xac>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c8a:	4b26      	ldr	r3, [pc, #152]	; (8005d24 <prvSwitchTimerLists+0xac>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3304      	adds	r3, #4
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7fe fb1a 	bl	80042d2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	0010      	movs	r0, r2
 8005ca6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d126      	bne.n	8005cfe <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	18d3      	adds	r3, r2, r3
 8005cb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d90e      	bls.n	8005ce0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <prvSwitchTimerLists+0xac>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	0019      	movs	r1, r3
 8005cd8:	0010      	movs	r0, r2
 8005cda:	f7fe fac4 	bl	8004266 <vListInsert>
 8005cde:	e00e      	b.n	8005cfe <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2100      	movs	r1, #0
 8005cec:	f7ff fdce 	bl	800588c <xTimerGenericCommand>
 8005cf0:	0003      	movs	r3, r0
 8005cf2:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <prvSwitchTimerLists+0x86>
 8005cfa:	b672      	cpsid	i
 8005cfc:	e7fe      	b.n	8005cfc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <prvSwitchTimerLists+0xac>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1bb      	bne.n	8005c80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d08:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <prvSwitchTimerLists+0xac>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <prvSwitchTimerLists+0xb0>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <prvSwitchTimerLists+0xac>)
 8005d14:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005d16:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <prvSwitchTimerLists+0xb0>)
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	601a      	str	r2, [r3, #0]
}
 8005d1c:	46c0      	nop			; (mov r8, r8)
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b006      	add	sp, #24
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20000f10 	.word	0x20000f10
 8005d28:	20000f14 	.word	0x20000f14

08005d2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d32:	f000 f8d5 	bl	8005ee0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d36:	4b16      	ldr	r3, [pc, #88]	; (8005d90 <prvCheckForValidListAndQueue+0x64>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d123      	bne.n	8005d86 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d3e:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <prvCheckForValidListAndQueue+0x68>)
 8005d40:	0018      	movs	r0, r3
 8005d42:	f7fe fa45 	bl	80041d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d46:	4b14      	ldr	r3, [pc, #80]	; (8005d98 <prvCheckForValidListAndQueue+0x6c>)
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7fe fa41 	bl	80041d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <prvCheckForValidListAndQueue+0x70>)
 8005d50:	4a10      	ldr	r2, [pc, #64]	; (8005d94 <prvCheckForValidListAndQueue+0x68>)
 8005d52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d54:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <prvCheckForValidListAndQueue+0x74>)
 8005d56:	4a10      	ldr	r2, [pc, #64]	; (8005d98 <prvCheckForValidListAndQueue+0x6c>)
 8005d58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d5a:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <prvCheckForValidListAndQueue+0x78>)
 8005d5c:	4a12      	ldr	r2, [pc, #72]	; (8005da8 <prvCheckForValidListAndQueue+0x7c>)
 8005d5e:	2100      	movs	r1, #0
 8005d60:	9100      	str	r1, [sp, #0]
 8005d62:	2110      	movs	r1, #16
 8005d64:	200a      	movs	r0, #10
 8005d66:	f7fe fb30 	bl	80043ca <xQueueGenericCreateStatic>
 8005d6a:	0002      	movs	r2, r0
 8005d6c:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <prvCheckForValidListAndQueue+0x64>)
 8005d6e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d70:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <prvCheckForValidListAndQueue+0x64>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d006      	beq.n	8005d86 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <prvCheckForValidListAndQueue+0x64>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0b      	ldr	r2, [pc, #44]	; (8005dac <prvCheckForValidListAndQueue+0x80>)
 8005d7e:	0011      	movs	r1, r2
 8005d80:	0018      	movs	r0, r3
 8005d82:	f7fe fe9b 	bl	8004abc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f000 f8bd 	bl	8005f04 <vPortExitCritical>
}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000f18 	.word	0x20000f18
 8005d94:	20000ee8 	.word	0x20000ee8
 8005d98:	20000efc 	.word	0x20000efc
 8005d9c:	20000f10 	.word	0x20000f10
 8005da0:	20000f14 	.word	0x20000f14
 8005da4:	20000fc4 	.word	0x20000fc4
 8005da8:	20000f24 	.word	0x20000f24
 8005dac:	080065b8 	.word	0x080065b8

08005db0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3b04      	subs	r3, #4
 8005dc0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2280      	movs	r2, #128	; 0x80
 8005dc6:	0452      	lsls	r2, r2, #17
 8005dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3b04      	subs	r3, #4
 8005dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3b04      	subs	r3, #4
 8005dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ddc:	4a08      	ldr	r2, [pc, #32]	; (8005e00 <pxPortInitialiseStack+0x50>)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3b14      	subs	r3, #20
 8005de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3b20      	subs	r3, #32
 8005df2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005df4:	68fb      	ldr	r3, [r7, #12]
}
 8005df6:	0018      	movs	r0, r3
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b004      	add	sp, #16
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	08005e05 	.word	0x08005e05

08005e04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e0e:	4b08      	ldr	r3, [pc, #32]	; (8005e30 <prvTaskExitError+0x2c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3301      	adds	r3, #1
 8005e14:	d001      	beq.n	8005e1a <prvTaskExitError+0x16>
 8005e16:	b672      	cpsid	i
 8005e18:	e7fe      	b.n	8005e18 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005e1a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005e1c:	46c0      	nop			; (mov r8, r8)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0fc      	beq.n	8005e1e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b002      	add	sp, #8
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	2000000c 	.word	0x2000000c

08005e34 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005e38:	46c0      	nop			; (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005e40:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <pxCurrentTCBConst2>)
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	3020      	adds	r0, #32
 8005e48:	f380 8809 	msr	PSP, r0
 8005e4c:	2002      	movs	r0, #2
 8005e4e:	f380 8814 	msr	CONTROL, r0
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005e58:	46ae      	mov	lr, r5
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	bc04      	pop	{r2}
 8005e5e:	b662      	cpsie	i
 8005e60:	4718      	bx	r3
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	46c0      	nop			; (mov r8, r8)
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	46c0      	nop			; (mov r8, r8)
 8005e6e:	46c0      	nop			; (mov r8, r8)

08005e70 <pxCurrentTCBConst2>:
 8005e70:	200009e8 	.word	0x200009e8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	46c0      	nop			; (mov r8, r8)

08005e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <xPortStartScheduler+0x40>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <xPortStartScheduler+0x40>)
 8005e82:	21ff      	movs	r1, #255	; 0xff
 8005e84:	0409      	lsls	r1, r1, #16
 8005e86:	430a      	orrs	r2, r1
 8005e88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <xPortStartScheduler+0x40>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <xPortStartScheduler+0x40>)
 8005e90:	21ff      	movs	r1, #255	; 0xff
 8005e92:	0609      	lsls	r1, r1, #24
 8005e94:	430a      	orrs	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005e98:	f000 f898 	bl	8005fcc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <xPortStartScheduler+0x44>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005ea2:	f7ff ffcd 	bl	8005e40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ea6:	f7ff f9ab 	bl	8005200 <vTaskSwitchContext>
	prvTaskExitError();
 8005eaa:	f7ff ffab 	bl	8005e04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	e000ed20 	.word	0xe000ed20
 8005ebc:	2000000c 	.word	0x2000000c

08005ec0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <vPortYield+0x1c>)
 8005ec6:	2280      	movs	r2, #128	; 0x80
 8005ec8:	0552      	lsls	r2, r2, #21
 8005eca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005ecc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ed0:	f3bf 8f6f 	isb	sy
}
 8005ed4:	46c0      	nop			; (mov r8, r8)
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	e000ed04 	.word	0xe000ed04

08005ee0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005ee4:	b672      	cpsid	i
    uxCriticalNesting++;
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <vPortEnterCritical+0x20>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <vPortEnterCritical+0x20>)
 8005eee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005ef0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ef4:	f3bf 8f6f 	isb	sy
}
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	2000000c 	.word	0x2000000c

08005f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f08:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <vPortExitCritical+0x2c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <vPortExitCritical+0x10>
 8005f10:	b672      	cpsid	i
 8005f12:	e7fe      	b.n	8005f12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <vPortExitCritical+0x2c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	1e5a      	subs	r2, r3, #1
 8005f1a:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <vPortExitCritical+0x2c>)
 8005f1c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005f1e:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <vPortExitCritical+0x2c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d100      	bne.n	8005f28 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005f26:	b662      	cpsie	i
    }
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	2000000c 	.word	0x2000000c

08005f34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005f34:	f3ef 8010 	mrs	r0, PRIMASK
 8005f38:	b672      	cpsid	i
 8005f3a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005f3c:	46c0      	nop			; (mov r8, r8)
 8005f3e:	0018      	movs	r0, r3

08005f40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005f40:	f380 8810 	msr	PRIMASK, r0
 8005f44:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005f46:	46c0      	nop			; (mov r8, r8)
	...

08005f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f50:	f3ef 8009 	mrs	r0, PSP
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <pxCurrentTCBConst>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	3820      	subs	r0, #32
 8005f5a:	6010      	str	r0, [r2, #0]
 8005f5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005f5e:	4644      	mov	r4, r8
 8005f60:	464d      	mov	r5, r9
 8005f62:	4656      	mov	r6, sl
 8005f64:	465f      	mov	r7, fp
 8005f66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005f68:	b508      	push	{r3, lr}
 8005f6a:	b672      	cpsid	i
 8005f6c:	f7ff f948 	bl	8005200 <vTaskSwitchContext>
 8005f70:	b662      	cpsie	i
 8005f72:	bc0c      	pop	{r2, r3}
 8005f74:	6811      	ldr	r1, [r2, #0]
 8005f76:	6808      	ldr	r0, [r1, #0]
 8005f78:	3010      	adds	r0, #16
 8005f7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005f7c:	46a0      	mov	r8, r4
 8005f7e:	46a9      	mov	r9, r5
 8005f80:	46b2      	mov	sl, r6
 8005f82:	46bb      	mov	fp, r7
 8005f84:	f380 8809 	msr	PSP, r0
 8005f88:	3820      	subs	r0, #32
 8005f8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005f8c:	4718      	bx	r3
 8005f8e:	46c0      	nop			; (mov r8, r8)

08005f90 <pxCurrentTCBConst>:
 8005f90:	200009e8 	.word	0x200009e8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005f94:	46c0      	nop			; (mov r8, r8)
 8005f96:	46c0      	nop			; (mov r8, r8)

08005f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f9e:	f7ff ffc9 	bl	8005f34 <ulSetInterruptMaskFromISR>
 8005fa2:	0003      	movs	r3, r0
 8005fa4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fa6:	f7ff f877 	bl	8005098 <xTaskIncrementTick>
 8005faa:	1e03      	subs	r3, r0, #0
 8005fac:	d003      	beq.n	8005fb6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005fae:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <xPortSysTickHandler+0x30>)
 8005fb0:	2280      	movs	r2, #128	; 0x80
 8005fb2:	0552      	lsls	r2, r2, #21
 8005fb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7ff ffc1 	bl	8005f40 <vClearInterruptMaskFromISR>
}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b002      	add	sp, #8
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <prvSetupTimerInterrupt+0x34>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <prvSetupTimerInterrupt+0x38>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <prvSetupTimerInterrupt+0x3c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	22fa      	movs	r2, #250	; 0xfa
 8005fe2:	0091      	lsls	r1, r2, #2
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f7fa f88f 	bl	8000108 <__udivsi3>
 8005fea:	0003      	movs	r3, r0
 8005fec:	001a      	movs	r2, r3
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <prvSetupTimerInterrupt+0x40>)
 8005ff0:	3a01      	subs	r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005ff4:	4b02      	ldr	r3, [pc, #8]	; (8006000 <prvSetupTimerInterrupt+0x34>)
 8005ff6:	2207      	movs	r2, #7
 8005ff8:	601a      	str	r2, [r3, #0]
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	e000e010 	.word	0xe000e010
 8006004:	e000e018 	.word	0xe000e018
 8006008:	20000000 	.word	0x20000000
 800600c:	e000e014 	.word	0xe000e014

08006010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800601c:	f7fe ff96 	bl	8004f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006020:	4b49      	ldr	r3, [pc, #292]	; (8006148 <pvPortMalloc+0x138>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006028:	f000 f8e0 	bl	80061ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800602c:	4b47      	ldr	r3, [pc, #284]	; (800614c <pvPortMalloc+0x13c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	4013      	ands	r3, r2
 8006034:	d000      	beq.n	8006038 <pvPortMalloc+0x28>
 8006036:	e079      	b.n	800612c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d012      	beq.n	8006064 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800603e:	2208      	movs	r2, #8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	189b      	adds	r3, r3, r2
 8006044:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2207      	movs	r2, #7
 800604a:	4013      	ands	r3, r2
 800604c:	d00a      	beq.n	8006064 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2207      	movs	r2, #7
 8006052:	4393      	bics	r3, r2
 8006054:	3308      	adds	r3, #8
 8006056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2207      	movs	r2, #7
 800605c:	4013      	ands	r3, r2
 800605e:	d001      	beq.n	8006064 <pvPortMalloc+0x54>
 8006060:	b672      	cpsid	i
 8006062:	e7fe      	b.n	8006062 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d060      	beq.n	800612c <pvPortMalloc+0x11c>
 800606a:	4b39      	ldr	r3, [pc, #228]	; (8006150 <pvPortMalloc+0x140>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d85b      	bhi.n	800612c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006074:	4b37      	ldr	r3, [pc, #220]	; (8006154 <pvPortMalloc+0x144>)
 8006076:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006078:	4b36      	ldr	r3, [pc, #216]	; (8006154 <pvPortMalloc+0x144>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800607e:	e004      	b.n	800608a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d903      	bls.n	800609c <pvPortMalloc+0x8c>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f1      	bne.n	8006080 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <pvPortMalloc+0x138>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d042      	beq.n	800612c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2208      	movs	r2, #8
 80060ac:	189b      	adds	r3, r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	2308      	movs	r3, #8
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d916      	bls.n	80060f6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	18d3      	adds	r3, r2, r3
 80060ce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2207      	movs	r2, #7
 80060d4:	4013      	ands	r3, r2
 80060d6:	d001      	beq.n	80060dc <pvPortMalloc+0xcc>
 80060d8:	b672      	cpsid	i
 80060da:	e7fe      	b.n	80060da <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	1ad2      	subs	r2, r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 f8db 	bl	80062ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060f6:	4b16      	ldr	r3, [pc, #88]	; (8006150 <pvPortMalloc+0x140>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	4b13      	ldr	r3, [pc, #76]	; (8006150 <pvPortMalloc+0x140>)
 8006102:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006104:	4b12      	ldr	r3, [pc, #72]	; (8006150 <pvPortMalloc+0x140>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	4b13      	ldr	r3, [pc, #76]	; (8006158 <pvPortMalloc+0x148>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d203      	bcs.n	8006118 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006110:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <pvPortMalloc+0x140>)
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <pvPortMalloc+0x148>)
 8006116:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <pvPortMalloc+0x13c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	431a      	orrs	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800612c:	f7fe ff1a 	bl	8004f64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2207      	movs	r2, #7
 8006134:	4013      	ands	r3, r2
 8006136:	d001      	beq.n	800613c <pvPortMalloc+0x12c>
 8006138:	b672      	cpsid	i
 800613a:	e7fe      	b.n	800613a <pvPortMalloc+0x12a>
	return pvReturn;
 800613c:	68fb      	ldr	r3, [r7, #12]
}
 800613e:	0018      	movs	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	b006      	add	sp, #24
 8006144:	bd80      	pop	{r7, pc}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	20001c1c 	.word	0x20001c1c
 800614c:	20001c28 	.word	0x20001c28
 8006150:	20001c20 	.word	0x20001c20
 8006154:	20001c14 	.word	0x20001c14
 8006158:	20001c24 	.word	0x20001c24

0800615c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d035      	beq.n	80061da <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800616e:	2308      	movs	r3, #8
 8006170:	425b      	negs	r3, r3
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	18d3      	adds	r3, r2, r3
 8006176:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	4b18      	ldr	r3, [pc, #96]	; (80061e4 <vPortFree+0x88>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4013      	ands	r3, r2
 8006186:	d101      	bne.n	800618c <vPortFree+0x30>
 8006188:	b672      	cpsid	i
 800618a:	e7fe      	b.n	800618a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <vPortFree+0x3c>
 8006194:	b672      	cpsid	i
 8006196:	e7fe      	b.n	8006196 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <vPortFree+0x88>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4013      	ands	r3, r2
 80061a2:	d01a      	beq.n	80061da <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d116      	bne.n	80061da <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <vPortFree+0x88>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	43db      	mvns	r3, r3
 80061b6:	401a      	ands	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061bc:	f7fe fec6 	bl	8004f4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <vPortFree+0x8c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	18d2      	adds	r2, r2, r3
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <vPortFree+0x8c>)
 80061cc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	0018      	movs	r0, r3
 80061d2:	f000 f86b 	bl	80062ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061d6:	f7fe fec5 	bl	8004f64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	46bd      	mov	sp, r7
 80061de:	b004      	add	sp, #16
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	20001c28 	.word	0x20001c28
 80061e8:	20001c20 	.word	0x20001c20

080061ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061f2:	23c0      	movs	r3, #192	; 0xc0
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061f8:	4b26      	ldr	r3, [pc, #152]	; (8006294 <prvHeapInit+0xa8>)
 80061fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2207      	movs	r2, #7
 8006200:	4013      	ands	r3, r2
 8006202:	d00c      	beq.n	800621e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3307      	adds	r3, #7
 8006208:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2207      	movs	r2, #7
 800620e:	4393      	bics	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1ad2      	subs	r2, r2, r3
 8006218:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <prvHeapInit+0xa8>)
 800621a:	18d3      	adds	r3, r2, r3
 800621c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006222:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <prvHeapInit+0xac>)
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006228:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <prvHeapInit+0xac>)
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	18d3      	adds	r3, r2, r3
 8006234:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006236:	2208      	movs	r2, #8
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2207      	movs	r2, #7
 8006242:	4393      	bics	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4b14      	ldr	r3, [pc, #80]	; (800629c <prvHeapInit+0xb0>)
 800624a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800624c:	4b13      	ldr	r3, [pc, #76]	; (800629c <prvHeapInit+0xb0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2200      	movs	r2, #0
 8006252:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006254:	4b11      	ldr	r3, [pc, #68]	; (800629c <prvHeapInit+0xb0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	1ad2      	subs	r2, r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800626a:	4b0c      	ldr	r3, [pc, #48]	; (800629c <prvHeapInit+0xb0>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <prvHeapInit+0xb4>)
 8006278:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <prvHeapInit+0xb8>)
 8006280:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006282:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <prvHeapInit+0xbc>)
 8006284:	2280      	movs	r2, #128	; 0x80
 8006286:	0612      	lsls	r2, r2, #24
 8006288:	601a      	str	r2, [r3, #0]
}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b004      	add	sp, #16
 8006290:	bd80      	pop	{r7, pc}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	20001014 	.word	0x20001014
 8006298:	20001c14 	.word	0x20001c14
 800629c:	20001c1c 	.word	0x20001c1c
 80062a0:	20001c24 	.word	0x20001c24
 80062a4:	20001c20 	.word	0x20001c20
 80062a8:	20001c28 	.word	0x20001c28

080062ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062b4:	4b27      	ldr	r3, [pc, #156]	; (8006354 <prvInsertBlockIntoFreeList+0xa8>)
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	e002      	b.n	80062c0 <prvInsertBlockIntoFreeList+0x14>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d8f7      	bhi.n	80062ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	18d3      	adds	r3, r2, r3
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d108      	bne.n	80062ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	18d2      	adds	r2, r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	18d2      	adds	r2, r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d118      	bne.n	8006334 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <prvInsertBlockIntoFreeList+0xac>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d00d      	beq.n	800632a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	18d2      	adds	r2, r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e008      	b.n	800633c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <prvInsertBlockIntoFreeList+0xac>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e003      	b.n	800633c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d002      	beq.n	800634a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	46bd      	mov	sp, r7
 800634e:	b004      	add	sp, #16
 8006350:	bd80      	pop	{r7, pc}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	20001c14 	.word	0x20001c14
 8006358:	20001c1c 	.word	0x20001c1c

0800635c <__libc_init_array>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	2600      	movs	r6, #0
 8006360:	4d0c      	ldr	r5, [pc, #48]	; (8006394 <__libc_init_array+0x38>)
 8006362:	4c0d      	ldr	r4, [pc, #52]	; (8006398 <__libc_init_array+0x3c>)
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	42a6      	cmp	r6, r4
 800636a:	d109      	bne.n	8006380 <__libc_init_array+0x24>
 800636c:	2600      	movs	r6, #0
 800636e:	f000 f8f9 	bl	8006564 <_init>
 8006372:	4d0a      	ldr	r5, [pc, #40]	; (800639c <__libc_init_array+0x40>)
 8006374:	4c0a      	ldr	r4, [pc, #40]	; (80063a0 <__libc_init_array+0x44>)
 8006376:	1b64      	subs	r4, r4, r5
 8006378:	10a4      	asrs	r4, r4, #2
 800637a:	42a6      	cmp	r6, r4
 800637c:	d105      	bne.n	800638a <__libc_init_array+0x2e>
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	00b3      	lsls	r3, r6, #2
 8006382:	58eb      	ldr	r3, [r5, r3]
 8006384:	4798      	blx	r3
 8006386:	3601      	adds	r6, #1
 8006388:	e7ee      	b.n	8006368 <__libc_init_array+0xc>
 800638a:	00b3      	lsls	r3, r6, #2
 800638c:	58eb      	ldr	r3, [r5, r3]
 800638e:	4798      	blx	r3
 8006390:	3601      	adds	r6, #1
 8006392:	e7f2      	b.n	800637a <__libc_init_array+0x1e>
 8006394:	08006684 	.word	0x08006684
 8006398:	08006684 	.word	0x08006684
 800639c:	08006684 	.word	0x08006684
 80063a0:	08006688 	.word	0x08006688

080063a4 <__retarget_lock_acquire_recursive>:
 80063a4:	4770      	bx	lr

080063a6 <__retarget_lock_release_recursive>:
 80063a6:	4770      	bx	lr

080063a8 <memcpy>:
 80063a8:	2300      	movs	r3, #0
 80063aa:	b510      	push	{r4, lr}
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d100      	bne.n	80063b2 <memcpy+0xa>
 80063b0:	bd10      	pop	{r4, pc}
 80063b2:	5ccc      	ldrb	r4, [r1, r3]
 80063b4:	54c4      	strb	r4, [r0, r3]
 80063b6:	3301      	adds	r3, #1
 80063b8:	e7f8      	b.n	80063ac <memcpy+0x4>

080063ba <memset>:
 80063ba:	0003      	movs	r3, r0
 80063bc:	1882      	adds	r2, r0, r2
 80063be:	4293      	cmp	r3, r2
 80063c0:	d100      	bne.n	80063c4 <memset+0xa>
 80063c2:	4770      	bx	lr
 80063c4:	7019      	strb	r1, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	e7f9      	b.n	80063be <memset+0x4>

080063ca <cleanup_glue>:
 80063ca:	b570      	push	{r4, r5, r6, lr}
 80063cc:	000d      	movs	r5, r1
 80063ce:	6809      	ldr	r1, [r1, #0]
 80063d0:	0004      	movs	r4, r0
 80063d2:	2900      	cmp	r1, #0
 80063d4:	d001      	beq.n	80063da <cleanup_glue+0x10>
 80063d6:	f7ff fff8 	bl	80063ca <cleanup_glue>
 80063da:	0029      	movs	r1, r5
 80063dc:	0020      	movs	r0, r4
 80063de:	f000 f877 	bl	80064d0 <_free_r>
 80063e2:	bd70      	pop	{r4, r5, r6, pc}

080063e4 <_reclaim_reent>:
 80063e4:	4b31      	ldr	r3, [pc, #196]	; (80064ac <_reclaim_reent+0xc8>)
 80063e6:	b570      	push	{r4, r5, r6, lr}
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	0004      	movs	r4, r0
 80063ec:	4283      	cmp	r3, r0
 80063ee:	d049      	beq.n	8006484 <_reclaim_reent+0xa0>
 80063f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <_reclaim_reent+0x28>
 80063f6:	2500      	movs	r5, #0
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	42ab      	cmp	r3, r5
 80063fc:	d147      	bne.n	800648e <_reclaim_reent+0xaa>
 80063fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006400:	6819      	ldr	r1, [r3, #0]
 8006402:	2900      	cmp	r1, #0
 8006404:	d002      	beq.n	800640c <_reclaim_reent+0x28>
 8006406:	0020      	movs	r0, r4
 8006408:	f000 f862 	bl	80064d0 <_free_r>
 800640c:	6961      	ldr	r1, [r4, #20]
 800640e:	2900      	cmp	r1, #0
 8006410:	d002      	beq.n	8006418 <_reclaim_reent+0x34>
 8006412:	0020      	movs	r0, r4
 8006414:	f000 f85c 	bl	80064d0 <_free_r>
 8006418:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800641a:	2900      	cmp	r1, #0
 800641c:	d002      	beq.n	8006424 <_reclaim_reent+0x40>
 800641e:	0020      	movs	r0, r4
 8006420:	f000 f856 	bl	80064d0 <_free_r>
 8006424:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006426:	2900      	cmp	r1, #0
 8006428:	d002      	beq.n	8006430 <_reclaim_reent+0x4c>
 800642a:	0020      	movs	r0, r4
 800642c:	f000 f850 	bl	80064d0 <_free_r>
 8006430:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006432:	2900      	cmp	r1, #0
 8006434:	d002      	beq.n	800643c <_reclaim_reent+0x58>
 8006436:	0020      	movs	r0, r4
 8006438:	f000 f84a 	bl	80064d0 <_free_r>
 800643c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800643e:	2900      	cmp	r1, #0
 8006440:	d002      	beq.n	8006448 <_reclaim_reent+0x64>
 8006442:	0020      	movs	r0, r4
 8006444:	f000 f844 	bl	80064d0 <_free_r>
 8006448:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800644a:	2900      	cmp	r1, #0
 800644c:	d002      	beq.n	8006454 <_reclaim_reent+0x70>
 800644e:	0020      	movs	r0, r4
 8006450:	f000 f83e 	bl	80064d0 <_free_r>
 8006454:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006456:	2900      	cmp	r1, #0
 8006458:	d002      	beq.n	8006460 <_reclaim_reent+0x7c>
 800645a:	0020      	movs	r0, r4
 800645c:	f000 f838 	bl	80064d0 <_free_r>
 8006460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006462:	2900      	cmp	r1, #0
 8006464:	d002      	beq.n	800646c <_reclaim_reent+0x88>
 8006466:	0020      	movs	r0, r4
 8006468:	f000 f832 	bl	80064d0 <_free_r>
 800646c:	69a3      	ldr	r3, [r4, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <_reclaim_reent+0xa0>
 8006472:	0020      	movs	r0, r4
 8006474:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006476:	4798      	blx	r3
 8006478:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800647a:	2900      	cmp	r1, #0
 800647c:	d002      	beq.n	8006484 <_reclaim_reent+0xa0>
 800647e:	0020      	movs	r0, r4
 8006480:	f7ff ffa3 	bl	80063ca <cleanup_glue>
 8006484:	bd70      	pop	{r4, r5, r6, pc}
 8006486:	5949      	ldr	r1, [r1, r5]
 8006488:	2900      	cmp	r1, #0
 800648a:	d108      	bne.n	800649e <_reclaim_reent+0xba>
 800648c:	3504      	adds	r5, #4
 800648e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006490:	68d9      	ldr	r1, [r3, #12]
 8006492:	2d80      	cmp	r5, #128	; 0x80
 8006494:	d1f7      	bne.n	8006486 <_reclaim_reent+0xa2>
 8006496:	0020      	movs	r0, r4
 8006498:	f000 f81a 	bl	80064d0 <_free_r>
 800649c:	e7af      	b.n	80063fe <_reclaim_reent+0x1a>
 800649e:	680e      	ldr	r6, [r1, #0]
 80064a0:	0020      	movs	r0, r4
 80064a2:	f000 f815 	bl	80064d0 <_free_r>
 80064a6:	0031      	movs	r1, r6
 80064a8:	e7ee      	b.n	8006488 <_reclaim_reent+0xa4>
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	20000010 	.word	0x20000010

080064b0 <__malloc_lock>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	4802      	ldr	r0, [pc, #8]	; (80064bc <__malloc_lock+0xc>)
 80064b4:	f7ff ff76 	bl	80063a4 <__retarget_lock_acquire_recursive>
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	20001c2c 	.word	0x20001c2c

080064c0 <__malloc_unlock>:
 80064c0:	b510      	push	{r4, lr}
 80064c2:	4802      	ldr	r0, [pc, #8]	; (80064cc <__malloc_unlock+0xc>)
 80064c4:	f7ff ff6f 	bl	80063a6 <__retarget_lock_release_recursive>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	20001c2c 	.word	0x20001c2c

080064d0 <_free_r>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	0005      	movs	r5, r0
 80064d4:	2900      	cmp	r1, #0
 80064d6:	d010      	beq.n	80064fa <_free_r+0x2a>
 80064d8:	1f0c      	subs	r4, r1, #4
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	da00      	bge.n	80064e2 <_free_r+0x12>
 80064e0:	18e4      	adds	r4, r4, r3
 80064e2:	0028      	movs	r0, r5
 80064e4:	f7ff ffe4 	bl	80064b0 <__malloc_lock>
 80064e8:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <_free_r+0x90>)
 80064ea:	6813      	ldr	r3, [r2, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d105      	bne.n	80064fc <_free_r+0x2c>
 80064f0:	6063      	str	r3, [r4, #4]
 80064f2:	6014      	str	r4, [r2, #0]
 80064f4:	0028      	movs	r0, r5
 80064f6:	f7ff ffe3 	bl	80064c0 <__malloc_unlock>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	d908      	bls.n	8006512 <_free_r+0x42>
 8006500:	6821      	ldr	r1, [r4, #0]
 8006502:	1860      	adds	r0, r4, r1
 8006504:	4283      	cmp	r3, r0
 8006506:	d1f3      	bne.n	80064f0 <_free_r+0x20>
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	1841      	adds	r1, r0, r1
 800650e:	6021      	str	r1, [r4, #0]
 8006510:	e7ee      	b.n	80064f0 <_free_r+0x20>
 8006512:	001a      	movs	r2, r3
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <_free_r+0x4e>
 800651a:	42a3      	cmp	r3, r4
 800651c:	d9f9      	bls.n	8006512 <_free_r+0x42>
 800651e:	6811      	ldr	r1, [r2, #0]
 8006520:	1850      	adds	r0, r2, r1
 8006522:	42a0      	cmp	r0, r4
 8006524:	d10b      	bne.n	800653e <_free_r+0x6e>
 8006526:	6820      	ldr	r0, [r4, #0]
 8006528:	1809      	adds	r1, r1, r0
 800652a:	1850      	adds	r0, r2, r1
 800652c:	6011      	str	r1, [r2, #0]
 800652e:	4283      	cmp	r3, r0
 8006530:	d1e0      	bne.n	80064f4 <_free_r+0x24>
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	1841      	adds	r1, r0, r1
 8006538:	6011      	str	r1, [r2, #0]
 800653a:	6053      	str	r3, [r2, #4]
 800653c:	e7da      	b.n	80064f4 <_free_r+0x24>
 800653e:	42a0      	cmp	r0, r4
 8006540:	d902      	bls.n	8006548 <_free_r+0x78>
 8006542:	230c      	movs	r3, #12
 8006544:	602b      	str	r3, [r5, #0]
 8006546:	e7d5      	b.n	80064f4 <_free_r+0x24>
 8006548:	6821      	ldr	r1, [r4, #0]
 800654a:	1860      	adds	r0, r4, r1
 800654c:	4283      	cmp	r3, r0
 800654e:	d103      	bne.n	8006558 <_free_r+0x88>
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	1841      	adds	r1, r0, r1
 8006556:	6021      	str	r1, [r4, #0]
 8006558:	6063      	str	r3, [r4, #4]
 800655a:	6054      	str	r4, [r2, #4]
 800655c:	e7ca      	b.n	80064f4 <_free_r+0x24>
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	20001c30 	.word	0x20001c30

08006564 <_init>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656a:	bc08      	pop	{r3}
 800656c:	469e      	mov	lr, r3
 800656e:	4770      	bx	lr

08006570 <_fini>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr
