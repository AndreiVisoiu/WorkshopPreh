
OsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000775c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800798c  0800798c  00021c7c  2**0
                  CONTENTS
  4 .ARM          00000000  0800798c  0800798c  00021c7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800798c  0800798c  00021c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001c7c  20000000  08007994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  20001c7c  08009610  00021c7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038cc  08009610  000238cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00021c7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aeea  00000000  00000000  00021ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000367f  00000000  00000000  0003cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00040210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  00041950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dc7  00000000  00000000  00042f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a038  00000000  00000000  00046d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6ec8  00000000  00000000  00060d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117c0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005818  00000000  00000000  00117c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20001c7c 	.word	0x20001c7c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007804 	.word	0x08007804

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20001c80 	.word	0x20001c80
 8000104:	08007804 	.word	0x08007804

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <st7565_write_buffer>:
#define CMD(c)        do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 0 ); st7565_sendbyte( c ); } while (0);
#define DATA(d)       do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 ); st7565_sendbyte( d ); } while (0);
#define DELAY(mS)     do { HAL_Delay( mS ); } while(0);

//Renders the buffer contents
void st7565_write_buffer(uint8_t *buffer) {
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 80003fc:	230e      	movs	r3, #14
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e060      	b.n	80004c8 <st7565_write_buffer+0xd4>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 8000406:	4b35      	ldr	r3, [pc, #212]	; (80004dc <st7565_write_buffer+0xe8>)
 8000408:	2200      	movs	r2, #0
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	0018      	movs	r0, r3
 800040e:	f002 fac5 	bl	800299c <HAL_GPIO_WritePin>
 8000412:	230e      	movs	r3, #14
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4a31      	ldr	r2, [pc, #196]	; (80004e0 <st7565_write_buffer+0xec>)
 800041a:	5cd3      	ldrb	r3, [r2, r3]
 800041c:	2250      	movs	r2, #80	; 0x50
 800041e:	4252      	negs	r2, r2
 8000420:	4313      	orrs	r3, r2
 8000422:	b2db      	uxtb	r3, r3
 8000424:	0018      	movs	r0, r3
 8000426:	f000 f85d 	bl	80004e4 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 800042a:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <st7565_write_buffer+0xe8>)
 800042c:	2200      	movs	r2, #0
 800042e:	2180      	movs	r1, #128	; 0x80
 8000430:	0018      	movs	r0, r3
 8000432:	f002 fab3 	bl	800299c <HAL_GPIO_WritePin>
 8000436:	2000      	movs	r0, #0
 8000438:	f000 f854 	bl	80004e4 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 800043c:	4b27      	ldr	r3, [pc, #156]	; (80004dc <st7565_write_buffer+0xe8>)
 800043e:	2200      	movs	r2, #0
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0018      	movs	r0, r3
 8000444:	f002 faaa 	bl	800299c <HAL_GPIO_WritePin>
 8000448:	2010      	movs	r0, #16
 800044a:	f000 f84b 	bl	80004e4 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <st7565_write_buffer+0xe8>)
 8000450:	2200      	movs	r2, #0
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	0018      	movs	r0, r3
 8000456:	f002 faa1 	bl	800299c <HAL_GPIO_WritePin>
 800045a:	20e0      	movs	r0, #224	; 0xe0
 800045c:	f000 f842 	bl	80004e4 <st7565_sendbyte>
		DATA(0xff);
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <st7565_write_buffer+0xe8>)
 8000462:	2201      	movs	r2, #1
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	0018      	movs	r0, r3
 8000468:	f002 fa98 	bl	800299c <HAL_GPIO_WritePin>
 800046c:	20ff      	movs	r0, #255	; 0xff
 800046e:	f000 f839 	bl	80004e4 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8000472:	230f      	movs	r3, #15
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	e019      	b.n	80004b0 <st7565_write_buffer+0xbc>
			DATA(buffer[(128 * p) + c]);
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <st7565_write_buffer+0xe8>)
 800047e:	2201      	movs	r2, #1
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0018      	movs	r0, r3
 8000484:	f002 fa8a 	bl	800299c <HAL_GPIO_WritePin>
 8000488:	230e      	movs	r3, #14
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	01da      	lsls	r2, r3, #7
 8000490:	240f      	movs	r4, #15
 8000492:	193b      	adds	r3, r7, r4
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	18d3      	adds	r3, r2, r3
 8000498:	001a      	movs	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	189b      	adds	r3, r3, r2
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 f81f 	bl	80004e4 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	3201      	adds	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
 80004b0:	230f      	movs	r3, #15
 80004b2:	18fb      	adds	r3, r7, r3
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	dadf      	bge.n	800047c <st7565_write_buffer+0x88>
	for (p = 0; p < 8; p++) {
 80004bc:	210e      	movs	r1, #14
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	3201      	adds	r2, #1
 80004c6:	701a      	strb	r2, [r3, #0]
 80004c8:	230e      	movs	r3, #14
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d999      	bls.n	8000406 <st7565_write_buffer+0x12>
		}
	}
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b005      	add	sp, #20
 80004da:	bd90      	pop	{r4, r7, pc}
 80004dc:	48000800 	.word	0x48000800
 80004e0:	20000400 	.word	0x20000400

080004e4 <st7565_sendbyte>:

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	0002      	movs	r2, r0
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 80004f0:	1df9      	adds	r1, r7, #7
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <st7565_sendbyte+0x20>)
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2201      	movs	r2, #1
 80004f8:	f003 f926 	bl	8003748 <HAL_SPI_Transmit>
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20001d1c 	.word	0x20001d1c

08000508 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	0059      	lsls	r1, r3, #1
 8000510:	2390      	movs	r3, #144	; 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2201      	movs	r2, #1
 8000516:	0018      	movs	r0, r3
 8000518:	f002 fa40 	bl	800299c <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 800051c:	4b4e      	ldr	r3, [pc, #312]	; (8000658 <st7565_init+0x150>)
 800051e:	2201      	movs	r2, #1
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0018      	movs	r0, r3
 8000524:	f002 fa3a 	bl	800299c <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	0099      	lsls	r1, r3, #2
 800052c:	2390      	movs	r3, #144	; 0x90
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2201      	movs	r2, #1
 8000532:	0018      	movs	r0, r3
 8000534:	f002 fa32 	bl	800299c <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8000538:	4b48      	ldr	r3, [pc, #288]	; (800065c <st7565_init+0x154>)
 800053a:	2201      	movs	r2, #1
 800053c:	2140      	movs	r1, #64	; 0x40
 800053e:	0018      	movs	r0, r3
 8000540:	f002 fa2c 	bl	800299c <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 8000544:	4b45      	ldr	r3, [pc, #276]	; (800065c <st7565_init+0x154>)
 8000546:	2200      	movs	r2, #0
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	0018      	movs	r0, r3
 800054c:	f002 fa26 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	0099      	lsls	r1, r3, #2
 8000554:	2390      	movs	r3, #144	; 0x90
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	2200      	movs	r2, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f002 fa1e 	bl	800299c <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000560:	23fa      	movs	r3, #250	; 0xfa
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	0018      	movs	r0, r3
 8000566:	f001 f9f9 	bl	800195c <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	0099      	lsls	r1, r3, #2
 800056e:	2390      	movs	r3, #144	; 0x90
 8000570:	05db      	lsls	r3, r3, #23
 8000572:	2201      	movs	r2, #1
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fa11 	bl	800299c <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 800057a:	4b37      	ldr	r3, [pc, #220]	; (8000658 <st7565_init+0x150>)
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	0018      	movs	r0, r3
 8000582:	f002 fa0b 	bl	800299c <HAL_GPIO_WritePin>
 8000586:	20a3      	movs	r0, #163	; 0xa3
 8000588:	f7ff ffac 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 800058c:	4b32      	ldr	r3, [pc, #200]	; (8000658 <st7565_init+0x150>)
 800058e:	2200      	movs	r2, #0
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0018      	movs	r0, r3
 8000594:	f002 fa02 	bl	800299c <HAL_GPIO_WritePin>
 8000598:	20a0      	movs	r0, #160	; 0xa0
 800059a:	f7ff ffa3 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 800059e:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <st7565_init+0x150>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	0018      	movs	r0, r3
 80005a6:	f002 f9f9 	bl	800299c <HAL_GPIO_WritePin>
 80005aa:	20c0      	movs	r0, #192	; 0xc0
 80005ac:	f7ff ff9a 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <st7565_init+0x150>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 f9f0 	bl	800299c <HAL_GPIO_WritePin>
 80005bc:	2040      	movs	r0, #64	; 0x40
 80005be:	f7ff ff91 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <st7565_init+0x150>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 f9e7 	bl	800299c <HAL_GPIO_WritePin>
 80005ce:	202c      	movs	r0, #44	; 0x2c
 80005d0:	f7ff ff88 	bl	80004e4 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 80005d4:	2032      	movs	r0, #50	; 0x32
 80005d6:	f001 f9c1 	bl	800195c <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <st7565_init+0x150>)
 80005dc:	2200      	movs	r2, #0
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 f9db 	bl	800299c <HAL_GPIO_WritePin>
 80005e6:	202e      	movs	r0, #46	; 0x2e
 80005e8:	f7ff ff7c 	bl	80004e4 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 80005ec:	2032      	movs	r0, #50	; 0x32
 80005ee:	f001 f9b5 	bl	800195c <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <st7565_init+0x150>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0018      	movs	r0, r3
 80005fa:	f002 f9cf 	bl	800299c <HAL_GPIO_WritePin>
 80005fe:	202f      	movs	r0, #47	; 0x2f
 8000600:	f7ff ff70 	bl	80004e4 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8000604:	200a      	movs	r0, #10
 8000606:	f001 f9a9 	bl	800195c <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <st7565_init+0x150>)
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0018      	movs	r0, r3
 8000612:	f002 f9c3 	bl	800299c <HAL_GPIO_WritePin>
 8000616:	2026      	movs	r0, #38	; 0x26
 8000618:	f7ff ff64 	bl	80004e4 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <st7565_init+0x150>)
 800061e:	2200      	movs	r2, #0
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0018      	movs	r0, r3
 8000624:	f002 f9ba 	bl	800299c <HAL_GPIO_WritePin>
 8000628:	20af      	movs	r0, #175	; 0xaf
 800062a:	f7ff ff5b 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <st7565_init+0x150>)
 8000630:	2200      	movs	r2, #0
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	0018      	movs	r0, r3
 8000636:	f002 f9b1 	bl	800299c <HAL_GPIO_WritePin>
 800063a:	20a4      	movs	r0, #164	; 0xa4
 800063c:	f7ff ff52 	bl	80004e4 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f81d 	bl	8000680 <st7565_set_brightness>
 	st7565_clear_screen();
 8000646:	f000 f83f 	bl	80006c8 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <st7565_init+0x158>)
 800064c:	0018      	movs	r0, r3
 800064e:	f000 f897 	bl	8000780 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	48000800 	.word	0x48000800
 800065c:	48000400 	.word	0x48000400
 8000660:	20000000 	.word	0x20000000

08000664 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	0059      	lsls	r1, r3, #1
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	2201      	movs	r2, #1
 8000672:	0018      	movs	r0, r3
 8000674:	f002 f992 	bl	800299c <HAL_GPIO_WritePin>
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	0002      	movs	r2, r0
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <st7565_set_brightness+0x44>)
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0018      	movs	r0, r3
 8000694:	f002 f982 	bl	800299c <HAL_GPIO_WritePin>
 8000698:	2081      	movs	r0, #129	; 0x81
 800069a:	f7ff ff23 	bl	80004e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <st7565_set_brightness+0x44>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 f979 	bl	800299c <HAL_GPIO_WritePin>
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	223f      	movs	r2, #63	; 0x3f
 80006b0:	4013      	ands	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff ff15 	bl	80004e4 <st7565_sendbyte>
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	48000800 	.word	0x48000800

080006c8 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	e049      	b.n	800076a <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <st7565_clear_screen+0xb4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 f95d 	bl	800299c <HAL_GPIO_WritePin>
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2250      	movs	r2, #80	; 0x50
 80006e8:	4252      	negs	r2, r2
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff fef8 	bl	80004e4 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 80006f4:	1dbb      	adds	r3, r7, #6
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e02d      	b.n	8000758 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <st7565_clear_screen+0xb4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	0018      	movs	r0, r3
 8000704:	f002 f94a 	bl	800299c <HAL_GPIO_WritePin>
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	220f      	movs	r2, #15
 800070e:	4013      	ands	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff fee6 	bl	80004e4 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <st7565_clear_screen+0xb4>)
 800071a:	2200      	movs	r2, #0
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0018      	movs	r0, r3
 8000720:	f002 f93c 	bl	800299c <HAL_GPIO_WritePin>
 8000724:	1dbb      	adds	r3, r7, #6
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	091b      	lsrs	r3, r3, #4
 800072a:	b2db      	uxtb	r3, r3
 800072c:	b25b      	sxtb	r3, r3
 800072e:	2210      	movs	r2, #16
 8000730:	4313      	orrs	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff fed4 	bl	80004e4 <st7565_sendbyte>
			DATA(0x0);
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <st7565_clear_screen+0xb4>)
 800073e:	2201      	movs	r2, #1
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	0018      	movs	r0, r3
 8000744:	f002 f92a 	bl	800299c <HAL_GPIO_WritePin>
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff fecb 	bl	80004e4 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 800074e:	1dbb      	adds	r3, r7, #6
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	1dbb      	adds	r3, r7, #6
 8000754:	3201      	adds	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	1dbb      	adds	r3, r7, #6
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b80      	cmp	r3, #128	; 0x80
 800075e:	d9cd      	bls.n	80006fc <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	3201      	adds	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d9b1      	bls.n	80006d6 <st7565_clear_screen+0xe>
		}
	}
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	48000800 	.word	0x48000800

08000780 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	00da      	lsls	r2, r3, #3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f006 ff62 	bl	800765a <memset>
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}

0800079e <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 800079e:	b590      	push	{r4, r7, lr}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	000c      	movs	r4, r1
 80007a8:	0010      	movs	r0, r2
 80007aa:	0019      	movs	r1, r3
 80007ac:	1cfb      	adds	r3, r7, #3
 80007ae:	1c22      	adds	r2, r4, #0
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	1cbb      	adds	r3, r7, #2
 80007b4:	1c02      	adds	r2, r0, #0
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	1c7b      	adds	r3, r7, #1
 80007ba:	1c0a      	adds	r2, r1, #0
 80007bc:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 80007be:	1cfb      	adds	r3, r7, #3
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db51      	blt.n	800086c <st7565_setpixel+0xce>
 80007c8:	1cbb      	adds	r3, r7, #2
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b3f      	cmp	r3, #63	; 0x3f
 80007ce:	d84d      	bhi.n	800086c <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 80007d0:	1c7b      	adds	r3, r7, #1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d023      	beq.n	8000820 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 80007d8:	1cfb      	adds	r3, r7, #3
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	1cbb      	adds	r3, r7, #2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	b2d8      	uxtb	r0, r3
 80007e4:	0003      	movs	r3, r0
 80007e6:	01db      	lsls	r3, r3, #7
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	001a      	movs	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	189b      	adds	r3, r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b25a      	sxtb	r2, r3
 80007f4:	1cbb      	adds	r3, r7, #2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	43db      	mvns	r3, r3
 80007fa:	2107      	movs	r1, #7
 80007fc:	400b      	ands	r3, r1
 80007fe:	2101      	movs	r1, #1
 8000800:	4099      	lsls	r1, r3
 8000802:	000b      	movs	r3, r1
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b259      	sxtb	r1, r3
 800080a:	1cfb      	adds	r3, r7, #3
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	0003      	movs	r3, r0
 8000810:	01db      	lsls	r3, r3, #7
 8000812:	18d3      	adds	r3, r2, r3
 8000814:	001a      	movs	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	189b      	adds	r3, r3, r2
 800081a:	b2ca      	uxtb	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e026      	b.n	800086e <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000820:	1cfb      	adds	r3, r7, #3
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	1cbb      	adds	r3, r7, #2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	b2d8      	uxtb	r0, r3
 800082c:	0003      	movs	r3, r0
 800082e:	01db      	lsls	r3, r3, #7
 8000830:	18d3      	adds	r3, r2, r3
 8000832:	001a      	movs	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	189b      	adds	r3, r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b25b      	sxtb	r3, r3
 800083c:	1cba      	adds	r2, r7, #2
 800083e:	7812      	ldrb	r2, [r2, #0]
 8000840:	43d2      	mvns	r2, r2
 8000842:	2107      	movs	r1, #7
 8000844:	400a      	ands	r2, r1
 8000846:	2101      	movs	r1, #1
 8000848:	4091      	lsls	r1, r2
 800084a:	000a      	movs	r2, r1
 800084c:	b252      	sxtb	r2, r2
 800084e:	43d2      	mvns	r2, r2
 8000850:	b252      	sxtb	r2, r2
 8000852:	4013      	ands	r3, r2
 8000854:	b259      	sxtb	r1, r3
 8000856:	1cfb      	adds	r3, r7, #3
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	0003      	movs	r3, r0
 800085c:	01db      	lsls	r3, r3, #7
 800085e:	18d3      	adds	r3, r2, r3
 8000860:	001a      	movs	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	189b      	adds	r3, r3, r2
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e000      	b.n	800086e <st7565_setpixel+0xd0>
		return;
 800086c:	46c0      	nop			; (mov r8, r8)
}
 800086e:	46bd      	mov	sp, r7
 8000870:	b003      	add	sp, #12
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <st7565_drawbitmap>:

//draw pixel at *x/*y from *bitmap
void st7565_drawbitmap(uint8_t *buff, uint8_t x, uint8_t y,
		const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color) {
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	0008      	movs	r0, r1
 800087e:	0011      	movs	r1, r2
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	230b      	movs	r3, #11
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	1c02      	adds	r2, r0, #0
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	230a      	movs	r3, #10
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	1c0a      	adds	r2, r1, #0
 8000890:	701a      	strb	r2, [r3, #0]
	uint8_t j, i;
	for (j = 0; j < h; j++) {
 8000892:	2317      	movs	r3, #23
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e04c      	b.n	8000936 <st7565_drawbitmap+0xc2>
		for (i = 0; i < w; i++) {
 800089c:	2316      	movs	r3, #22
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	e037      	b.n	8000916 <st7565_drawbitmap+0xa2>
			if (*(bitmap + i + (j / 8) * w) & (1 << (j % 8))) {
 80008a6:	2416      	movs	r4, #22
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	2017      	movs	r0, #23
 80008ae:	183b      	adds	r3, r7, r0
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	0019      	movs	r1, r3
 80008b8:	2320      	movs	r3, #32
 80008ba:	2508      	movs	r5, #8
 80008bc:	195b      	adds	r3, r3, r5
 80008be:	19db      	adds	r3, r3, r7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	434b      	muls	r3, r1
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	0019      	movs	r1, r3
 80008ce:	183b      	adds	r3, r7, r0
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2207      	movs	r2, #7
 80008d4:	4013      	ands	r3, r2
 80008d6:	4119      	asrs	r1, r3
 80008d8:	000b      	movs	r3, r1
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	d014      	beq.n	800090a <st7565_drawbitmap+0x96>
				st7565_setpixel(buff, x + i, y + j, color);
 80008e0:	230b      	movs	r3, #11
 80008e2:	18fa      	adds	r2, r7, r3
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	b2d9      	uxtb	r1, r3
 80008ee:	230a      	movs	r3, #10
 80008f0:	18fa      	adds	r2, r7, r3
 80008f2:	183b      	adds	r3, r7, r0
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	2328      	movs	r3, #40	; 0x28
 80008fe:	195b      	adds	r3, r3, r5
 8000900:	19db      	adds	r3, r3, r7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff ff4a 	bl	800079e <st7565_setpixel>
		for (i = 0; i < w; i++) {
 800090a:	2116      	movs	r1, #22
 800090c:	187b      	adds	r3, r7, r1
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	187b      	adds	r3, r7, r1
 8000912:	3201      	adds	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	2316      	movs	r3, #22
 8000918:	18fa      	adds	r2, r7, r3
 800091a:	2320      	movs	r3, #32
 800091c:	2108      	movs	r1, #8
 800091e:	185b      	adds	r3, r3, r1
 8000920:	19db      	adds	r3, r3, r7
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	429a      	cmp	r2, r3
 8000928:	d3bd      	bcc.n	80008a6 <st7565_drawbitmap+0x32>
	for (j = 0; j < h; j++) {
 800092a:	2117      	movs	r1, #23
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	187b      	adds	r3, r7, r1
 8000932:	3201      	adds	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	2317      	movs	r3, #23
 8000938:	18fa      	adds	r2, r7, r3
 800093a:	2324      	movs	r3, #36	; 0x24
 800093c:	2108      	movs	r1, #8
 800093e:	185b      	adds	r3, r3, r1
 8000940:	19db      	adds	r3, r3, r7
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	429a      	cmp	r2, r3
 8000948:	d3a8      	bcc.n	800089c <st7565_drawbitmap+0x28>
			}
		}
	}
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b006      	add	sp, #24
 8000952:	bdb0      	pop	{r4, r5, r7, pc}

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 ff9c 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f83e 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 fa2a 	bl	8000db8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f000 fa02 	bl	8000d6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000968:	f000 f9d0 	bl	8000d0c <MX_USART2_UART_Init>
  MX_ADC_Init();
 800096c:	f000 f89c 	bl	8000aa8 <MX_ADC_Init>
  MX_TIM3_Init();
 8000970:	f000 f94c 	bl	8000c0c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000974:	f000 f90c 	bl	8000b90 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000978:	f004 fc42 	bl	8005200 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controlStergato */
  controlStergatoHandle = osThreadNew(Stergatoare, NULL, &controlStergato_attributes);
 800097c:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <main+0x64>)
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <main+0x68>)
 8000980:	2100      	movs	r1, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f004 fc96 	bl	80052b4 <osThreadNew>
 8000988:	0002      	movs	r2, r0
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <main+0x6c>)
 800098c:	601a      	str	r2, [r3, #0]

  /* creation of readJoystick */
  readJoystickHandle = osThreadNew(ReadJoystick, NULL, &readJoystick_attributes);
 800098e:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <main+0x70>)
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <main+0x74>)
 8000992:	2100      	movs	r1, #0
 8000994:	0018      	movs	r0, r3
 8000996:	f004 fc8d 	bl	80052b4 <osThreadNew>
 800099a:	0002      	movs	r2, r0
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <main+0x78>)
 800099e:	601a      	str	r2, [r3, #0]

  /* creation of controlLCD */
  controlLCDHandle = osThreadNew(ControlLCD, NULL, &controlLCD_attributes);
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <main+0x7c>)
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <main+0x80>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f004 fc84 	bl	80052b4 <osThreadNew>
 80009ac:	0002      	movs	r2, r0
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <main+0x84>)
 80009b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009b2:	f004 fc51 	bl	8005258 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <main+0x62>
 80009b8:	08007880 	.word	0x08007880
 80009bc:	08000ef1 	.word	0x08000ef1
 80009c0:	20001e90 	.word	0x20001e90
 80009c4:	080078a4 	.word	0x080078a4
 80009c8:	08001149 	.word	0x08001149
 80009cc:	20001e94 	.word	0x20001e94
 80009d0:	080078c8 	.word	0x080078c8
 80009d4:	08001205 	.word	0x08001205
 80009d8:	20001e98 	.word	0x20001e98

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b099      	sub	sp, #100	; 0x64
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	242c      	movs	r4, #44	; 0x2c
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	0018      	movs	r0, r3
 80009e8:	2334      	movs	r3, #52	; 0x34
 80009ea:	001a      	movs	r2, r3
 80009ec:	2100      	movs	r1, #0
 80009ee:	f006 fe34 	bl	800765a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f2:	231c      	movs	r3, #28
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	0018      	movs	r0, r3
 80009f8:	2310      	movs	r3, #16
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f006 fe2c 	bl	800765a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a02:	003b      	movs	r3, r7
 8000a04:	0018      	movs	r0, r3
 8000a06:	231c      	movs	r3, #28
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f006 fe25 	bl	800765a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000a10:	0021      	movs	r1, r4
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2211      	movs	r2, #17
 8000a16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2201      	movs	r2, #1
 8000a22:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2210      	movs	r2, #16
 8000a28:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	0252      	lsls	r2, r2, #9
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	22a0      	movs	r2, #160	; 0xa0
 8000a3c:	0392      	lsls	r2, r2, #14
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2201      	movs	r2, #1
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 ffc5 	bl	80029d8 <HAL_RCC_OscConfig>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a52:	f000 fcd3 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	211c      	movs	r1, #28
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2101      	movs	r1, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f002 fb35 	bl	80030e4 <HAL_RCC_ClockConfig>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a7e:	f000 fcbd 	bl	80013fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a82:	003b      	movs	r3, r7
 8000a84:	2202      	movs	r2, #2
 8000a86:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	003b      	movs	r3, r7
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 fca1 	bl	80033d8 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a9a:	f000 fcaf 	bl	80013fc <Error_Handler>
  }
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b019      	add	sp, #100	; 0x64
 8000aa4:	bd90      	pop	{r4, r7, pc}
	...

08000aa8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	f006 fdcf 	bl	800765a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000abc:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000abe:	4a33      	ldr	r2, [pc, #204]	; (8000b8c <MX_ADC_Init+0xe4>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ace:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000afa:	22c2      	movs	r2, #194	; 0xc2
 8000afc:	32ff      	adds	r2, #255	; 0xff
 8000afe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000b08:	2224      	movs	r2, #36	; 0x24
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 ff44 	bl	80019a4 <HAL_ADC_Init>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000b20:	f000 fc6c 	bl	80013fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	0152      	lsls	r2, r2, #5
 8000b30:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2207      	movs	r2, #7
 8000b36:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b38:	1d3a      	adds	r2, r7, #4
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 f90a 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000b48:	f000 fc58 	bl	80013fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	220d      	movs	r2, #13
 8000b50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b52:	1d3a      	adds	r2, r7, #4
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f001 f8fd 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000b62:	f000 fc4b 	bl	80013fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	220e      	movs	r2, #14
 8000b6a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b6c:	1d3a      	adds	r2, r7, #4
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_ADC_Init+0xe0>)
 8000b70:	0011      	movs	r1, r2
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 f8f0 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000b7c:	f000 fc3e 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b004      	add	sp, #16
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20001c98 	.word	0x20001c98
 8000b8c:	40012400 	.word	0x40012400

08000b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000b96:	4a1c      	ldr	r2, [pc, #112]	; (8000c08 <MX_SPI1_Init+0x78>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000b9c:	2282      	movs	r2, #130	; 0x82
 8000b9e:	0052      	lsls	r2, r2, #1
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000baa:	22e0      	movs	r2, #224	; 0xe0
 8000bac:	00d2      	lsls	r2, r2, #3
 8000bae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bc6:	2230      	movs	r2, #48	; 0x30
 8000bc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bde:	2207      	movs	r2, #7
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bea:	2208      	movs	r2, #8
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 fcf1 	bl	80035d8 <HAL_SPI_Init>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 fbff 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20001d1c 	.word	0x20001d1c
 8000c08:	40013000 	.word	0x40013000

08000c0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	2328      	movs	r3, #40	; 0x28
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	0018      	movs	r0, r3
 8000c18:	2310      	movs	r3, #16
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f006 fd1c 	bl	800765a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	2320      	movs	r3, #32
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	0018      	movs	r0, r3
 8000c28:	2308      	movs	r3, #8
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f006 fd14 	bl	800765a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	0018      	movs	r0, r3
 8000c36:	231c      	movs	r3, #28
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f006 fd0d 	bl	800765a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c40:	4b2f      	ldr	r3, [pc, #188]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000c42:	4a30      	ldr	r2, [pc, #192]	; (8000d04 <MX_TIM3_Init+0xf8>)
 8000c44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000c48:	222f      	movs	r2, #47	; 0x2f
 8000c4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000c54:	4a2c      	ldr	r2, [pc, #176]	; (8000d08 <MX_TIM3_Init+0xfc>)
 8000c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f003 f83c 	bl	8003ce4 <HAL_TIM_Base_Init>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c70:	f000 fbc4 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	2128      	movs	r1, #40	; 0x28
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	0152      	lsls	r2, r2, #5
 8000c7c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c7e:	187a      	adds	r2, r7, r1
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f003 fa53 	bl	8004130 <HAL_TIM_ConfigClockSource>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c8e:	f000 fbb5 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f003 f875 	bl	8003d84 <HAL_TIM_PWM_Init>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c9e:	f000 fbad 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb0:	187a      	adds	r2, r7, r1
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f003 fe48 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000cc0:	f000 fb9c 	bl	80013fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2260      	movs	r2, #96	; 0x60
 8000cc8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cdc:	1d39      	adds	r1, r7, #4
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000ce0:	220c      	movs	r2, #12
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f003 f95e 	bl	8003fa4 <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000cec:	f000 fb86 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <MX_TIM3_Init+0xf4>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fce6 	bl	80016c4 <HAL_TIM_MspPostInit>

}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b00e      	add	sp, #56	; 0x38
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20001d80 	.word	0x20001d80
 8000d04:	40000400 	.word	0x40000400
 8000d08:	00004e1f 	.word	0x00004e1f

08000d0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d12:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <MX_USART2_UART_Init+0x5c>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d18:	22e1      	movs	r2, #225	; 0xe1
 8000d1a:	0252      	lsls	r2, r2, #9
 8000d1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <MX_USART2_UART_Init+0x58>)
 8000d50:	0018      	movs	r0, r3
 8000d52:	f003 fe59 	bl	8004a08 <HAL_UART_Init>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d5a:	f000 fb4f 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20001e0c 	.word	0x20001e0c
 8000d68:	40004400 	.word	0x40004400

08000d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_DMA_Init+0x48>)
 8000d74:	695a      	ldr	r2, [r3, #20]
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_DMA_Init+0x48>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <MX_DMA_Init+0x48>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	2201      	movs	r2, #1
 8000d84:	4013      	ands	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2103      	movs	r1, #3
 8000d8e:	2009      	movs	r0, #9
 8000d90:	f001 faa4 	bl	80022dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000d94:	2009      	movs	r0, #9
 8000d96:	f001 fab6 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2103      	movs	r1, #3
 8000d9e:	200a      	movs	r0, #10
 8000da0:	f001 fa9c 	bl	80022dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000da4:	200a      	movs	r0, #10
 8000da6:	f001 faae 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	40021000 	.word	0x40021000

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b08b      	sub	sp, #44	; 0x2c
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	2414      	movs	r4, #20
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	2314      	movs	r3, #20
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f006 fc46 	bl	800765a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b45      	ldr	r3, [pc, #276]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000dd0:	695a      	ldr	r2, [r3, #20]
 8000dd2:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	0309      	lsls	r1, r1, #12
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	615a      	str	r2, [r3, #20]
 8000ddc:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000dde:	695a      	ldr	r2, [r3, #20]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	031b      	lsls	r3, r3, #12
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dea:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	03c9      	lsls	r1, r1, #15
 8000df4:	430a      	orrs	r2, r1
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000dfa:	695a      	ldr	r2, [r3, #20]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	03db      	lsls	r3, r3, #15
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000e08:	695a      	ldr	r2, [r3, #20]
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	0289      	lsls	r1, r1, #10
 8000e10:	430a      	orrs	r2, r1
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	02c9      	lsls	r1, r1, #11
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	02db      	lsls	r3, r3, #11
 8000e38:	4013      	ands	r3, r2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_SET);
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <MX_GPIO_Init+0x130>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	0018      	movs	r0, r3
 8000e46:	f001 fda9 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	0099      	lsls	r1, r3, #2
 8000e4e:	2390      	movs	r3, #144	; 0x90
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	2200      	movs	r2, #0
 8000e54:	0018      	movs	r0, r3
 8000e56:	f001 fda1 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <MX_GPIO_Init+0x134>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	0018      	movs	r0, r3
 8000e62:	f001 fd9b 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2201      	movs	r2, #1
 8000e70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <MX_GPIO_Init+0x130>)
 8000e82:	0019      	movs	r1, r3
 8000e84:	0010      	movs	r0, r2
 8000e86:	f001 fc11 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8000e8a:	0021      	movs	r1, r4
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	22c0      	movs	r2, #192	; 0xc0
 8000e90:	0092      	lsls	r2, r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	000c      	movs	r4, r1
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	193a      	adds	r2, r7, r4
 8000eaa:	2390      	movs	r3, #144	; 0x90
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f001 fbfb 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 8000eb6:	0021      	movs	r1, r4
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	4a06      	ldr	r2, [pc, #24]	; (8000eec <MX_GPIO_Init+0x134>)
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	0010      	movs	r0, r2
 8000ed8:	f001 fbe8 	bl	80026ac <HAL_GPIO_Init>

}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b00b      	add	sp, #44	; 0x2c
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48000800 	.word	0x48000800
 8000eec:	48000400 	.word	0x48000400

08000ef0 <Stergatoare>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Stergatoare */
void Stergatoare(void *argument)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////  IMPLEMENTARE STERGATOARE  /////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Porneste PWM pe timer 3 canal 4 (pin PB1)
 8000ef8:	4b8d      	ldr	r3, [pc, #564]	; (8001130 <Stergatoare+0x240>)
 8000efa:	210c      	movs	r1, #12
 8000efc:	0018      	movs	r0, r3
 8000efe:	f002 ff99 	bl	8003e34 <HAL_TIM_PWM_Start>

	for(;;){

		// STERGERE X1 - Joystick Sus
		if(actualValue[0] == 0 && treaptaCurenta == 0){ // Joystick sus
 8000f02:	4b8c      	ldr	r3, [pc, #560]	; (8001134 <Stergatoare+0x244>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d133      	bne.n	8000f72 <Stergatoare+0x82>
 8000f0a:	4b8b      	ldr	r3, [pc, #556]	; (8001138 <Stergatoare+0x248>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d12f      	bne.n	8000f72 <Stergatoare+0x82>
			servoBusy = 1;
 8000f12:	4b8a      	ldr	r3, [pc, #552]	; (800113c <Stergatoare+0x24c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

			TIM3 -> CCR4 = 500;   // 0%
 8000f18:	4b89      	ldr	r3, [pc, #548]	; (8001140 <Stergatoare+0x250>)
 8000f1a:	22fa      	movs	r2, #250	; 0xfa
 8000f1c:	0052      	lsls	r2, r2, #1
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f20:	20c8      	movs	r0, #200	; 0xc8
 8000f22:	f000 fd1b 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000f26:	4b86      	ldr	r3, [pc, #536]	; (8001140 <Stergatoare+0x250>)
 8000f28:	22fa      	movs	r2, #250	; 0xfa
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f2e:	20c8      	movs	r0, #200	; 0xc8
 8000f30:	f000 fd14 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000f34:	4b82      	ldr	r3, [pc, #520]	; (8001140 <Stergatoare+0x250>)
 8000f36:	4a83      	ldr	r2, [pc, #524]	; (8001144 <Stergatoare+0x254>)
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f3a:	20c8      	movs	r0, #200	; 0xc8
 8000f3c:	f000 fd0e 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 8000f40:	4b7f      	ldr	r3, [pc, #508]	; (8001140 <Stergatoare+0x250>)
 8000f42:	22fa      	movs	r2, #250	; 0xfa
 8000f44:	00d2      	lsls	r2, r2, #3
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f48:	20c8      	movs	r0, #200	; 0xc8
 8000f4a:	f000 fd07 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 8000f4e:	4b7c      	ldr	r3, [pc, #496]	; (8001140 <Stergatoare+0x250>)
 8000f50:	2296      	movs	r2, #150	; 0x96
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(250);
 8000f56:	20fa      	movs	r0, #250	; 0xfa
 8000f58:	f000 fd00 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8000f5c:	4b78      	ldr	r3, [pc, #480]	; (8001140 <Stergatoare+0x250>)
 8000f5e:	22fa      	movs	r2, #250	; 0xfa
 8000f60:	0052      	lsls	r2, r2, #1
 8000f62:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f64:	20c8      	movs	r0, #200	; 0xc8
 8000f66:	f000 fcf9 	bl	800195c <HAL_Delay>

			servoBusy = 0;
 8000f6a:	4b74      	ldr	r3, [pc, #464]	; (800113c <Stergatoare+0x24c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e006      	b.n	8000f80 <Stergatoare+0x90>
		}
		else{
			TIM3 -> CCR4 = 500;   // 0%
 8000f72:	4b73      	ldr	r3, [pc, #460]	; (8001140 <Stergatoare+0x250>)
 8000f74:	22fa      	movs	r2, #250	; 0xfa
 8000f76:	0052      	lsls	r2, r2, #1
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8000f7a:	2064      	movs	r0, #100	; 0x64
 8000f7c:	f000 fcee 	bl	800195c <HAL_Delay>
		}

		// Setare treapta de viteza, maxim 3 trepte
		if (actualValue[0] >= 85 && treaptaCurenta <= 2){ //Joystick jos
 8000f80:	4b6c      	ldr	r3, [pc, #432]	; (8001134 <Stergatoare+0x244>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b54      	cmp	r3, #84	; 0x54
 8000f86:	d908      	bls.n	8000f9a <Stergatoare+0xaa>
 8000f88:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <Stergatoare+0x248>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d804      	bhi.n	8000f9a <Stergatoare+0xaa>
			treaptaCurenta++;
 8000f90:	4b69      	ldr	r3, [pc, #420]	; (8001138 <Stergatoare+0x248>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	4b68      	ldr	r3, [pc, #416]	; (8001138 <Stergatoare+0x248>)
 8000f98:	601a      	str	r2, [r3, #0]
		}

		// Joystick sus, micsorare treapta viteza
		if(actualValue[0] == 0 && treaptaCurenta > 0){
 8000f9a:	4b66      	ldr	r3, [pc, #408]	; (8001134 <Stergatoare+0x244>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d108      	bne.n	8000fb4 <Stergatoare+0xc4>
 8000fa2:	4b65      	ldr	r3, [pc, #404]	; (8001138 <Stergatoare+0x248>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d004      	beq.n	8000fb4 <Stergatoare+0xc4>
			treaptaCurenta--;
 8000faa:	4b63      	ldr	r3, [pc, #396]	; (8001138 <Stergatoare+0x248>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1e5a      	subs	r2, r3, #1
 8000fb0:	4b61      	ldr	r3, [pc, #388]	; (8001138 <Stergatoare+0x248>)
 8000fb2:	601a      	str	r2, [r3, #0]
		}

		// TREAPTA 1

		if(treaptaCurenta == 1)	{
 8000fb4:	4b60      	ldr	r3, [pc, #384]	; (8001138 <Stergatoare+0x248>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d12b      	bne.n	8001014 <Stergatoare+0x124>
			servoBusy = 1;
 8000fbc:	4b5f      	ldr	r3, [pc, #380]	; (800113c <Stergatoare+0x24c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]

			TIM3 -> CCR4 = 500;   // 0%
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <Stergatoare+0x250>)
 8000fc4:	22fa      	movs	r2, #250	; 0xfa
 8000fc6:	0052      	lsls	r2, r2, #1
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000fca:	2096      	movs	r0, #150	; 0x96
 8000fcc:	f000 fcc6 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000fd0:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <Stergatoare+0x250>)
 8000fd2:	22fa      	movs	r2, #250	; 0xfa
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000fd8:	2096      	movs	r0, #150	; 0x96
 8000fda:	f000 fcbf 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000fde:	4b58      	ldr	r3, [pc, #352]	; (8001140 <Stergatoare+0x250>)
 8000fe0:	4a58      	ldr	r2, [pc, #352]	; (8001144 <Stergatoare+0x254>)
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000fe4:	2096      	movs	r0, #150	; 0x96
 8000fe6:	f000 fcb9 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 8000fea:	4b55      	ldr	r3, [pc, #340]	; (8001140 <Stergatoare+0x250>)
 8000fec:	22fa      	movs	r2, #250	; 0xfa
 8000fee:	00d2      	lsls	r2, r2, #3
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000ff2:	2096      	movs	r0, #150	; 0x96
 8000ff4:	f000 fcb2 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 8000ff8:	4b51      	ldr	r3, [pc, #324]	; (8001140 <Stergatoare+0x250>)
 8000ffa:	2296      	movs	r2, #150	; 0x96
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8001000:	2096      	movs	r0, #150	; 0x96
 8001002:	f000 fcab 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8001006:	4b4e      	ldr	r3, [pc, #312]	; (8001140 <Stergatoare+0x250>)
 8001008:	22fa      	movs	r2, #250	; 0xfa
 800100a:	0052      	lsls	r2, r2, #1
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 800100e:	20c8      	movs	r0, #200	; 0xc8
 8001010:	f000 fca4 	bl	800195c <HAL_Delay>
		}

		// TREAPTA 2

		if(treaptaCurenta == 2)	{
 8001014:	4b48      	ldr	r3, [pc, #288]	; (8001138 <Stergatoare+0x248>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d12b      	bne.n	8001074 <Stergatoare+0x184>
			servoBusy = 1;
 800101c:	4b47      	ldr	r3, [pc, #284]	; (800113c <Stergatoare+0x24c>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

			TIM3 -> CCR4 = 500;   // 0%
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <Stergatoare+0x250>)
 8001024:	22fa      	movs	r2, #250	; 0xfa
 8001026:	0052      	lsls	r2, r2, #1
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f000 fc96 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <Stergatoare+0x250>)
 8001032:	22fa      	movs	r2, #250	; 0xfa
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f000 fc8f 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 800103e:	4b40      	ldr	r3, [pc, #256]	; (8001140 <Stergatoare+0x250>)
 8001040:	4a40      	ldr	r2, [pc, #256]	; (8001144 <Stergatoare+0x254>)
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001044:	2064      	movs	r0, #100	; 0x64
 8001046:	f000 fc89 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <Stergatoare+0x250>)
 800104c:	22fa      	movs	r2, #250	; 0xfa
 800104e:	00d2      	lsls	r2, r2, #3
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001052:	2064      	movs	r0, #100	; 0x64
 8001054:	f000 fc82 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 8001058:	4b39      	ldr	r3, [pc, #228]	; (8001140 <Stergatoare+0x250>)
 800105a:	2296      	movs	r2, #150	; 0x96
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001060:	2064      	movs	r0, #100	; 0x64
 8001062:	f000 fc7b 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8001066:	4b36      	ldr	r3, [pc, #216]	; (8001140 <Stergatoare+0x250>)
 8001068:	22fa      	movs	r2, #250	; 0xfa
 800106a:	0052      	lsls	r2, r2, #1
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f000 fc74 	bl	800195c <HAL_Delay>
		}

		// TREAPTA 3

		if (treaptaCurenta == 3) {
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <Stergatoare+0x248>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d12b      	bne.n	80010d4 <Stergatoare+0x1e4>
			servoBusy = 1;
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <Stergatoare+0x24c>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]

			TIM3 -> CCR4 = 500;   // 0%
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <Stergatoare+0x250>)
 8001084:	22fa      	movs	r2, #250	; 0xfa
 8001086:	0052      	lsls	r2, r2, #1
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 800108a:	204b      	movs	r0, #75	; 0x4b
 800108c:	f000 fc66 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <Stergatoare+0x250>)
 8001092:	22fa      	movs	r2, #250	; 0xfa
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 8001098:	204b      	movs	r0, #75	; 0x4b
 800109a:	f000 fc5f 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <Stergatoare+0x250>)
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <Stergatoare+0x254>)
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 80010a4:	204b      	movs	r0, #75	; 0x4b
 80010a6:	f000 fc59 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <Stergatoare+0x250>)
 80010ac:	22fa      	movs	r2, #250	; 0xfa
 80010ae:	00d2      	lsls	r2, r2, #3
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 80010b2:	204b      	movs	r0, #75	; 0x4b
 80010b4:	f000 fc52 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <Stergatoare+0x250>)
 80010ba:	2296      	movs	r2, #150	; 0x96
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 80010c0:	204b      	movs	r0, #75	; 0x4b
 80010c2:	f000 fc4b 	bl	800195c <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <Stergatoare+0x250>)
 80010c8:	22fa      	movs	r2, #250	; 0xfa
 80010ca:	0052      	lsls	r2, r2, #1
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 80010ce:	20c8      	movs	r0, #200	; 0xc8
 80010d0:	f000 fc44 	bl	800195c <HAL_Delay>
		}

		// RESETARE - Apasare Buton

		if (actualValue[2] <= 100){ // Buton apasat
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <Stergatoare+0x244>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b64      	cmp	r3, #100	; 0x64
 80010da:	d809      	bhi.n	80010f0 <Stergatoare+0x200>
			TIM3 -> CCR4 = 500; //Motor reset
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <Stergatoare+0x250>)
 80010de:	22fa      	movs	r2, #250	; 0xfa
 80010e0:	0052      	lsls	r2, r2, #1
 80010e2:	641a      	str	r2, [r3, #64]	; 0x40
			treaptaCurenta = 0;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <Stergatoare+0x248>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
			servoBusy = 0;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <Stergatoare+0x24c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
		}

		// STROPIRE PARBRIZ

		if (actualValue[1] == 0) { //Joystick dreapta;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <Stergatoare+0x244>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10a      	bne.n	800110e <Stergatoare+0x21e>
			servoBusy = 1;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <Stergatoare+0x24c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
			HAL_Delay(2000);
 80010fe:	23fa      	movs	r3, #250	; 0xfa
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	0018      	movs	r0, r3
 8001104:	f000 fc2a 	bl	800195c <HAL_Delay>
			servoBusy = 0;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <Stergatoare+0x24c>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
		}

		// STROPIRE LUNETA

		if(actualValue[1] >= 85){ //Stanga !!!
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <Stergatoare+0x244>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b54      	cmp	r3, #84	; 0x54
 8001114:	d800      	bhi.n	8001118 <Stergatoare+0x228>
 8001116:	e6f4      	b.n	8000f02 <Stergatoare+0x12>
			servoBusy = 1;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <Stergatoare+0x24c>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
			HAL_Delay(2000);
 800111e:	23fa      	movs	r3, #250	; 0xfa
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	0018      	movs	r0, r3
 8001124:	f000 fc1a 	bl	800195c <HAL_Delay>
			servoBusy = 0;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <Stergatoare+0x24c>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
		if(actualValue[0] == 0 && treaptaCurenta == 0){ // Joystick sus
 800112e:	e6e8      	b.n	8000f02 <Stergatoare+0x12>
 8001130:	20001d80 	.word	0x20001d80
 8001134:	20001eac 	.word	0x20001eac
 8001138:	20001e9c 	.word	0x20001e9c
 800113c:	20001eb8 	.word	0x20001eb8
 8001140:	40000400 	.word	0x40000400
 8001144:	000005aa 	.word	0x000005aa

08001148 <ReadJoystick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadJoystick */
void ReadJoystick(void *argument)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadJoystick */
	HAL_ADC_Start_DMA(&hadc, value, 3); // start adc in DMA mode
 8001150:	491f      	ldr	r1, [pc, #124]	; (80011d0 <ReadJoystick+0x88>)
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <ReadJoystick+0x8c>)
 8001154:	2203      	movs	r2, #3
 8001156:	0018      	movs	r0, r3
 8001158:	f000 fd64 	bl	8001c24 <HAL_ADC_Start_DMA>

  for(;;)  {
	int sum1 = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
	int sum2 = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
	int sum3 = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < 5; i++){
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	e011      	b.n	8001192 <ReadJoystick+0x4a>
		// Adauga valorile de la ADC in sume
		sum1 += value[0];
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <ReadJoystick+0x88>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	18d3      	adds	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
		sum2 += value[1];
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <ReadJoystick+0x88>)
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	18d3      	adds	r3, r2, r3
 8001180:	613b      	str	r3, [r7, #16]
		sum3 += value[2];
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <ReadJoystick+0x88>)
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 5; i++){
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3301      	adds	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b04      	cmp	r3, #4
 8001196:	ddea      	ble.n	800116e <ReadJoystick+0x26>
	}

	// Pune valorile mediate in array-ul pt Servo si LCD
	actualValue[0] = sum1 / 5;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2105      	movs	r1, #5
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff f83d 	bl	800021c <__divsi3>
 80011a2:	0003      	movs	r3, r0
 80011a4:	001a      	movs	r2, r3
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <ReadJoystick+0x90>)
 80011a8:	601a      	str	r2, [r3, #0]
	actualValue[1] = sum2 / 5;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	2105      	movs	r1, #5
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff f834 	bl	800021c <__divsi3>
 80011b4:	0003      	movs	r3, r0
 80011b6:	001a      	movs	r2, r3
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <ReadJoystick+0x90>)
 80011ba:	605a      	str	r2, [r3, #4]
	actualValue[2] = sum3 / 5;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2105      	movs	r1, #5
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff f82b 	bl	800021c <__divsi3>
 80011c6:	0003      	movs	r3, r0
 80011c8:	001a      	movs	r2, r3
 80011ca:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <ReadJoystick+0x90>)
 80011cc:	609a      	str	r2, [r3, #8]
  for(;;)  {
 80011ce:	e7c5      	b.n	800115c <ReadJoystick+0x14>
 80011d0:	20001ea0 	.word	0x20001ea0
 80011d4:	20001c98 	.word	0x20001c98
 80011d8:	20001eac 	.word	0x20001eac

080011dc <clearScreen.0>:
	// initializare LCD
	st7565_init();
	st7565_backlight_enable();


	void clearScreen(){	// Curata ecranul
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4663      	mov	r3, ip
 80011e4:	607b      	str	r3, [r7, #4]
		st7565_clear_buffer(buffer); 	// goleste buffer
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <clearScreen.0+0x24>)
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fac9 	bl	8000780 <st7565_clear_buffer>
		st7565_write_buffer(buffer);	// il scrie pe ecran (curata ecranul)
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <clearScreen.0+0x24>)
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff f8ff 	bl	80003f4 <st7565_write_buffer>
	}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	20000000 	.word	0x20000000

08001204 <ControlLCD>:
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af04      	add	r7, sp, #16
 800120a:	6078      	str	r0, [r7, #4]
void ControlLCD(void *argument)
 800120c:	2318      	movs	r3, #24
 800120e:	2208      	movs	r2, #8
 8001210:	189b      	adds	r3, r3, r2
 8001212:	19db      	adds	r3, r3, r7
 8001214:	60bb      	str	r3, [r7, #8]
	st7565_init();
 8001216:	f7ff f977 	bl	8000508 <st7565_init>
	st7565_backlight_enable();
 800121a:	f7ff fa23 	bl	8000664 <st7565_backlight_enable>
	uint8_t cleared = 0;	// Pt treptele de viteza
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for(;;)	{

		if(servoBusy == 0){
 8001226:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <ControlLCD+0x1cc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <ControlLCD+0x30>
			displayBusy = 0;
 800122e:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <ControlLCD+0x1d0>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
		}

		if (displayBusy == 0){
 8001234:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <ControlLCD+0x1d0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d108      	bne.n	800124e <ControlLCD+0x4a>
			clearScreen();
 800123c:	2308      	movs	r3, #8
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	469c      	mov	ip, r3
 8001242:	f7ff ffcb 	bl	80011dc <clearScreen.0>
			cleared = 0;
 8001246:	230f      	movs	r3, #15
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
		}

		// STERGERE X1
		if(actualValue[0] == 0 && treaptaCurenta == 0){ // Joystick sus
 800124e:	4b62      	ldr	r3, [pc, #392]	; (80013d8 <ControlLCD+0x1d4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d116      	bne.n	8001284 <ControlLCD+0x80>
 8001256:	4b61      	ldr	r3, [pc, #388]	; (80013dc <ControlLCD+0x1d8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d112      	bne.n	8001284 <ControlLCD+0x80>
			displayBusy = 1;
 800125e:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <ControlLCD+0x1d0>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

			st7565_drawbitmap(buffer, 0, 0, x1, 128, 64, 1); // copiaza poza in buffer
 8001264:	4b5e      	ldr	r3, [pc, #376]	; (80013e0 <ControlLCD+0x1dc>)
 8001266:	485f      	ldr	r0, [pc, #380]	; (80013e4 <ControlLCD+0x1e0>)
 8001268:	2201      	movs	r2, #1
 800126a:	9202      	str	r2, [sp, #8]
 800126c:	2240      	movs	r2, #64	; 0x40
 800126e:	9201      	str	r2, [sp, #4]
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	9200      	str	r2, [sp, #0]
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	f7ff fafc 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 800127c:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <ControlLCD+0x1e0>)
 800127e:	0018      	movs	r0, r3
 8001280:	f7ff f8b8 	bl	80003f4 <st7565_write_buffer>
		}

		// TEMPORIZATOR
		// TREAPTA 1

		if(treaptaCurenta == 1)	{
 8001284:	4b55      	ldr	r3, [pc, #340]	; (80013dc <ControlLCD+0x1d8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d11f      	bne.n	80012cc <ControlLCD+0xc8>
			displayBusy = 1;
 800128c:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <ControlLCD+0x1d0>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]

			if(cleared != 0){	// Verifica daca este nevoie sa curete ecranul pt afisaj
 8001292:	240f      	movs	r4, #15
 8001294:	193b      	adds	r3, r7, r4
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <ControlLCD+0xa8>
				clearScreen();	// (trecere de la o treapta la alta)
 800129c:	2308      	movs	r3, #8
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	469c      	mov	ip, r3
 80012a2:	f7ff ff9b 	bl	80011dc <clearScreen.0>
				cleared = 0;
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
			}

			st7565_drawbitmap(buffer, 0, 0, treapta1, 128, 64, 1); // copiaza poza in buffer
 80012ac:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <ControlLCD+0x1e4>)
 80012ae:	484d      	ldr	r0, [pc, #308]	; (80013e4 <ControlLCD+0x1e0>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	9202      	str	r2, [sp, #8]
 80012b4:	2240      	movs	r2, #64	; 0x40
 80012b6:	9201      	str	r2, [sp, #4]
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	9200      	str	r2, [sp, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	f7ff fad8 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <ControlLCD+0x1e0>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7ff f894 	bl	80003f4 <st7565_write_buffer>
		}

		// TREAPTA 2

		if(treaptaCurenta == 2)	{
 80012cc:	4b43      	ldr	r3, [pc, #268]	; (80013dc <ControlLCD+0x1d8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d11f      	bne.n	8001314 <ControlLCD+0x110>
			displayBusy = 1;
 80012d4:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <ControlLCD+0x1d0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

			if(cleared != 1){	// Verifica daca este nevoie sa curete ecranul pt afisaj
 80012da:	240f      	movs	r4, #15
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d007      	beq.n	80012f4 <ControlLCD+0xf0>
				clearScreen();	// (trecere de la o treapta la alta)
 80012e4:	2308      	movs	r3, #8
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	469c      	mov	ip, r3
 80012ea:	f7ff ff77 	bl	80011dc <clearScreen.0>
				cleared = 1;
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
			}

			st7565_drawbitmap(buffer, 0, 0, treapta2, 128, 64, 1); // copiaza poza in buffer
 80012f4:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <ControlLCD+0x1e8>)
 80012f6:	483b      	ldr	r0, [pc, #236]	; (80013e4 <ControlLCD+0x1e0>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	9202      	str	r2, [sp, #8]
 80012fc:	2240      	movs	r2, #64	; 0x40
 80012fe:	9201      	str	r2, [sp, #4]
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	9200      	str	r2, [sp, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	f7ff fab4 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 800130c:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <ControlLCD+0x1e0>)
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff f870 	bl	80003f4 <st7565_write_buffer>

		}

		// TREAPTA 3

		if (treaptaCurenta == 3) {
 8001314:	4b31      	ldr	r3, [pc, #196]	; (80013dc <ControlLCD+0x1d8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d11f      	bne.n	800135c <ControlLCD+0x158>
			displayBusy = 1;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <ControlLCD+0x1d0>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

			if(cleared != 2){	// Verifica daca este nevoie sa curete ecranul pt afisaj
 8001322:	240f      	movs	r4, #15
 8001324:	193b      	adds	r3, r7, r4
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d007      	beq.n	800133c <ControlLCD+0x138>
				clearScreen();	// (trecere de la o treapta la alta)
 800132c:	2308      	movs	r3, #8
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	469c      	mov	ip, r3
 8001332:	f7ff ff53 	bl	80011dc <clearScreen.0>
				cleared = 2;
 8001336:	193b      	adds	r3, r7, r4
 8001338:	2202      	movs	r2, #2
 800133a:	701a      	strb	r2, [r3, #0]
			}

			st7565_drawbitmap(buffer, 0, 0, treapta3, 128, 64, 1); // copiaza poza in buffer
 800133c:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <ControlLCD+0x1ec>)
 800133e:	4829      	ldr	r0, [pc, #164]	; (80013e4 <ControlLCD+0x1e0>)
 8001340:	2201      	movs	r2, #1
 8001342:	9202      	str	r2, [sp, #8]
 8001344:	2240      	movs	r2, #64	; 0x40
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	f7ff fa90 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <ControlLCD+0x1e0>)
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff f84c 	bl	80003f4 <st7565_write_buffer>
		}

		// STROPIRE PARBRIZ

		if (actualValue[1] <= 2 && displayBusy != 1) { //Joystick dreapta
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <ControlLCD+0x1d4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d816      	bhi.n	8001392 <ControlLCD+0x18e>
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <ControlLCD+0x1d0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d012      	beq.n	8001392 <ControlLCD+0x18e>
			displayBusy = 1;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <ControlLCD+0x1d0>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

			st7565_drawbitmap(buffer, 0, 0, parbriz, 128, 64, 1); // copiaza poza in buffer
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <ControlLCD+0x1f0>)
 8001374:	481b      	ldr	r0, [pc, #108]	; (80013e4 <ControlLCD+0x1e0>)
 8001376:	2201      	movs	r2, #1
 8001378:	9202      	str	r2, [sp, #8]
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	9200      	str	r2, [sp, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	f7ff fa75 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <ControlLCD+0x1e0>)
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff f831 	bl	80003f4 <st7565_write_buffer>
		}

		// STROPIRE LUNETA

		if(actualValue[1] >= 85 && displayBusy != 1){ //Stanga !!!
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <ControlLCD+0x1d4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b54      	cmp	r3, #84	; 0x54
 8001398:	d800      	bhi.n	800139c <ControlLCD+0x198>
 800139a:	e744      	b.n	8001226 <ControlLCD+0x22>
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <ControlLCD+0x1d0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d100      	bne.n	80013a6 <ControlLCD+0x1a2>
 80013a4:	e73f      	b.n	8001226 <ControlLCD+0x22>
			displayBusy = 1;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <ControlLCD+0x1d0>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

			st7565_drawbitmap(buffer, 0, 0, luneta, 128, 64, 1); // copiaza poza in buffer
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <ControlLCD+0x1f4>)
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <ControlLCD+0x1e0>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	9202      	str	r2, [sp, #8]
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	9200      	str	r2, [sp, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	f7ff fa58 	bl	8000874 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <ControlLCD+0x1e0>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff f814 	bl	80003f4 <st7565_write_buffer>
		if(servoBusy == 0){
 80013cc:	e72b      	b.n	8001226 <ControlLCD+0x22>
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	20001eb8 	.word	0x20001eb8
 80013d4:	20001ebc 	.word	0x20001ebc
 80013d8:	20001eac 	.word	0x20001eac
 80013dc:	20001e9c 	.word	0x20001e9c
 80013e0:	20000408 	.word	0x20000408
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000808 	.word	0x20000808
 80013ec:	20000c08 	.word	0x20000c08
 80013f0:	20001008 	.word	0x20001008
 80013f4:	20001408 	.word	0x20001408
 80013f8:	20001808 	.word	0x20001808

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	e7fe      	b.n	8001404 <Error_Handler+0x8>
	...

08001408 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_MspInit+0x50>)
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_MspInit+0x50>)
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	619a      	str	r2, [r3, #24]
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_MspInit+0x50>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2201      	movs	r2, #1
 8001420:	4013      	ands	r3, r2
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_MspInit+0x50>)
 8001428:	69da      	ldr	r2, [r3, #28]
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_MspInit+0x50>)
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	0549      	lsls	r1, r1, #21
 8001430:	430a      	orrs	r2, r1
 8001432:	61da      	str	r2, [r3, #28]
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_MspInit+0x50>)
 8001436:	69da      	ldr	r2, [r3, #28]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	055b      	lsls	r3, r3, #21
 800143c:	4013      	ands	r3, r2
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001442:	2302      	movs	r3, #2
 8001444:	425b      	negs	r3, r3
 8001446:	2200      	movs	r2, #0
 8001448:	2103      	movs	r1, #3
 800144a:	0018      	movs	r0, r3
 800144c:	f000 ff46 	bl	80022dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b08b      	sub	sp, #44	; 0x2c
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	2414      	movs	r4, #20
 8001466:	193b      	adds	r3, r7, r4
 8001468:	0018      	movs	r0, r3
 800146a:	2314      	movs	r3, #20
 800146c:	001a      	movs	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	f006 f8f3 	bl	800765a <memset>
  if(hadc->Instance==ADC1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a35      	ldr	r2, [pc, #212]	; (8001550 <HAL_ADC_MspInit+0xf4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d163      	bne.n	8001546 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800147e:	4b35      	ldr	r3, [pc, #212]	; (8001554 <HAL_ADC_MspInit+0xf8>)
 8001480:	699a      	ldr	r2, [r3, #24]
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <HAL_ADC_MspInit+0xf8>)
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	0089      	lsls	r1, r1, #2
 8001488:	430a      	orrs	r2, r1
 800148a:	619a      	str	r2, [r3, #24]
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <HAL_ADC_MspInit+0xf8>)
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <HAL_ADC_MspInit+0xf8>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_ADC_MspInit+0xf8>)
 80014a0:	2180      	movs	r1, #128	; 0x80
 80014a2:	0309      	lsls	r1, r1, #12
 80014a4:	430a      	orrs	r2, r1
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_ADC_MspInit+0xf8>)
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	031b      	lsls	r3, r3, #12
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	221c      	movs	r2, #28
 80014ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	2203      	movs	r2, #3
 80014c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	193b      	adds	r3, r7, r4
 80014ca:	4a23      	ldr	r2, [pc, #140]	; (8001558 <HAL_ADC_MspInit+0xfc>)
 80014cc:	0019      	movs	r1, r3
 80014ce:	0010      	movs	r0, r2
 80014d0:	f001 f8ec 	bl	80026ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_ADC_MspInit+0x100>)
 80014d6:	4a22      	ldr	r2, [pc, #136]	; (8001560 <HAL_ADC_MspInit+0x104>)
 80014d8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_ADC_MspInit+0x100>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_ADC_MspInit+0x100>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_ADC_MspInit+0x100>)
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_ADC_MspInit+0x100>)
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_ADC_MspInit+0x100>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_ADC_MspInit+0x100>)
 80014fe:	2220      	movs	r2, #32
 8001500:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_ADC_MspInit+0x100>)
 8001504:	22c0      	movs	r2, #192	; 0xc0
 8001506:	0192      	lsls	r2, r2, #6
 8001508:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_ADC_MspInit+0x100>)
 800150c:	0018      	movs	r0, r3
 800150e:	f000 ff17 	bl	8002340 <HAL_DMA_Init>
 8001512:	1e03      	subs	r3, r0, #0
 8001514:	d001      	beq.n	800151a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001516:	f7ff ff71 	bl	80013fc <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_ADC_MspInit+0x108>)
 800151c:	23a8      	movs	r3, #168	; 0xa8
 800151e:	58d3      	ldr	r3, [r2, r3]
 8001520:	4910      	ldr	r1, [pc, #64]	; (8001564 <HAL_ADC_MspInit+0x108>)
 8001522:	220f      	movs	r2, #15
 8001524:	4393      	bics	r3, r2
 8001526:	22a8      	movs	r2, #168	; 0xa8
 8001528:	508b      	str	r3, [r1, r2]
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_ADC_MspInit+0x108>)
 800152c:	23a8      	movs	r3, #168	; 0xa8
 800152e:	58d3      	ldr	r3, [r2, r3]
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <HAL_ADC_MspInit+0x108>)
 8001532:	2201      	movs	r2, #1
 8001534:	4313      	orrs	r3, r2
 8001536:	22a8      	movs	r2, #168	; 0xa8
 8001538:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_ADC_MspInit+0x100>)
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_ADC_MspInit+0x100>)
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b00b      	add	sp, #44	; 0x2c
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40012400 	.word	0x40012400
 8001554:	40021000 	.word	0x40021000
 8001558:	48000800 	.word	0x48000800
 800155c:	20001cd8 	.word	0x20001cd8
 8001560:	40020008 	.word	0x40020008
 8001564:	40020000 	.word	0x40020000

08001568 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b08b      	sub	sp, #44	; 0x2c
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	2414      	movs	r4, #20
 8001572:	193b      	adds	r3, r7, r4
 8001574:	0018      	movs	r0, r3
 8001576:	2314      	movs	r3, #20
 8001578:	001a      	movs	r2, r3
 800157a:	2100      	movs	r1, #0
 800157c:	f006 f86d 	bl	800765a <memset>
  if(hspi->Instance==SPI1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <HAL_SPI_MspInit+0x90>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d132      	bne.n	80015f0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_SPI_MspInit+0x94>)
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_SPI_MspInit+0x94>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0149      	lsls	r1, r1, #5
 8001594:	430a      	orrs	r2, r1
 8001596:	619a      	str	r2, [r3, #24]
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_SPI_MspInit+0x94>)
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	015b      	lsls	r3, r3, #5
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_SPI_MspInit+0x94>)
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_SPI_MspInit+0x94>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0289      	lsls	r1, r1, #10
 80015b0:	430a      	orrs	r2, r1
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_SPI_MspInit+0x94>)
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015c2:	0021      	movs	r1, r4
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	22a0      	movs	r2, #160	; 0xa0
 80015c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2202      	movs	r2, #2
 80015ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2203      	movs	r2, #3
 80015da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	187a      	adds	r2, r7, r1
 80015e4:	2390      	movs	r3, #144	; 0x90
 80015e6:	05db      	lsls	r3, r3, #23
 80015e8:	0011      	movs	r1, r2
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 f85e 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b00b      	add	sp, #44	; 0x2c
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	40013000 	.word	0x40013000
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_TIM_Base_MspInit+0xac>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d147      	bne.n	80016a2 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001612:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001618:	2102      	movs	r1, #2
 800161a:	430a      	orrs	r2, r1
 800161c:	61da      	str	r2, [r3, #28]
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2202      	movs	r2, #2
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 800162c:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <HAL_TIM_Base_MspInit+0xb8>)
 800162e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 8001632:	2210      	movs	r2, #16
 8001634:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	0052      	lsls	r2, r2, #1
 8001648:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	00d2      	lsls	r2, r2, #3
 8001650:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 8001660:	0018      	movs	r0, r3
 8001662:	f000 fe6d 	bl	8002340 <HAL_DMA_Init>
 8001666:	1e03      	subs	r3, r0, #0
 8001668:	d001      	beq.n	800166e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800166a:	f7ff fec7 	bl	80013fc <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_DEFAULT);
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <HAL_TIM_Base_MspInit+0xbc>)
 8001670:	23a8      	movs	r3, #168	; 0xa8
 8001672:	58d3      	ldr	r3, [r2, r3]
 8001674:	4911      	ldr	r1, [pc, #68]	; (80016bc <HAL_TIM_Base_MspInit+0xbc>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_TIM_Base_MspInit+0xc0>)
 8001678:	4013      	ands	r3, r2
 800167a:	22a8      	movs	r2, #168	; 0xa8
 800167c:	508b      	str	r3, [r1, r2]
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_TIM_Base_MspInit+0xbc>)
 8001680:	490e      	ldr	r1, [pc, #56]	; (80016bc <HAL_TIM_Base_MspInit+0xbc>)
 8001682:	23a8      	movs	r3, #168	; 0xa8
 8001684:	58d3      	ldr	r3, [r2, r3]
 8001686:	22a8      	movs	r2, #168	; 0xa8
 8001688:	508b      	str	r3, [r1, r2]

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 800169a:	621a      	str	r2, [r3, #32]
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_TIM_Base_MspInit+0xb4>)
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b004      	add	sp, #16
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40000400 	.word	0x40000400
 80016b0:	40021000 	.word	0x40021000
 80016b4:	20001dc8 	.word	0x20001dc8
 80016b8:	40020030 	.word	0x40020030
 80016bc:	40020000 	.word	0x40020000
 80016c0:	fffff0ff 	.word	0xfffff0ff

080016c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	240c      	movs	r4, #12
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	0018      	movs	r0, r3
 80016d2:	2314      	movs	r3, #20
 80016d4:	001a      	movs	r2, r3
 80016d6:	2100      	movs	r1, #0
 80016d8:	f005 ffbf 	bl	800765a <memset>
  if(htim->Instance==TIM3)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <HAL_TIM_MspPostInit+0x74>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d123      	bne.n	800172e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_TIM_MspPostInit+0x78>)
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_TIM_MspPostInit+0x78>)
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	02c9      	lsls	r1, r1, #11
 80016f0:	430a      	orrs	r2, r1
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_TIM_MspPostInit+0x78>)
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	02db      	lsls	r3, r3, #11
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001702:	0021      	movs	r1, r4
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2202      	movs	r2, #2
 8001708:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2202      	movs	r2, #2
 800170e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	187b      	adds	r3, r7, r1
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800171c:	187b      	adds	r3, r7, r1
 800171e:	2201      	movs	r2, #1
 8001720:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	187b      	adds	r3, r7, r1
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_TIM_MspPostInit+0x7c>)
 8001726:	0019      	movs	r1, r3
 8001728:	0010      	movs	r0, r2
 800172a:	f000 ffbf 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b009      	add	sp, #36	; 0x24
 8001734:	bd90      	pop	{r4, r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	40000400 	.word	0x40000400
 800173c:	40021000 	.word	0x40021000
 8001740:	48000400 	.word	0x48000400

08001744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08b      	sub	sp, #44	; 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	2414      	movs	r4, #20
 800174e:	193b      	adds	r3, r7, r4
 8001750:	0018      	movs	r0, r3
 8001752:	2314      	movs	r3, #20
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f005 ff7f 	bl	800765a <memset>
  if(huart->Instance==USART2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <HAL_UART_MspInit+0x90>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d132      	bne.n	80017cc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <HAL_UART_MspInit+0x94>)
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_UART_MspInit+0x94>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	0289      	lsls	r1, r1, #10
 8001770:	430a      	orrs	r2, r1
 8001772:	61da      	str	r2, [r3, #28]
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_UART_MspInit+0x94>)
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_UART_MspInit+0x94>)
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_UART_MspInit+0x94>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0289      	lsls	r1, r1, #10
 800178c:	430a      	orrs	r2, r1
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_UART_MspInit+0x94>)
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179e:	0021      	movs	r1, r4
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2202      	movs	r2, #2
 80017aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	2201      	movs	r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	187a      	adds	r2, r7, r1
 80017c0:	2390      	movs	r3, #144	; 0x90
 80017c2:	05db      	lsls	r3, r3, #23
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 ff70 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b00b      	add	sp, #44	; 0x2c
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	40004400 	.word	0x40004400
 80017d8:	40021000 	.word	0x40021000

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 f89a 	bl	8001924 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017f0:	f005 f88c 	bl	800690c <xTaskGetSchedulerState>
 80017f4:	0003      	movs	r3, r0
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d001      	beq.n	80017fe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017fa:	f005 fd1d 	bl	8007238 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <DMA1_Ch1_IRQHandler+0x14>)
 800180a:	0018      	movs	r0, r3
 800180c:	f000 fe46 	bl	800249c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	20001cd8 	.word	0x20001cd8

0800181c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fe3a 	bl	800249c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	20001dc8 	.word	0x20001dc8

08001834 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001842:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopForever+0x6>)
  ldr r1, =_edata
 8001846:	490e      	ldr	r1, [pc, #56]	; (8001880 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <LoopForever+0xe>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <LoopForever+0x12>)
  ldr r4, =_ebss
 800185c:	4c0b      	ldr	r4, [pc, #44]	; (800188c <LoopForever+0x16>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800186a:	f7ff ffe3 	bl	8001834 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800186e:	f005 fec5 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7ff f86f 	bl	8000954 <main>

08001876 <LoopForever>:

LoopForever:
    b LoopForever
 8001876:	e7fe      	b.n	8001876 <LoopForever>
  ldr   r0, =_estack
 8001878:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	20001c7c 	.word	0x20001c7c
  ldr r2, =_sidata
 8001884:	08007994 	.word	0x08007994
  ldr r2, =_sbss
 8001888:	20001c7c 	.word	0x20001c7c
  ldr r4, =_ebss
 800188c:	200038cc 	.word	0x200038cc

08001890 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC1_COMP_IRQHandler>
	...

08001894 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <HAL_Init+0x24>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_Init+0x24>)
 800189e:	2110      	movs	r1, #16
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f809 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018aa:	f7ff fdad 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40022000 	.word	0x40022000

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_InitTick+0x5c>)
 80018c6:	681c      	ldr	r4, [r3, #0]
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_InitTick+0x60>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	0019      	movs	r1, r3
 80018ce:	23fa      	movs	r3, #250	; 0xfa
 80018d0:	0098      	lsls	r0, r3, #2
 80018d2:	f7fe fc19 	bl	8000108 <__udivsi3>
 80018d6:	0003      	movs	r3, r0
 80018d8:	0019      	movs	r1, r3
 80018da:	0020      	movs	r0, r4
 80018dc:	f7fe fc14 	bl	8000108 <__udivsi3>
 80018e0:	0003      	movs	r3, r0
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fd1f 	bl	8002326 <HAL_SYSTICK_Config>
 80018e8:	1e03      	subs	r3, r0, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e00f      	b.n	8001910 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d80b      	bhi.n	800190e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	2301      	movs	r3, #1
 80018fa:	425b      	negs	r3, r3
 80018fc:	2200      	movs	r2, #0
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 fcec 	bl	80022dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_InitTick+0x64>)
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b003      	add	sp, #12
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	20001c08 	.word	0x20001c08
 800191c:	20001c10 	.word	0x20001c10
 8001920:	20001c0c 	.word	0x20001c0c

08001924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_IncTick+0x1c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	001a      	movs	r2, r3
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_IncTick+0x20>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	18d2      	adds	r2, r2, r3
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_IncTick+0x20>)
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	20001c10 	.word	0x20001c10
 8001944:	20001ec0 	.word	0x20001ec0

08001948 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <HAL_GetTick+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	20001ec0 	.word	0x20001ec0

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fff0 	bl	8001948 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	001a      	movs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	189b      	adds	r3, r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	f7ff ffe0 	bl	8001948 <HAL_GetTick>
 8001988:	0002      	movs	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b004      	add	sp, #16
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	20001c10 	.word	0x20001c10

080019a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ac:	230f      	movs	r3, #15
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e125      	b.n	8001c0e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2234      	movs	r2, #52	; 0x34
 80019d4:	2100      	movs	r1, #0
 80019d6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff fd3e 	bl	800145c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e4:	2210      	movs	r2, #16
 80019e6:	4013      	ands	r3, r2
 80019e8:	d000      	beq.n	80019ec <HAL_ADC_Init+0x48>
 80019ea:	e103      	b.n	8001bf4 <HAL_ADC_Init+0x250>
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d000      	beq.n	80019f8 <HAL_ADC_Init+0x54>
 80019f6:	e0fd      	b.n	8001bf4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2204      	movs	r2, #4
 8001a00:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a02:	d000      	beq.n	8001a06 <HAL_ADC_Init+0x62>
 8001a04:	e0f6      	b.n	8001bf4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0a:	4a83      	ldr	r2, [pc, #524]	; (8001c18 <HAL_ADC_Init+0x274>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2202      	movs	r2, #2
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d112      	bne.n	8001a4a <HAL_ADC_Init+0xa6>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d009      	beq.n	8001a46 <HAL_ADC_Init+0xa2>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Init+0xa6>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_ADC_Init+0xa8>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d116      	bne.n	8001a7e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2218      	movs	r2, #24
 8001a58:	4393      	bics	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	0899      	lsrs	r1, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4964      	ldr	r1, [pc, #400]	; (8001c1c <HAL_ADC_Init+0x278>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7e1b      	ldrb	r3, [r3, #24]
 8001a92:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7e5b      	ldrb	r3, [r3, #25]
 8001a98:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a9a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7e9b      	ldrb	r3, [r3, #26]
 8001aa0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001aa2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d002      	beq.n	8001ab2 <HAL_ADC_Init+0x10e>
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	015b      	lsls	r3, r3, #5
 8001ab0:	e000      	b.n	8001ab4 <HAL_ADC_Init+0x110>
 8001ab2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ab4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001aba:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_Init+0x124>
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	e000      	b.n	8001aca <HAL_ADC_Init+0x126>
 8001ac8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001aca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2124      	movs	r1, #36	; 0x24
 8001ad0:	5c5b      	ldrb	r3, [r3, r1]
 8001ad2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001ad4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7edb      	ldrb	r3, [r3, #27]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d115      	bne.n	8001b10 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7e9b      	ldrb	r3, [r3, #26]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	0252      	lsls	r2, r2, #9
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	e00b      	b.n	8001b10 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	2220      	movs	r2, #32
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b08:	2201      	movs	r2, #1
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	23c2      	movs	r3, #194	; 0xc2
 8001b16:	33ff      	adds	r3, #255	; 0xff
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d007      	beq.n	8001b2c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68d9      	ldr	r1, [r3, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	055b      	lsls	r3, r3, #21
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d01b      	beq.n	8001b80 <HAL_ADC_Init+0x1dc>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d017      	beq.n	8001b80 <HAL_ADC_Init+0x1dc>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d013      	beq.n	8001b80 <HAL_ADC_Init+0x1dc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d00f      	beq.n	8001b80 <HAL_ADC_Init+0x1dc>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d00b      	beq.n	8001b80 <HAL_ADC_Init+0x1dc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d007      	beq.n	8001b80 <HAL_ADC_Init+0x1dc>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	2b06      	cmp	r3, #6
 8001b76:	d003      	beq.n	8001b80 <HAL_ADC_Init+0x1dc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	2b07      	cmp	r3, #7
 8001b7e:	d112      	bne.n	8001ba6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2107      	movs	r1, #7
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6959      	ldr	r1, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_ADC_Init+0x27c>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d10b      	bne.n	8001bce <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001bcc:	e01c      	b.n	8001c08 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	2212      	movs	r2, #18
 8001bd4:	4393      	bics	r3, r2
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	2201      	movs	r2, #1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001bea:	230f      	movs	r3, #15
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001bf2:	e009      	b.n	8001c08 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001c00:	230f      	movs	r3, #15
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c08:	230f      	movs	r3, #15
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	781b      	ldrb	r3, [r3, #0]
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b004      	add	sp, #16
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	fffffefd 	.word	0xfffffefd
 8001c1c:	fffe0219 	.word	0xfffe0219
 8001c20:	833fffe7 	.word	0x833fffe7

08001c24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c30:	2317      	movs	r3, #23
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d15e      	bne.n	8001d02 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2234      	movs	r2, #52	; 0x34
 8001c48:	5c9b      	ldrb	r3, [r3, r2]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_Start_DMA+0x2e>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e05e      	b.n	8001d10 <HAL_ADC_Start_DMA+0xec>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2234      	movs	r2, #52	; 0x34
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	7e5b      	ldrb	r3, [r3, #25]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d007      	beq.n	8001c72 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001c62:	2317      	movs	r3, #23
 8001c64:	18fc      	adds	r4, r7, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 f983 	bl	8001f74 <ADC_Enable>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c72:	2317      	movs	r3, #23
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d146      	bne.n	8001d0a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <HAL_ADC_Start_DMA+0xf4>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2234      	movs	r2, #52	; 0x34
 8001c98:	2100      	movs	r1, #0
 8001c9a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_ADC_Start_DMA+0xf8>)
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_ADC_Start_DMA+0xfc>)
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <HAL_ADC_Start_DMA+0x100>)
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	221c      	movs	r2, #28
 8001cba:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3340      	adds	r3, #64	; 0x40
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f000 fb70 	bl	80023d0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	e003      	b.n	8001d0a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d02:	2317      	movs	r3, #23
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2202      	movs	r2, #2
 8001d08:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d0a:	2317      	movs	r3, #23
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b007      	add	sp, #28
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	fffff0fe 	.word	0xfffff0fe
 8001d1c:	0800207d 	.word	0x0800207d
 8001d20:	08002131 	.word	0x08002131
 8001d24:	0800214f 	.word	0x0800214f

08001d28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d62:	230f      	movs	r3, #15
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	055b      	lsls	r3, r3, #21
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d011      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x46>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d00d      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x46>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d009      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x46>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d005      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x46>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d001      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x46>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2234      	movs	r2, #52	; 0x34
 8001da2:	5c9b      	ldrb	r3, [r3, r2]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x54>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e0d0      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x1f6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2234      	movs	r2, #52	; 0x34
 8001db0:	2101      	movs	r1, #1
 8001db2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2204      	movs	r2, #4
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d000      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x6a>
 8001dc0:	e0b4      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4a64      	ldr	r2, [pc, #400]	; (8001f58 <HAL_ADC_ConfigChannel+0x200>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d100      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x76>
 8001dcc:	e082      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	055b      	lsls	r3, r3, #21
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d037      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x108>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d033      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x108>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d02f      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x108>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d02b      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x108>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d027      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x108>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d023      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x108>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	2b06      	cmp	r3, #6
 8001e1e:	d01f      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x108>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	2b07      	cmp	r3, #7
 8001e26:	d01b      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	2107      	movs	r1, #7
 8001e34:	400b      	ands	r3, r1
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d012      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2107      	movs	r1, #7
 8001e46:	438a      	bics	r2, r1
 8001e48:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6959      	ldr	r1, [r3, #20]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2207      	movs	r2, #7
 8001e56:	401a      	ands	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d007      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x120>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b11      	cmp	r3, #17
 8001e6e:	d003      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x120>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b12      	cmp	r3, #18
 8001e76:	d163      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e78:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_ADC_ConfigChannel+0x204>)
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d009      	beq.n	8001e98 <HAL_ADC_ConfigChannel+0x140>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b11      	cmp	r3, #17
 8001e8a:	d102      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x13a>
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	03db      	lsls	r3, r3, #15
 8001e90:	e004      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x144>
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	045b      	lsls	r3, r3, #17
 8001e96:	e001      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x144>
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	041b      	lsls	r3, r3, #16
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	; (8001f5c <HAL_ADC_ConfigChannel+0x204>)
 8001e9e:	430b      	orrs	r3, r1
 8001ea0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d14a      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_ADC_ConfigChannel+0x208>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	492d      	ldr	r1, [pc, #180]	; (8001f64 <HAL_ADC_ConfigChannel+0x20c>)
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7fe f929 	bl	8000108 <__udivsi3>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	001a      	movs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	189b      	adds	r3, r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x16e>
 8001ed2:	e035      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4099      	lsls	r1, r3
 8001ee2:	000b      	movs	r3, r1
 8001ee4:	43d9      	mvns	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	400a      	ands	r2, r1
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d007      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x1ae>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b11      	cmp	r3, #17
 8001efc:	d003      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x1ae>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d11c      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_ADC_ConfigChannel+0x204>)
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d007      	beq.n	8001f22 <HAL_ADC_ConfigChannel+0x1ca>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b11      	cmp	r3, #17
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x1c6>
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_ADC_ConfigChannel+0x210>)
 8001f1c:	e002      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1cc>
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_ADC_ConfigChannel+0x214>)
 8001f20:	e000      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1cc>
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_ADC_ConfigChannel+0x218>)
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_ADC_ConfigChannel+0x204>)
 8001f26:	400b      	ands	r3, r1
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e009      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	2220      	movs	r2, #32
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001f38:	230f      	movs	r3, #15
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2234      	movs	r2, #52	; 0x34
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f48:	230f      	movs	r3, #15
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	00001001 	.word	0x00001001
 8001f5c:	40012708 	.word	0x40012708
 8001f60:	20001c08 	.word	0x20001c08
 8001f64:	000f4240 	.word	0x000f4240
 8001f68:	ffbfffff 	.word	0xffbfffff
 8001f6c:	feffffff 	.word	0xfeffffff
 8001f70:	ff7fffff 	.word	0xff7fffff

08001f74 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d112      	bne.n	8001fb8 <ADC_Enable+0x44>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d009      	beq.n	8001fb4 <ADC_Enable+0x40>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	401a      	ands	r2, r3
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d101      	bne.n	8001fb8 <ADC_Enable+0x44>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <ADC_Enable+0x46>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d152      	bne.n	8002064 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <ADC_Enable+0xfc>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	2210      	movs	r2, #16
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	2201      	movs	r2, #1
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e03f      	b.n	8002066 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <ADC_Enable+0x100>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	491f      	ldr	r1, [pc, #124]	; (8002078 <ADC_Enable+0x104>)
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7fe f883 	bl	8000108 <__udivsi3>
 8002002:	0003      	movs	r3, r0
 8002004:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002006:	e002      	b.n	800200e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3b01      	subs	r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f9      	bne.n	8002008 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002014:	f7ff fc98 	bl	8001948 <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800201c:	e01b      	b.n	8002056 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800201e:	f7ff fc93 	bl	8001948 <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d914      	bls.n	8002056 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	2b01      	cmp	r3, #1
 8002038:	d00d      	beq.n	8002056 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	2210      	movs	r2, #16
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2201      	movs	r2, #1
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e007      	b.n	8002066 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	4013      	ands	r3, r2
 8002060:	2b01      	cmp	r3, #1
 8002062:	d1dc      	bne.n	800201e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b004      	add	sp, #16
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	80000017 	.word	0x80000017
 8002074:	20001c08 	.word	0x20001c08
 8002078:	000f4240 	.word	0x000f4240

0800207c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	2250      	movs	r2, #80	; 0x50
 8002090:	4013      	ands	r3, r2
 8002092:	d140      	bne.n	8002116 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	23c0      	movs	r3, #192	; 0xc0
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	4013      	ands	r3, r2
 80020ae:	d12d      	bne.n	800210c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d129      	bne.n	800210c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2208      	movs	r2, #8
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d122      	bne.n	800210c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2204      	movs	r2, #4
 80020ce:	4013      	ands	r3, r2
 80020d0:	d110      	bne.n	80020f4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	210c      	movs	r1, #12
 80020de:	438a      	bics	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <ADC_DMAConvCplt+0xb0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	2201      	movs	r2, #1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
 80020f2:	e00b      	b.n	800210c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	2220      	movs	r2, #32
 80020fa:	431a      	orrs	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	2201      	movs	r2, #1
 8002106:	431a      	orrs	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	0018      	movs	r0, r3
 8002110:	f7ff fe0a 	bl	8001d28 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002114:	e005      	b.n	8002122 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	0010      	movs	r0, r2
 8002120:	4798      	blx	r3
}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	b004      	add	sp, #16
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	fffffefe 	.word	0xfffffefe

08002130 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff fdf9 	bl	8001d38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}

0800214e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	2240      	movs	r2, #64	; 0x40
 8002162:	431a      	orrs	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	2204      	movs	r2, #4
 800216e:	431a      	orrs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	0018      	movs	r0, r3
 8002178:	f7ff fde6 	bl	8001d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	0002      	movs	r2, r0
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b7f      	cmp	r3, #127	; 0x7f
 8002196:	d809      	bhi.n	80021ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002198:	1dfb      	adds	r3, r7, #7
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	001a      	movs	r2, r3
 800219e:	231f      	movs	r3, #31
 80021a0:	401a      	ands	r2, r3
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_EnableIRQ+0x30>)
 80021a4:	2101      	movs	r1, #1
 80021a6:	4091      	lsls	r1, r2
 80021a8:	000a      	movs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
  }
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	0002      	movs	r2, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b7f      	cmp	r3, #127	; 0x7f
 80021cc:	d828      	bhi.n	8002220 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ce:	4a2f      	ldr	r2, [pc, #188]	; (800228c <__NVIC_SetPriority+0xd4>)
 80021d0:	1dfb      	adds	r3, r7, #7
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	33c0      	adds	r3, #192	; 0xc0
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	589b      	ldr	r3, [r3, r2]
 80021de:	1dfa      	adds	r2, r7, #7
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	0011      	movs	r1, r2
 80021e4:	2203      	movs	r2, #3
 80021e6:	400a      	ands	r2, r1
 80021e8:	00d2      	lsls	r2, r2, #3
 80021ea:	21ff      	movs	r1, #255	; 0xff
 80021ec:	4091      	lsls	r1, r2
 80021ee:	000a      	movs	r2, r1
 80021f0:	43d2      	mvns	r2, r2
 80021f2:	401a      	ands	r2, r3
 80021f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	22ff      	movs	r2, #255	; 0xff
 80021fc:	401a      	ands	r2, r3
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	0018      	movs	r0, r3
 8002204:	2303      	movs	r3, #3
 8002206:	4003      	ands	r3, r0
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800220c:	481f      	ldr	r0, [pc, #124]	; (800228c <__NVIC_SetPriority+0xd4>)
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	b25b      	sxtb	r3, r3
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	430a      	orrs	r2, r1
 8002218:	33c0      	adds	r3, #192	; 0xc0
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800221e:	e031      	b.n	8002284 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <__NVIC_SetPriority+0xd8>)
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	0019      	movs	r1, r3
 8002228:	230f      	movs	r3, #15
 800222a:	400b      	ands	r3, r1
 800222c:	3b08      	subs	r3, #8
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3306      	adds	r3, #6
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	18d3      	adds	r3, r2, r3
 8002236:	3304      	adds	r3, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1dfa      	adds	r2, r7, #7
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	0011      	movs	r1, r2
 8002240:	2203      	movs	r2, #3
 8002242:	400a      	ands	r2, r1
 8002244:	00d2      	lsls	r2, r2, #3
 8002246:	21ff      	movs	r1, #255	; 0xff
 8002248:	4091      	lsls	r1, r2
 800224a:	000a      	movs	r2, r1
 800224c:	43d2      	mvns	r2, r2
 800224e:	401a      	ands	r2, r3
 8002250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	22ff      	movs	r2, #255	; 0xff
 8002258:	401a      	ands	r2, r3
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	0018      	movs	r0, r3
 8002260:	2303      	movs	r3, #3
 8002262:	4003      	ands	r3, r0
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002268:	4809      	ldr	r0, [pc, #36]	; (8002290 <__NVIC_SetPriority+0xd8>)
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	001c      	movs	r4, r3
 8002270:	230f      	movs	r3, #15
 8002272:	4023      	ands	r3, r4
 8002274:	3b08      	subs	r3, #8
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	430a      	orrs	r2, r1
 800227a:	3306      	adds	r3, #6
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	18c3      	adds	r3, r0, r3
 8002280:	3304      	adds	r3, #4
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b003      	add	sp, #12
 800228a:	bd90      	pop	{r4, r7, pc}
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	1e5a      	subs	r2, r3, #1
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	045b      	lsls	r3, r3, #17
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d301      	bcc.n	80022ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a8:	2301      	movs	r3, #1
 80022aa:	e010      	b.n	80022ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <SysTick_Config+0x44>)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	3a01      	subs	r2, #1
 80022b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b4:	2301      	movs	r3, #1
 80022b6:	425b      	negs	r3, r3
 80022b8:	2103      	movs	r1, #3
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff ff7c 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <SysTick_Config+0x44>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SysTick_Config+0x44>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	210f      	movs	r1, #15
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	1c02      	adds	r2, r0, #0
 80022ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	0011      	movs	r1, r2
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b004      	add	sp, #16
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	0002      	movs	r2, r0
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b25b      	sxtb	r3, r3
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff ff33 	bl	8002184 <__NVIC_EnableIRQ>
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff ffaf 	bl	8002294 <SysTick_Config>
 8002336:	0003      	movs	r3, r0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e036      	b.n	80023c4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2221      	movs	r2, #33	; 0x21
 800235a:	2102      	movs	r1, #2
 800235c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_DMA_Init+0x8c>)
 800236a:	4013      	ands	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 f946 	bl	8002638 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2221      	movs	r2, #33	; 0x21
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}  
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b004      	add	sp, #16
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	ffffc00f 	.word	0xffffc00f

080023d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80023de:	2317      	movs	r3, #23
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_DMA_Start_IT+0x24>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e04f      	b.n	8002494 <HAL_DMA_Start_IT+0xc4>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2221      	movs	r2, #33	; 0x21
 8002400:	5c9b      	ldrb	r3, [r3, r2]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d13a      	bne.n	800247e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2221      	movs	r2, #33	; 0x21
 800240c:	2102      	movs	r1, #2
 800240e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	438a      	bics	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f8d7 	bl	80025e0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	210e      	movs	r1, #14
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e00f      	b.n	800246c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	210a      	movs	r1, #10
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2104      	movs	r1, #4
 8002468:	438a      	bics	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e007      	b.n	800248e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	2100      	movs	r1, #0
 8002484:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002486:	2317      	movs	r3, #23
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	2202      	movs	r2, #2
 800248c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800248e:	2317      	movs	r3, #23
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
} 
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b006      	add	sp, #24
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	2204      	movs	r2, #4
 80024ba:	409a      	lsls	r2, r3
 80024bc:	0013      	movs	r3, r2
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	d024      	beq.n	800250e <HAL_DMA_IRQHandler+0x72>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2204      	movs	r2, #4
 80024c8:	4013      	ands	r3, r2
 80024ca:	d020      	beq.n	800250e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2220      	movs	r2, #32
 80024d4:	4013      	ands	r3, r2
 80024d6:	d107      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2104      	movs	r1, #4
 80024e4:	438a      	bics	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	2104      	movs	r1, #4
 80024f2:	4091      	lsls	r1, r2
 80024f4:	000a      	movs	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d100      	bne.n	8002502 <HAL_DMA_IRQHandler+0x66>
 8002500:	e06a      	b.n	80025d8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	0010      	movs	r0, r2
 800250a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800250c:	e064      	b.n	80025d8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2202      	movs	r2, #2
 8002514:	409a      	lsls	r2, r3
 8002516:	0013      	movs	r3, r2
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4013      	ands	r3, r2
 800251c:	d02b      	beq.n	8002576 <HAL_DMA_IRQHandler+0xda>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2202      	movs	r2, #2
 8002522:	4013      	ands	r3, r2
 8002524:	d027      	beq.n	8002576 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2220      	movs	r2, #32
 800252e:	4013      	ands	r3, r2
 8002530:	d10b      	bne.n	800254a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	210a      	movs	r1, #10
 800253e:	438a      	bics	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	2102      	movs	r1, #2
 8002554:	4091      	lsls	r1, r2
 8002556:	000a      	movs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	2100      	movs	r1, #0
 8002560:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d036      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	0010      	movs	r0, r2
 8002572:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002574:	e030      	b.n	80025d8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2208      	movs	r2, #8
 800257c:	409a      	lsls	r2, r3
 800257e:	0013      	movs	r3, r2
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4013      	ands	r3, r2
 8002584:	d028      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x13c>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2208      	movs	r2, #8
 800258a:	4013      	ands	r3, r2
 800258c:	d024      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	210e      	movs	r1, #14
 800259a:	438a      	bics	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	2101      	movs	r1, #1
 80025a8:	4091      	lsls	r1, r2
 80025aa:	000a      	movs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2221      	movs	r2, #33	; 0x21
 80025b8:	2101      	movs	r1, #1
 80025ba:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	2100      	movs	r1, #0
 80025c2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	0010      	movs	r0, r2
 80025d4:	4798      	blx	r3
    }
   }
}  
 80025d6:	e7ff      	b.n	80025d8 <HAL_DMA_IRQHandler+0x13c>
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bd80      	pop	{r7, pc}

080025e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	2101      	movs	r1, #1
 80025f8:	4091      	lsls	r1, r2
 80025fa:	000a      	movs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b10      	cmp	r3, #16
 800260c:	d108      	bne.n	8002620 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800261e:	e007      	b.n	8002630 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	60da      	str	r2, [r3, #12]
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b004      	add	sp, #16
 8002636:	bd80      	pop	{r7, pc}

08002638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	001a      	movs	r2, r3
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <DMA_CalcBaseAndBitshift+0x60>)
 8002648:	429a      	cmp	r2, r3
 800264a:	d810      	bhi.n	800266e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a12      	ldr	r2, [pc, #72]	; (800269c <DMA_CalcBaseAndBitshift+0x64>)
 8002652:	4694      	mov	ip, r2
 8002654:	4463      	add	r3, ip
 8002656:	2114      	movs	r1, #20
 8002658:	0018      	movs	r0, r3
 800265a:	f7fd fd55 	bl	8000108 <__udivsi3>
 800265e:	0003      	movs	r3, r0
 8002660:	009a      	lsls	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <DMA_CalcBaseAndBitshift+0x68>)
 800266a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800266c:	e00f      	b.n	800268e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002674:	4694      	mov	ip, r2
 8002676:	4463      	add	r3, ip
 8002678:	2114      	movs	r1, #20
 800267a:	0018      	movs	r0, r3
 800267c:	f7fd fd44 	bl	8000108 <__udivsi3>
 8002680:	0003      	movs	r3, r0
 8002682:	009a      	lsls	r2, r3, #2
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <DMA_CalcBaseAndBitshift+0x70>)
 800268c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b002      	add	sp, #8
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	40020407 	.word	0x40020407
 800269c:	bffdfff8 	.word	0xbffdfff8
 80026a0:	40020000 	.word	0x40020000
 80026a4:	bffdfbf8 	.word	0xbffdfbf8
 80026a8:	40020400 	.word	0x40020400

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ba:	e155      	b.n	8002968 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2101      	movs	r1, #1
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4091      	lsls	r1, r2
 80026c6:	000a      	movs	r2, r1
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d100      	bne.n	80026d4 <HAL_GPIO_Init+0x28>
 80026d2:	e146      	b.n	8002962 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2203      	movs	r2, #3
 80026da:	4013      	ands	r3, r2
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d005      	beq.n	80026ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d130      	bne.n	800274e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	409a      	lsls	r2, r3
 80026fa:	0013      	movs	r3, r2
 80026fc:	43da      	mvns	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	409a      	lsls	r2, r3
 800270e:	0013      	movs	r3, r2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002722:	2201      	movs	r2, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	43da      	mvns	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	2201      	movs	r2, #1
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
 8002740:	0013      	movs	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2203      	movs	r2, #3
 8002754:	4013      	ands	r3, r2
 8002756:	2b03      	cmp	r3, #3
 8002758:	d017      	beq.n	800278a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	409a      	lsls	r2, r3
 8002768:	0013      	movs	r3, r2
 800276a:	43da      	mvns	r2, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	409a      	lsls	r2, r3
 800277c:	0013      	movs	r3, r2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	4013      	ands	r3, r2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d123      	bne.n	80027de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	58d3      	ldr	r3, [r2, r3]
 80027a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2207      	movs	r2, #7
 80027a8:	4013      	ands	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	220f      	movs	r2, #15
 80027ae:	409a      	lsls	r2, r3
 80027b0:	0013      	movs	r3, r2
 80027b2:	43da      	mvns	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2107      	movs	r1, #7
 80027c2:	400b      	ands	r3, r1
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	409a      	lsls	r2, r3
 80027c8:	0013      	movs	r3, r2
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	6939      	ldr	r1, [r7, #16]
 80027dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	409a      	lsls	r2, r3
 80027ec:	0013      	movs	r3, r2
 80027ee:	43da      	mvns	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2203      	movs	r2, #3
 80027fc:	401a      	ands	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	409a      	lsls	r2, r3
 8002804:	0013      	movs	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	23c0      	movs	r3, #192	; 0xc0
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	4013      	ands	r3, r2
 800281c:	d100      	bne.n	8002820 <HAL_GPIO_Init+0x174>
 800281e:	e0a0      	b.n	8002962 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002820:	4b57      	ldr	r3, [pc, #348]	; (8002980 <HAL_GPIO_Init+0x2d4>)
 8002822:	699a      	ldr	r2, [r3, #24]
 8002824:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_GPIO_Init+0x2d4>)
 8002826:	2101      	movs	r1, #1
 8002828:	430a      	orrs	r2, r1
 800282a:	619a      	str	r2, [r3, #24]
 800282c:	4b54      	ldr	r3, [pc, #336]	; (8002980 <HAL_GPIO_Init+0x2d4>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_GPIO_Init+0x2d8>)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	589b      	ldr	r3, [r3, r2]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2203      	movs	r2, #3
 800284a:	4013      	ands	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	409a      	lsls	r2, r3
 8002852:	0013      	movs	r3, r2
 8002854:	43da      	mvns	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	2390      	movs	r3, #144	; 0x90
 8002860:	05db      	lsls	r3, r3, #23
 8002862:	429a      	cmp	r2, r3
 8002864:	d019      	beq.n	800289a <HAL_GPIO_Init+0x1ee>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a47      	ldr	r2, [pc, #284]	; (8002988 <HAL_GPIO_Init+0x2dc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_GPIO_Init+0x1ea>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a46      	ldr	r2, [pc, #280]	; (800298c <HAL_GPIO_Init+0x2e0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00d      	beq.n	8002892 <HAL_GPIO_Init+0x1e6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a45      	ldr	r2, [pc, #276]	; (8002990 <HAL_GPIO_Init+0x2e4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <HAL_GPIO_Init+0x1e2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a44      	ldr	r2, [pc, #272]	; (8002994 <HAL_GPIO_Init+0x2e8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_GPIO_Init+0x1de>
 8002886:	2304      	movs	r3, #4
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x1f0>
 800288a:	2305      	movs	r3, #5
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x1f0>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x1f0>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x1f0>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x1f0>
 800289a:	2300      	movs	r3, #0
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	2103      	movs	r1, #3
 80028a0:	400a      	ands	r2, r1
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028ac:	4935      	ldr	r1, [pc, #212]	; (8002984 <HAL_GPIO_Init+0x2d8>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ba:	4b37      	ldr	r3, [pc, #220]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43da      	mvns	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	025b      	lsls	r3, r3, #9
 80028d2:	4013      	ands	r3, r2
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028de:	4b2e      	ldr	r3, [pc, #184]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80028e4:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43da      	mvns	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	4013      	ands	r3, r2
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43da      	mvns	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	035b      	lsls	r3, r3, #13
 8002926:	4013      	ands	r3, r2
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002932:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	43da      	mvns	r2, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	039b      	lsls	r3, r3, #14
 8002950:	4013      	ands	r3, r2
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	40da      	lsrs	r2, r3
 8002970:	1e13      	subs	r3, r2, #0
 8002972:	d000      	beq.n	8002976 <HAL_GPIO_Init+0x2ca>
 8002974:	e6a2      	b.n	80026bc <HAL_GPIO_Init+0x10>
  } 
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b006      	add	sp, #24
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	48000400 	.word	0x48000400
 800298c:	48000800 	.word	0x48000800
 8002990:	48000c00 	.word	0x48000c00
 8002994:	48001000 	.word	0x48001000
 8002998:	40010400 	.word	0x40010400

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	0008      	movs	r0, r1
 80029a6:	0011      	movs	r1, r2
 80029a8:	1cbb      	adds	r3, r7, #2
 80029aa:	1c02      	adds	r2, r0, #0
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	1c7b      	adds	r3, r7, #1
 80029b0:	1c0a      	adds	r2, r1, #0
 80029b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b4:	1c7b      	adds	r3, r7, #1
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029bc:	1cbb      	adds	r3, r7, #2
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c4:	e003      	b.n	80029ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029c6:	1cbb      	adds	r3, r7, #2
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b002      	add	sp, #8
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f000 fb76 	bl	80030d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	d100      	bne.n	80029f8 <HAL_RCC_OscConfig+0x20>
 80029f6:	e08e      	b.n	8002b16 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029f8:	4bc5      	ldr	r3, [pc, #788]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	220c      	movs	r2, #12
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00e      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a04:	4bc2      	ldr	r3, [pc, #776]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	220c      	movs	r2, #12
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d117      	bne.n	8002a40 <HAL_RCC_OscConfig+0x68>
 8002a10:	4bbf      	ldr	r3, [pc, #764]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	23c0      	movs	r3, #192	; 0xc0
 8002a16:	025b      	lsls	r3, r3, #9
 8002a18:	401a      	ands	r2, r3
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	025b      	lsls	r3, r3, #9
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d10e      	bne.n	8002a40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a22:	4bbb      	ldr	r3, [pc, #748]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	029b      	lsls	r3, r3, #10
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d100      	bne.n	8002a30 <HAL_RCC_OscConfig+0x58>
 8002a2e:	e071      	b.n	8002b14 <HAL_RCC_OscConfig+0x13c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d000      	beq.n	8002a3a <HAL_RCC_OscConfig+0x62>
 8002a38:	e06c      	b.n	8002b14 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f000 fb4c 	bl	80030d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x80>
 8002a48:	4bb1      	ldr	r3, [pc, #708]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4bb0      	ldr	r3, [pc, #704]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	0249      	lsls	r1, r1, #9
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e02f      	b.n	8002ab8 <HAL_RCC_OscConfig+0xe0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10c      	bne.n	8002a7a <HAL_RCC_OscConfig+0xa2>
 8002a60:	4bab      	ldr	r3, [pc, #684]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4baa      	ldr	r3, [pc, #680]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a66:	49ab      	ldr	r1, [pc, #684]	; (8002d14 <HAL_RCC_OscConfig+0x33c>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	4ba8      	ldr	r3, [pc, #672]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4ba7      	ldr	r3, [pc, #668]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a72:	49a9      	ldr	r1, [pc, #676]	; (8002d18 <HAL_RCC_OscConfig+0x340>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e01e      	b.n	8002ab8 <HAL_RCC_OscConfig+0xe0>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d10e      	bne.n	8002aa0 <HAL_RCC_OscConfig+0xc8>
 8002a82:	4ba3      	ldr	r3, [pc, #652]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4ba2      	ldr	r3, [pc, #648]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	02c9      	lsls	r1, r1, #11
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	4b9f      	ldr	r3, [pc, #636]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b9e      	ldr	r3, [pc, #632]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	0249      	lsls	r1, r1, #9
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0xe0>
 8002aa0:	4b9b      	ldr	r3, [pc, #620]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b9a      	ldr	r3, [pc, #616]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002aa6:	499b      	ldr	r1, [pc, #620]	; (8002d14 <HAL_RCC_OscConfig+0x33c>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	4b98      	ldr	r3, [pc, #608]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b97      	ldr	r3, [pc, #604]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002ab2:	4999      	ldr	r1, [pc, #612]	; (8002d18 <HAL_RCC_OscConfig+0x340>)
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d014      	beq.n	8002aea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe ff42 	bl	8001948 <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aca:	f7fe ff3d 	bl	8001948 <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b64      	cmp	r3, #100	; 0x64
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e2fd      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002adc:	4b8c      	ldr	r3, [pc, #560]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	029b      	lsls	r3, r3, #10
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0xf2>
 8002ae8:	e015      	b.n	8002b16 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe ff2d 	bl	8001948 <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe ff28 	bl	8001948 <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e2e8      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	4b82      	ldr	r3, [pc, #520]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	029b      	lsls	r3, r3, #10
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x11c>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <HAL_RCC_OscConfig+0x14a>
 8002b20:	e06c      	b.n	8002bfc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b22:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	220c      	movs	r2, #12
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d00e      	beq.n	8002b4a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b2c:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	220c      	movs	r2, #12
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d11f      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1a0>
 8002b38:	4b75      	ldr	r3, [pc, #468]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	23c0      	movs	r3, #192	; 0xc0
 8002b3e:	025b      	lsls	r3, r3, #9
 8002b40:	401a      	ands	r2, r3
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	4b71      	ldr	r3, [pc, #452]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4013      	ands	r3, r2
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_OscConfig+0x188>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e2bb      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	22f8      	movs	r2, #248	; 0xf8
 8002b66:	4393      	bics	r3, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00da      	lsls	r2, r3, #3
 8002b70:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	e041      	b.n	8002bfc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d024      	beq.n	8002bca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002b86:	2101      	movs	r1, #1
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fedc 	bl	8001948 <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe fed7 	bl	8001948 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e297      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2202      	movs	r2, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d0f1      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	22f8      	movs	r2, #248	; 0xf8
 8002bb8:	4393      	bics	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	00da      	lsls	r2, r3, #3
 8002bc2:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bca:	4b51      	ldr	r3, [pc, #324]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	438a      	bics	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7fe feb7 	bl	8001948 <HAL_GetTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be0:	f7fe feb2 	bl	8001948 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e272      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d1f1      	bne.n	8002be0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2208      	movs	r2, #8
 8002c02:	4013      	ands	r3, r2
 8002c04:	d036      	beq.n	8002c74 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d019      	beq.n	8002c42 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0e:	4b40      	ldr	r3, [pc, #256]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c12:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002c14:	2101      	movs	r1, #1
 8002c16:	430a      	orrs	r2, r1
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fe95 	bl	8001948 <HAL_GetTick>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c24:	f7fe fe90 	bl	8001948 <HAL_GetTick>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e250      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d0f1      	beq.n	8002c24 <HAL_RCC_OscConfig+0x24c>
 8002c40:	e018      	b.n	8002c74 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c46:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002c48:	2101      	movs	r1, #1
 8002c4a:	438a      	bics	r2, r1
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fe7b 	bl	8001948 <HAL_GetTick>
 8002c52:	0003      	movs	r3, r0
 8002c54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c58:	f7fe fe76 	bl	8001948 <HAL_GetTick>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e236      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6a:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2202      	movs	r2, #2
 8002c70:	4013      	ands	r3, r2
 8002c72:	d1f1      	bne.n	8002c58 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d100      	bne.n	8002c80 <HAL_RCC_OscConfig+0x2a8>
 8002c7e:	e0b5      	b.n	8002dec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c80:	201f      	movs	r0, #31
 8002c82:	183b      	adds	r3, r7, r0
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	4013      	ands	r3, r2
 8002c92:	d110      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	0549      	lsls	r1, r1, #21
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	61da      	str	r2, [r3, #28]
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	055b      	lsls	r3, r3, #21
 8002caa:	4013      	ands	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cb0:	183b      	adds	r3, r7, r0
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCC_OscConfig+0x344>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d11a      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_RCC_OscConfig+0x344>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_RCC_OscConfig+0x344>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	0049      	lsls	r1, r1, #1
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fe3a 	bl	8001948 <HAL_GetTick>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cda:	f7fe fe35 	bl	8001948 <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b64      	cmp	r3, #100	; 0x64
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1f5      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x344>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10f      	bne.n	8002d20 <HAL_RCC_OscConfig+0x348>
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <HAL_RCC_OscConfig+0x338>)
 8002d06:	2101      	movs	r1, #1
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	621a      	str	r2, [r3, #32]
 8002d0c:	e036      	b.n	8002d7c <HAL_RCC_OscConfig+0x3a4>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40021000 	.word	0x40021000
 8002d14:	fffeffff 	.word	0xfffeffff
 8002d18:	fffbffff 	.word	0xfffbffff
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10c      	bne.n	8002d42 <HAL_RCC_OscConfig+0x36a>
 8002d28:	4bca      	ldr	r3, [pc, #808]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	4bc9      	ldr	r3, [pc, #804]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	438a      	bics	r2, r1
 8002d32:	621a      	str	r2, [r3, #32]
 8002d34:	4bc7      	ldr	r3, [pc, #796]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	4bc6      	ldr	r3, [pc, #792]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	621a      	str	r2, [r3, #32]
 8002d40:	e01c      	b.n	8002d7c <HAL_RCC_OscConfig+0x3a4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b05      	cmp	r3, #5
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x38c>
 8002d4a:	4bc2      	ldr	r3, [pc, #776]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d4c:	6a1a      	ldr	r2, [r3, #32]
 8002d4e:	4bc1      	ldr	r3, [pc, #772]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d50:	2104      	movs	r1, #4
 8002d52:	430a      	orrs	r2, r1
 8002d54:	621a      	str	r2, [r3, #32]
 8002d56:	4bbf      	ldr	r3, [pc, #764]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d58:	6a1a      	ldr	r2, [r3, #32]
 8002d5a:	4bbe      	ldr	r3, [pc, #760]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	621a      	str	r2, [r3, #32]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0x3a4>
 8002d64:	4bbb      	ldr	r3, [pc, #748]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	4bba      	ldr	r3, [pc, #744]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	621a      	str	r2, [r3, #32]
 8002d70:	4bb8      	ldr	r3, [pc, #736]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	4bb7      	ldr	r3, [pc, #732]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002d76:	2104      	movs	r1, #4
 8002d78:	438a      	bics	r2, r1
 8002d7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d014      	beq.n	8002dae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d84:	f7fe fde0 	bl	8001948 <HAL_GetTick>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e009      	b.n	8002da2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe fddb 	bl	8001948 <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	4aaf      	ldr	r2, [pc, #700]	; (8003058 <HAL_RCC_OscConfig+0x680>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e19a      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da2:	4bac      	ldr	r3, [pc, #688]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	2202      	movs	r2, #2
 8002da8:	4013      	ands	r3, r2
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x3b6>
 8002dac:	e013      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7fe fdcb 	bl	8001948 <HAL_GetTick>
 8002db2:	0003      	movs	r3, r0
 8002db4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db6:	e009      	b.n	8002dcc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7fe fdc6 	bl	8001948 <HAL_GetTick>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	4aa5      	ldr	r2, [pc, #660]	; (8003058 <HAL_RCC_OscConfig+0x680>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e185      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	4ba1      	ldr	r3, [pc, #644]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dd6:	231f      	movs	r3, #31
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de0:	4b9c      	ldr	r3, [pc, #624]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	4b9b      	ldr	r3, [pc, #620]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002de6:	499d      	ldr	r1, [pc, #628]	; (800305c <HAL_RCC_OscConfig+0x684>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2210      	movs	r2, #16
 8002df2:	4013      	ands	r3, r2
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d12a      	bne.n	8002e54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002dfe:	4b95      	ldr	r3, [pc, #596]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e02:	4b94      	ldr	r3, [pc, #592]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e04:	2104      	movs	r1, #4
 8002e06:	430a      	orrs	r2, r1
 8002e08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e0a:	4b92      	ldr	r3, [pc, #584]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0e:	4b91      	ldr	r3, [pc, #580]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fd97 	bl	8001948 <HAL_GetTick>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e20:	f7fe fd92 	bl	8001948 <HAL_GetTick>
 8002e24:	0002      	movs	r2, r0
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e152      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e32:	4b88      	ldr	r3, [pc, #544]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e36:	2202      	movs	r2, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d0f1      	beq.n	8002e20 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e3c:	4b85      	ldr	r3, [pc, #532]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	22f8      	movs	r2, #248	; 0xf8
 8002e42:	4393      	bics	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	00da      	lsls	r2, r3, #3
 8002e4c:	4b81      	ldr	r3, [pc, #516]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	635a      	str	r2, [r3, #52]	; 0x34
 8002e52:	e034      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	3305      	adds	r3, #5
 8002e5a:	d111      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e5c:	4b7d      	ldr	r3, [pc, #500]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e60:	4b7c      	ldr	r3, [pc, #496]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e62:	2104      	movs	r1, #4
 8002e64:	438a      	bics	r2, r1
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e68:	4b7a      	ldr	r3, [pc, #488]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6c:	22f8      	movs	r2, #248	; 0xf8
 8002e6e:	4393      	bics	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	00da      	lsls	r2, r3, #3
 8002e78:	4b76      	ldr	r3, [pc, #472]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e7e:	e01e      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e80:	4b74      	ldr	r3, [pc, #464]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e84:	4b73      	ldr	r3, [pc, #460]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e86:	2104      	movs	r1, #4
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e8c:	4b71      	ldr	r3, [pc, #452]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e90:	4b70      	ldr	r3, [pc, #448]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	438a      	bics	r2, r1
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fe fd56 	bl	8001948 <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ea2:	f7fe fd51 	bl	8001948 <HAL_GetTick>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e111      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002eb4:	4b67      	ldr	r3, [pc, #412]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb8:	2202      	movs	r2, #2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d1f1      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d05c      	beq.n	8002f82 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ec8:	4b62      	ldr	r3, [pc, #392]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	220c      	movs	r2, #12
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ed4:	4b5f      	ldr	r3, [pc, #380]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	220c      	movs	r2, #12
 8002eda:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d114      	bne.n	8002f0a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ee0:	4b5c      	ldr	r3, [pc, #368]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	23c0      	movs	r3, #192	; 0xc0
 8002ee6:	025b      	lsls	r3, r3, #9
 8002ee8:	401a      	ands	r2, r3
 8002eea:	23c0      	movs	r3, #192	; 0xc0
 8002eec:	025b      	lsls	r3, r3, #9
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ef2:	4b58      	ldr	r3, [pc, #352]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	025b      	lsls	r3, r3, #9
 8002efa:	4013      	ands	r3, r2
 8002efc:	d040      	beq.n	8002f80 <HAL_RCC_OscConfig+0x5a8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d03c      	beq.n	8002f80 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0e6      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01b      	beq.n	8002f4a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f12:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f16:	4b4f      	ldr	r3, [pc, #316]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	0249      	lsls	r1, r1, #9
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fd12 	bl	8001948 <HAL_GetTick>
 8002f24:	0003      	movs	r3, r0
 8002f26:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f2a:	f7fe fd0d 	bl	8001948 <HAL_GetTick>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0cd      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f3c:	4b45      	ldr	r3, [pc, #276]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	025b      	lsls	r3, r3, #9
 8002f44:	4013      	ands	r3, r2
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x552>
 8002f48:	e01b      	b.n	8002f82 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f4a:	4b42      	ldr	r3, [pc, #264]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f4e:	4b41      	ldr	r3, [pc, #260]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002f50:	4943      	ldr	r1, [pc, #268]	; (8003060 <HAL_RCC_OscConfig+0x688>)
 8002f52:	400a      	ands	r2, r1
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe fcf7 	bl	8001948 <HAL_GetTick>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f60:	f7fe fcf2 	bl	8001948 <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0b2      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	025b      	lsls	r3, r3, #9
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x588>
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f80:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d100      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5b4>
 8002f8a:	e0a4      	b.n	80030d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	220c      	movs	r2, #12
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d100      	bne.n	8002f9a <HAL_RCC_OscConfig+0x5c2>
 8002f98:	e078      	b.n	800308c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d14c      	bne.n	800303c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002fa8:	492e      	ldr	r1, [pc, #184]	; (8003064 <HAL_RCC_OscConfig+0x68c>)
 8002faa:	400a      	ands	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fe fccb 	bl	8001948 <HAL_GetTick>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe fcc6 	bl	8001948 <HAL_GetTick>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e086      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	049b      	lsls	r3, r3, #18
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	220f      	movs	r2, #15
 8002fdc:	4393      	bics	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_RCC_OscConfig+0x690>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	0449      	lsls	r1, r1, #17
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe fc99 	bl	8001948 <HAL_GetTick>
 8003016:	0003      	movs	r3, r0
 8003018:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fc94 	bl	8001948 <HAL_GetTick>
 8003020:	0002      	movs	r2, r0
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e054      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	049b      	lsls	r3, r3, #18
 8003036:	4013      	ands	r3, r2
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x644>
 800303a:	e04c      	b.n	80030d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <HAL_RCC_OscConfig+0x67c>)
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <HAL_RCC_OscConfig+0x68c>)
 8003044:	400a      	ands	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fe fc7e 	bl	8001948 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003050:	e015      	b.n	800307e <HAL_RCC_OscConfig+0x6a6>
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	40021000 	.word	0x40021000
 8003058:	00001388 	.word	0x00001388
 800305c:	efffffff 	.word	0xefffffff
 8003060:	fffeffff 	.word	0xfffeffff
 8003064:	feffffff 	.word	0xfeffffff
 8003068:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fc6c 	bl	8001948 <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e02c      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_RCC_OscConfig+0x708>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	049b      	lsls	r3, r3, #18
 8003086:	4013      	ands	r3, r2
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x694>
 800308a:	e024      	b.n	80030d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01f      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_RCC_OscConfig+0x708>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_RCC_OscConfig+0x708>)
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	23c0      	movs	r3, #192	; 0xc0
 80030a8:	025b      	lsls	r3, r3, #9
 80030aa:	401a      	ands	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d10e      	bne.n	80030d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	220f      	movs	r2, #15
 80030b8:	401a      	ands	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	23f0      	movs	r3, #240	; 0xf0
 80030c6:	039b      	lsls	r3, r3, #14
 80030c8:	401a      	ands	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b008      	add	sp, #32
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000

080030e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0bf      	b.n	8003278 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b61      	ldr	r3, [pc, #388]	; (8003280 <HAL_RCC_ClockConfig+0x19c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2201      	movs	r2, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d911      	bls.n	800312a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCC_ClockConfig+0x19c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	4393      	bics	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_RCC_ClockConfig+0x19c>)
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_ClockConfig+0x19c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d001      	beq.n	800312a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0a6      	b.n	8003278 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2202      	movs	r2, #2
 8003130:	4013      	ands	r3, r2
 8003132:	d015      	beq.n	8003160 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2204      	movs	r2, #4
 800313a:	4013      	ands	r3, r2
 800313c:	d006      	beq.n	800314c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800313e:	4b51      	ldr	r3, [pc, #324]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 8003144:	21e0      	movs	r1, #224	; 0xe0
 8003146:	00c9      	lsls	r1, r1, #3
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	22f0      	movs	r2, #240	; 0xf0
 8003152:	4393      	bics	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2201      	movs	r2, #1
 8003166:	4013      	ands	r3, r2
 8003168:	d04c      	beq.n	8003204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b44      	ldr	r3, [pc, #272]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	029b      	lsls	r3, r3, #10
 800317a:	4013      	ands	r3, r2
 800317c:	d120      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e07a      	b.n	8003278 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b3e      	ldr	r3, [pc, #248]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	049b      	lsls	r3, r3, #18
 8003192:	4013      	ands	r3, r2
 8003194:	d114      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06e      	b.n	8003278 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80031a2:	4b38      	ldr	r3, [pc, #224]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 80031a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	025b      	lsls	r3, r3, #9
 80031aa:	4013      	ands	r3, r2
 80031ac:	d108      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e062      	b.n	8003278 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b2:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2202      	movs	r2, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e05b      	b.n	8003278 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c0:	4b30      	ldr	r3, [pc, #192]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2203      	movs	r2, #3
 80031c6:	4393      	bics	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d4:	f7fe fbb8 	bl	8001948 <HAL_GetTick>
 80031d8:	0003      	movs	r3, r0
 80031da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031dc:	e009      	b.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031de:	f7fe fbb3 	bl	8001948 <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	4a27      	ldr	r2, [pc, #156]	; (8003288 <HAL_RCC_ClockConfig+0x1a4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e042      	b.n	8003278 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	220c      	movs	r2, #12
 80031f8:	401a      	ands	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1ec      	bne.n	80031de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_RCC_ClockConfig+0x19c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2201      	movs	r2, #1
 800320a:	4013      	ands	r3, r2
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d211      	bcs.n	8003236 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_ClockConfig+0x19c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2201      	movs	r2, #1
 8003218:	4393      	bics	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	4b18      	ldr	r3, [pc, #96]	; (8003280 <HAL_RCC_ClockConfig+0x19c>)
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_RCC_ClockConfig+0x19c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2201      	movs	r2, #1
 800322a:	4013      	ands	r3, r2
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d001      	beq.n	8003236 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e020      	b.n	8003278 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2204      	movs	r2, #4
 800323c:	4013      	ands	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a11      	ldr	r2, [pc, #68]	; (800328c <HAL_RCC_ClockConfig+0x1a8>)
 8003246:	4013      	ands	r3, r2
 8003248:	0019      	movs	r1, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003254:	f000 f820 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003258:	0001      	movs	r1, r0
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_RCC_ClockConfig+0x1a0>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	220f      	movs	r2, #15
 8003262:	4013      	ands	r3, r2
 8003264:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x1ac>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	000a      	movs	r2, r1
 800326a:	40da      	lsrs	r2, r3
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1b0>)
 800326e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003270:	2003      	movs	r0, #3
 8003272:	f7fe fb23 	bl	80018bc <HAL_InitTick>
  
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b004      	add	sp, #16
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40022000 	.word	0x40022000
 8003284:	40021000 	.word	0x40021000
 8003288:	00001388 	.word	0x00001388
 800328c:	fffff8ff 	.word	0xfffff8ff
 8003290:	080078ec 	.word	0x080078ec
 8003294:	20001c08 	.word	0x20001c08

08003298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b08f      	sub	sp, #60	; 0x3c
 800329c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800329e:	2314      	movs	r3, #20
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_RCC_GetSysClockFreq+0xec>)
 80032a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032a6:	c313      	stmia	r3!, {r0, r1, r4}
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80032ac:	1d3b      	adds	r3, r7, #4
 80032ae:	4a36      	ldr	r2, [pc, #216]	; (8003388 <HAL_RCC_GetSysClockFreq+0xf0>)
 80032b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032b2:	c313      	stmia	r3!, {r0, r1, r4}
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032bc:	2300      	movs	r3, #0
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c0:	2300      	movs	r3, #0
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80032cc:	4b2f      	ldr	r3, [pc, #188]	; (800338c <HAL_RCC_GetSysClockFreq+0xf4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	220c      	movs	r2, #12
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d047      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0xd4>
 80032dc:	d849      	bhi.n	8003372 <HAL_RCC_GetSysClockFreq+0xda>
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d002      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x50>
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x56>
 80032e6:	e044      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032ec:	e044      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	0c9b      	lsrs	r3, r3, #18
 80032f2:	220f      	movs	r2, #15
 80032f4:	4013      	ands	r3, r2
 80032f6:	2214      	movs	r2, #20
 80032f8:	18ba      	adds	r2, r7, r2
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032fe:	4b23      	ldr	r3, [pc, #140]	; (800338c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	220f      	movs	r2, #15
 8003304:	4013      	ands	r3, r2
 8003306:	1d3a      	adds	r2, r7, #4
 8003308:	5cd3      	ldrb	r3, [r2, r3]
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800330c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800330e:	23c0      	movs	r3, #192	; 0xc0
 8003310:	025b      	lsls	r3, r3, #9
 8003312:	401a      	ands	r2, r3
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	429a      	cmp	r2, r3
 800331a:	d109      	bne.n	8003330 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800331c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800331e:	481c      	ldr	r0, [pc, #112]	; (8003390 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003320:	f7fc fef2 	bl	8000108 <__udivsi3>
 8003324:	0003      	movs	r3, r0
 8003326:	001a      	movs	r2, r3
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	4353      	muls	r3, r2
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
 800332e:	e01a      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003332:	23c0      	movs	r3, #192	; 0xc0
 8003334:	025b      	lsls	r3, r3, #9
 8003336:	401a      	ands	r2, r3
 8003338:	23c0      	movs	r3, #192	; 0xc0
 800333a:	025b      	lsls	r3, r3, #9
 800333c:	429a      	cmp	r2, r3
 800333e:	d109      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003342:	4814      	ldr	r0, [pc, #80]	; (8003394 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003344:	f7fc fee0 	bl	8000108 <__udivsi3>
 8003348:	0003      	movs	r3, r0
 800334a:	001a      	movs	r2, r3
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	4353      	muls	r3, r2
 8003350:	637b      	str	r3, [r7, #52]	; 0x34
 8003352:	e008      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003356:	480e      	ldr	r0, [pc, #56]	; (8003390 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003358:	f7fc fed6 	bl	8000108 <__udivsi3>
 800335c:	0003      	movs	r3, r0
 800335e:	001a      	movs	r2, r3
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	4353      	muls	r3, r2
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003368:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800336a:	e005      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_GetSysClockFreq+0xfc>)
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003370:	e002      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003374:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003376:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b00f      	add	sp, #60	; 0x3c
 8003380:	bd90      	pop	{r4, r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	08007848 	.word	0x08007848
 8003388:	08007858 	.word	0x08007858
 800338c:	40021000 	.word	0x40021000
 8003390:	007a1200 	.word	0x007a1200
 8003394:	02dc6c00 	.word	0x02dc6c00

08003398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800339c:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	20001c08 	.word	0x20001c08

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80033b0:	f7ff fff2 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 80033b4:	0001      	movs	r1, r0
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	2207      	movs	r2, #7
 80033be:	4013      	ands	r3, r2
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	40d9      	lsrs	r1, r3
 80033c6:	000b      	movs	r3, r1
}    
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	40021000 	.word	0x40021000
 80033d4:	080078fc 	.word	0x080078fc

080033d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	025b      	lsls	r3, r3, #9
 80033f0:	4013      	ands	r3, r2
 80033f2:	d100      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80033f4:	e08e      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80033f6:	2017      	movs	r0, #23
 80033f8:	183b      	adds	r3, r7, r0
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fe:	4b6e      	ldr	r3, [pc, #440]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	055b      	lsls	r3, r3, #21
 8003406:	4013      	ands	r3, r2
 8003408:	d110      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b6b      	ldr	r3, [pc, #428]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	4b6a      	ldr	r3, [pc, #424]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003410:	2180      	movs	r1, #128	; 0x80
 8003412:	0549      	lsls	r1, r1, #21
 8003414:	430a      	orrs	r2, r1
 8003416:	61da      	str	r2, [r3, #28]
 8003418:	4b67      	ldr	r3, [pc, #412]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	055b      	lsls	r3, r3, #21
 8003420:	4013      	ands	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003426:	183b      	adds	r3, r7, r0
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4013      	ands	r3, r2
 8003436:	d11a      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003438:	4b60      	ldr	r3, [pc, #384]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	0049      	lsls	r1, r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003446:	f7fe fa7f 	bl	8001948 <HAL_GetTick>
 800344a:	0003      	movs	r3, r0
 800344c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	e008      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003450:	f7fe fa7a 	bl	8001948 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e0a6      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4013      	ands	r3, r2
 800346c:	d0f0      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800346e:	4b52      	ldr	r3, [pc, #328]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003470:	6a1a      	ldr	r2, [r3, #32]
 8003472:	23c0      	movs	r3, #192	; 0xc0
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4013      	ands	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d034      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	23c0      	movs	r3, #192	; 0xc0
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4013      	ands	r3, r2
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	429a      	cmp	r2, r3
 800348e:	d02c      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003490:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4a4a      	ldr	r2, [pc, #296]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003496:	4013      	ands	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800349c:	6a1a      	ldr	r2, [r3, #32]
 800349e:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	0249      	lsls	r1, r1, #9
 80034a4:	430a      	orrs	r2, r1
 80034a6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034a8:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034aa:	6a1a      	ldr	r2, [r3, #32]
 80034ac:	4b42      	ldr	r3, [pc, #264]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034ae:	4945      	ldr	r1, [pc, #276]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034b4:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	4013      	ands	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fa41 	bl	8001948 <HAL_GetTick>
 80034c6:	0003      	movs	r3, r0
 80034c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ca:	e009      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fe fa3c 	bl	8001948 <HAL_GetTick>
 80034d0:	0002      	movs	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e067      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	2202      	movs	r2, #2
 80034e6:	4013      	ands	r3, r2
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ea:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4a34      	ldr	r2, [pc, #208]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034fe:	2317      	movs	r3, #23
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d105      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800350e:	492f      	ldr	r1, [pc, #188]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003510:	400a      	ands	r2, r1
 8003512:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2201      	movs	r2, #1
 800351a:	4013      	ands	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800351e:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	2203      	movs	r2, #3
 8003524:	4393      	bics	r3, r2
 8003526:	0019      	movs	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800352e:	430a      	orrs	r2, r1
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2202      	movs	r2, #2
 8003538:	4013      	ands	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800353c:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003542:	4013      	ands	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800354c:	430a      	orrs	r2, r1
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	02db      	lsls	r3, r3, #11
 8003558:	4013      	ands	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800356c:	430a      	orrs	r2, r1
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2220      	movs	r2, #32
 8003576:	4013      	ands	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800357a:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	2210      	movs	r2, #16
 8003580:	4393      	bics	r3, r2
 8003582:	0019      	movs	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800358a:	430a      	orrs	r2, r1
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4013      	ands	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	2240      	movs	r2, #64	; 0x40
 80035a0:	4393      	bics	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035aa:	430a      	orrs	r2, r1
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b006      	add	sp, #24
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40007000 	.word	0x40007000
 80035c0:	fffffcff 	.word	0xfffffcff
 80035c4:	fffeffff 	.word	0xfffeffff
 80035c8:	00001388 	.word	0x00001388
 80035cc:	efffffff 	.word	0xefffffff
 80035d0:	fffcffff 	.word	0xfffcffff
 80035d4:	fff3ffff 	.word	0xfff3ffff

080035d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0a8      	b.n	800373c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	2382      	movs	r3, #130	; 0x82
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d009      	beq.n	8003612 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	61da      	str	r2, [r3, #28]
 8003604:	e005      	b.n	8003612 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	225d      	movs	r2, #93	; 0x5d
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	225c      	movs	r2, #92	; 0x5c
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	0018      	movs	r0, r3
 8003630:	f7fd ff9a 	bl	8001568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	225d      	movs	r2, #93	; 0x5d
 8003638:	2102      	movs	r1, #2
 800363a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2140      	movs	r1, #64	; 0x40
 8003648:	438a      	bics	r2, r1
 800364a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	23e0      	movs	r3, #224	; 0xe0
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	429a      	cmp	r2, r3
 8003656:	d902      	bls.n	800365e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e002      	b.n	8003664 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	015b      	lsls	r3, r3, #5
 8003662:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	23f0      	movs	r3, #240	; 0xf0
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	429a      	cmp	r2, r3
 800366e:	d008      	beq.n	8003682 <HAL_SPI_Init+0xaa>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	23e0      	movs	r3, #224	; 0xe0
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	429a      	cmp	r2, r3
 800367a:	d002      	beq.n	8003682 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	2382      	movs	r3, #130	; 0x82
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	401a      	ands	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	2384      	movs	r3, #132	; 0x84
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	400b      	ands	r3, r1
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2102      	movs	r1, #2
 800369e:	400b      	ands	r3, r1
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	2101      	movs	r1, #1
 80036a8:	400b      	ands	r3, r1
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6999      	ldr	r1, [r3, #24]
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	400b      	ands	r3, r1
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	2138      	movs	r1, #56	; 0x38
 80036be:	400b      	ands	r3, r1
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	2180      	movs	r1, #128	; 0x80
 80036c8:	400b      	ands	r3, r1
 80036ca:	431a      	orrs	r2, r3
 80036cc:	0011      	movs	r1, r2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	401a      	ands	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	2204      	movs	r2, #4
 80036e8:	401a      	ands	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2110      	movs	r1, #16
 80036f0:	400b      	ands	r3, r1
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	2108      	movs	r1, #8
 80036fa:	400b      	ands	r3, r1
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68d9      	ldr	r1, [r3, #12]
 8003702:	23f0      	movs	r3, #240	; 0xf0
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	400b      	ands	r3, r1
 8003708:	431a      	orrs	r2, r3
 800370a:	0011      	movs	r1, r2
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	015b      	lsls	r3, r3, #5
 8003712:	401a      	ands	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4907      	ldr	r1, [pc, #28]	; (8003744 <HAL_SPI_Init+0x16c>)
 8003728:	400a      	ands	r2, r1
 800372a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	225d      	movs	r2, #93	; 0x5d
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b004      	add	sp, #16
 8003742:	bd80      	pop	{r7, pc}
 8003744:	fffff7ff 	.word	0xfffff7ff

08003748 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	1dbb      	adds	r3, r7, #6
 8003756:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003758:	231f      	movs	r3, #31
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	225c      	movs	r2, #92	; 0x5c
 8003764:	5c9b      	ldrb	r3, [r3, r2]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_SPI_Transmit+0x26>
 800376a:	2302      	movs	r3, #2
 800376c:	e140      	b.n	80039f0 <HAL_SPI_Transmit+0x2a8>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	225c      	movs	r2, #92	; 0x5c
 8003772:	2101      	movs	r1, #1
 8003774:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003776:	f7fe f8e7 	bl	8001948 <HAL_GetTick>
 800377a:	0003      	movs	r3, r0
 800377c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800377e:	2316      	movs	r3, #22
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	1dba      	adds	r2, r7, #6
 8003784:	8812      	ldrh	r2, [r2, #0]
 8003786:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	225d      	movs	r2, #93	; 0x5d
 800378c:	5c9b      	ldrb	r3, [r3, r2]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d004      	beq.n	800379e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003794:	231f      	movs	r3, #31
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	2202      	movs	r2, #2
 800379a:	701a      	strb	r2, [r3, #0]
    goto error;
 800379c:	e11d      	b.n	80039da <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_SPI_Transmit+0x64>
 80037a4:	1dbb      	adds	r3, r7, #6
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80037ac:	231f      	movs	r3, #31
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80037b4:	e111      	b.n	80039da <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	225d      	movs	r2, #93	; 0x5d
 80037ba:	2103      	movs	r1, #3
 80037bc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1dba      	adds	r2, r7, #6
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1dba      	adds	r2, r7, #6
 80037d6:	8812      	ldrh	r2, [r2, #0]
 80037d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2244      	movs	r2, #68	; 0x44
 80037e4:	2100      	movs	r1, #0
 80037e6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2246      	movs	r2, #70	; 0x46
 80037ec:	2100      	movs	r1, #0
 80037ee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	429a      	cmp	r2, r3
 8003806:	d110      	bne.n	800382a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	438a      	bics	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	01c9      	lsls	r1, r1, #7
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2240      	movs	r2, #64	; 0x40
 8003832:	4013      	ands	r3, r2
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d007      	beq.n	8003848 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	23e0      	movs	r3, #224	; 0xe0
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	429a      	cmp	r2, r3
 8003852:	d94e      	bls.n	80038f2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_SPI_Transmit+0x11e>
 800385c:	2316      	movs	r3, #22
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d13f      	bne.n	80038e6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	881a      	ldrh	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	1c9a      	adds	r2, r3, #2
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800388a:	e02c      	b.n	80038e6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2202      	movs	r2, #2
 8003894:	4013      	ands	r3, r2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d112      	bne.n	80038c0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	1c9a      	adds	r2, r3, #2
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038be:	e012      	b.n	80038e6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c0:	f7fe f842 	bl	8001948 <HAL_GetTick>
 80038c4:	0002      	movs	r2, r0
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d802      	bhi.n	80038d6 <HAL_SPI_Transmit+0x18e>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	d102      	bne.n	80038dc <HAL_SPI_Transmit+0x194>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80038dc:	231f      	movs	r3, #31
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	2203      	movs	r2, #3
 80038e2:	701a      	strb	r2, [r3, #0]
          goto error;
 80038e4:	e079      	b.n	80039da <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1cd      	bne.n	800388c <HAL_SPI_Transmit+0x144>
 80038f0:	e04f      	b.n	8003992 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <HAL_SPI_Transmit+0x1bc>
 80038fa:	2316      	movs	r3, #22
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d141      	bne.n	8003988 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800392a:	e02d      	b.n	8003988 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2202      	movs	r2, #2
 8003934:	4013      	ands	r3, r2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d113      	bne.n	8003962 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003960:	e012      	b.n	8003988 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003962:	f7fd fff1 	bl	8001948 <HAL_GetTick>
 8003966:	0002      	movs	r2, r0
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d802      	bhi.n	8003978 <HAL_SPI_Transmit+0x230>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	d102      	bne.n	800397e <HAL_SPI_Transmit+0x236>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d104      	bne.n	8003988 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800397e:	231f      	movs	r3, #31
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2203      	movs	r2, #3
 8003984:	701a      	strb	r2, [r3, #0]
          goto error;
 8003986:	e028      	b.n	80039da <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1cc      	bne.n	800392c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 f95d 	bl	8003c58 <SPI_EndRxTxTransaction>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80039ce:	231f      	movs	r3, #31
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e000      	b.n	80039da <HAL_SPI_Transmit+0x292>
  }

error:
 80039d8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	225d      	movs	r2, #93	; 0x5d
 80039de:	2101      	movs	r1, #1
 80039e0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	225c      	movs	r2, #92	; 0x5c
 80039e6:	2100      	movs	r1, #0
 80039e8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80039ea:	231f      	movs	r3, #31
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	781b      	ldrb	r3, [r3, #0]
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b008      	add	sp, #32
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	1dfb      	adds	r3, r7, #7
 8003a06:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a08:	f7fd ff9e 	bl	8001948 <HAL_GetTick>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	18d3      	adds	r3, r2, r3
 8003a16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a18:	f7fd ff96 	bl	8001948 <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a20:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	015b      	lsls	r3, r3, #5
 8003a26:	0d1b      	lsrs	r3, r3, #20
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	4353      	muls	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a2e:	e058      	b.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	d055      	beq.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a36:	f7fd ff87 	bl	8001948 <HAL_GetTick>
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d902      	bls.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d142      	bne.n	8003ad2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	21e0      	movs	r1, #224	; 0xe0
 8003a58:	438a      	bics	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	2382      	movs	r3, #130	; 0x82
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d113      	bne.n	8003a90 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d005      	beq.n	8003a80 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d107      	bne.n	8003a90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2140      	movs	r1, #64	; 0x40
 8003a8c:	438a      	bics	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	019b      	lsls	r3, r3, #6
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d110      	bne.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	491a      	ldr	r1, [pc, #104]	; (8003b10 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2180      	movs	r1, #128	; 0x80
 8003ab8:	0189      	lsls	r1, r1, #6
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	225d      	movs	r2, #93	; 0x5d
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	225c      	movs	r2, #92	; 0x5c
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e017      	b.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	425a      	negs	r2, r3
 8003af2:	4153      	adcs	r3, r2
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	001a      	movs	r2, r3
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d197      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b008      	add	sp, #32
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	20001c08 	.word	0x20001c08
 8003b10:	ffffdfff 	.word	0xffffdfff

08003b14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b22:	2317      	movs	r3, #23
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b2a:	f7fd ff0d 	bl	8001948 <HAL_GetTick>
 8003b2e:	0002      	movs	r2, r0
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	18d3      	adds	r3, r2, r3
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b3a:	f7fd ff05 	bl	8001948 <HAL_GetTick>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	0013      	movs	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	189b      	adds	r3, r3, r2
 8003b54:	00da      	lsls	r2, r3, #3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	0d1b      	lsrs	r3, r3, #20
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	4353      	muls	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b60:	e068      	b.n	8003c34 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	23c0      	movs	r3, #192	; 0xc0
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d10a      	bne.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	2117      	movs	r1, #23
 8003b7a:	187b      	adds	r3, r7, r1
 8003b7c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	d055      	beq.n	8003c34 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b88:	f7fd fede 	bl	8001948 <HAL_GetTick>
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d902      	bls.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d142      	bne.n	8003c24 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	21e0      	movs	r1, #224	; 0xe0
 8003baa:	438a      	bics	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	2382      	movs	r3, #130	; 0x82
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d113      	bne.n	8003be2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d005      	beq.n	8003bd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d107      	bne.n	8003be2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	438a      	bics	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d110      	bne.n	8003c10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4916      	ldr	r1, [pc, #88]	; (8003c54 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2180      	movs	r1, #128	; 0x80
 8003c0a:	0189      	lsls	r1, r1, #6
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	225d      	movs	r2, #93	; 0x5d
 8003c14:	2101      	movs	r1, #1
 8003c16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	225c      	movs	r2, #92	; 0x5c
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e010      	b.n	8003c46 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d18e      	bne.n	8003b62 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	0018      	movs	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b00a      	add	sp, #40	; 0x28
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	20001c08 	.word	0x20001c08
 8003c54:	ffffdfff 	.word	0xffffdfff

08003c58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	23c0      	movs	r3, #192	; 0xc0
 8003c68:	0159      	lsls	r1, r3, #5
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	0013      	movs	r3, r2
 8003c72:	2200      	movs	r2, #0
 8003c74:	f7ff ff4e 	bl	8003b14 <SPI_WaitFifoStateUntilTimeout>
 8003c78:	1e03      	subs	r3, r0, #0
 8003c7a:	d007      	beq.n	8003c8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c80:	2220      	movs	r2, #32
 8003c82:	431a      	orrs	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e027      	b.n	8003cdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	0013      	movs	r3, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	f7ff fead 	bl	80039f8 <SPI_WaitFlagStateUntilTimeout>
 8003c9e:	1e03      	subs	r3, r0, #0
 8003ca0:	d007      	beq.n	8003cb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e014      	b.n	8003cdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	23c0      	movs	r3, #192	; 0xc0
 8003cb6:	00d9      	lsls	r1, r3, #3
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	0013      	movs	r3, r2
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f7ff ff27 	bl	8003b14 <SPI_WaitFifoStateUntilTimeout>
 8003cc6:	1e03      	subs	r3, r0, #0
 8003cc8:	d007      	beq.n	8003cda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cce:	2220      	movs	r2, #32
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e000      	b.n	8003cdc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e042      	b.n	8003d7c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	223d      	movs	r2, #61	; 0x3d
 8003cfa:	5c9b      	ldrb	r3, [r3, r2]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d107      	bne.n	8003d12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	223c      	movs	r2, #60	; 0x3c
 8003d06:	2100      	movs	r1, #0
 8003d08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7fd fc77 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	223d      	movs	r2, #61	; 0x3d
 8003d16:	2102      	movs	r1, #2
 8003d18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	0019      	movs	r1, r3
 8003d24:	0010      	movs	r0, r2
 8003d26:	f000 fad7 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2246      	movs	r2, #70	; 0x46
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	223e      	movs	r2, #62	; 0x3e
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223f      	movs	r2, #63	; 0x3f
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2241      	movs	r2, #65	; 0x41
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2242      	movs	r2, #66	; 0x42
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2243      	movs	r2, #67	; 0x43
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2244      	movs	r2, #68	; 0x44
 8003d66:	2101      	movs	r1, #1
 8003d68:	5499      	strb	r1, [r3, r2]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2245      	movs	r2, #69	; 0x45
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	223d      	movs	r2, #61	; 0x3d
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e042      	b.n	8003e1c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	223d      	movs	r2, #61	; 0x3d
 8003d9a:	5c9b      	ldrb	r3, [r3, r2]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d107      	bne.n	8003db2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	223c      	movs	r2, #60	; 0x3c
 8003da6:	2100      	movs	r1, #0
 8003da8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 f839 	bl	8003e24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	223d      	movs	r2, #61	; 0x3d
 8003db6:	2102      	movs	r1, #2
 8003db8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	0010      	movs	r0, r2
 8003dc6:	f000 fa87 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2246      	movs	r2, #70	; 0x46
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	223e      	movs	r2, #62	; 0x3e
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	5499      	strb	r1, [r3, r2]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	223f      	movs	r2, #63	; 0x3f
 8003dde:	2101      	movs	r1, #1
 8003de0:	5499      	strb	r1, [r3, r2]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2240      	movs	r2, #64	; 0x40
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2241      	movs	r2, #65	; 0x41
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2242      	movs	r2, #66	; 0x42
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2243      	movs	r2, #67	; 0x43
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2244      	movs	r2, #68	; 0x44
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2245      	movs	r2, #69	; 0x45
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	223d      	movs	r2, #61	; 0x3d
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b002      	add	sp, #8
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d108      	bne.n	8003e56 <HAL_TIM_PWM_Start+0x22>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	223e      	movs	r2, #62	; 0x3e
 8003e48:	5c9b      	ldrb	r3, [r3, r2]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	4193      	sbcs	r3, r2
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	e01f      	b.n	8003e96 <HAL_TIM_PWM_Start+0x62>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d108      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x3a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	223f      	movs	r2, #63	; 0x3f
 8003e60:	5c9b      	ldrb	r3, [r3, r2]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	1e5a      	subs	r2, r3, #1
 8003e68:	4193      	sbcs	r3, r2
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	e013      	b.n	8003e96 <HAL_TIM_PWM_Start+0x62>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d108      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x52>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2240      	movs	r2, #64	; 0x40
 8003e78:	5c9b      	ldrb	r3, [r3, r2]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	1e5a      	subs	r2, r3, #1
 8003e80:	4193      	sbcs	r3, r2
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	e007      	b.n	8003e96 <HAL_TIM_PWM_Start+0x62>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2241      	movs	r2, #65	; 0x41
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	1e5a      	subs	r2, r3, #1
 8003e92:	4193      	sbcs	r3, r2
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e074      	b.n	8003f88 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0x7a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	223e      	movs	r2, #62	; 0x3e
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	5499      	strb	r1, [r3, r2]
 8003eac:	e013      	b.n	8003ed6 <HAL_TIM_PWM_Start+0xa2>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Start+0x8a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	223f      	movs	r2, #63	; 0x3f
 8003eb8:	2102      	movs	r1, #2
 8003eba:	5499      	strb	r1, [r3, r2]
 8003ebc:	e00b      	b.n	8003ed6 <HAL_TIM_PWM_Start+0xa2>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_PWM_Start+0x9a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2240      	movs	r2, #64	; 0x40
 8003ec8:	2102      	movs	r1, #2
 8003eca:	5499      	strb	r1, [r3, r2]
 8003ecc:	e003      	b.n	8003ed6 <HAL_TIM_PWM_Start+0xa2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2241      	movs	r2, #65	; 0x41
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	2201      	movs	r2, #1
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 fd10 	bl	8004904 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <HAL_TIM_PWM_Start+0x15c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00e      	beq.n	8003f0c <HAL_TIM_PWM_Start+0xd8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <HAL_TIM_PWM_Start+0x160>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_TIM_PWM_Start+0xd8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <HAL_TIM_PWM_Start+0x164>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <HAL_TIM_PWM_Start+0xd8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <HAL_TIM_PWM_Start+0x168>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIM_PWM_Start+0xdc>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <HAL_TIM_PWM_Start+0xde>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2180      	movs	r1, #128	; 0x80
 8003f22:	0209      	lsls	r1, r1, #8
 8003f24:	430a      	orrs	r2, r1
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <HAL_TIM_PWM_Start+0x15c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00f      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x11e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	05db      	lsls	r3, r3, #23
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x11e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <HAL_TIM_PWM_Start+0x16c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x11e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <HAL_TIM_PWM_Start+0x160>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d111      	bne.n	8003f76 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2207      	movs	r2, #7
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d010      	beq.n	8003f86 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2101      	movs	r1, #1
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f74:	e007      	b.n	8003f86 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b004      	add	sp, #16
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800
 8003fa0:	40000400 	.word	0x40000400

08003fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2317      	movs	r3, #23
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	223c      	movs	r2, #60	; 0x3c
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e0ad      	b.n	8004122 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	223c      	movs	r2, #60	; 0x3c
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d100      	bne.n	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003fd4:	e076      	b.n	80040c4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d900      	bls.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003fdc:	e095      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d04e      	beq.n	8004082 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d900      	bls.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x48>
 8003fea:	e08e      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x56>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d021      	beq.n	800403c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003ff8:	e087      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	0011      	movs	r1, r2
 8004002:	0018      	movs	r0, r3
 8004004:	f000 f9e8 	bl	80043d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2108      	movs	r1, #8
 8004014:	430a      	orrs	r2, r1
 8004016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2104      	movs	r1, #4
 8004024:	438a      	bics	r2, r1
 8004026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6999      	ldr	r1, [r3, #24]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	619a      	str	r2, [r3, #24]
      break;
 800403a:	e06b      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	0011      	movs	r1, r2
 8004044:	0018      	movs	r0, r3
 8004046:	f000 fa4f 	bl	80044e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699a      	ldr	r2, [r3, #24]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2180      	movs	r1, #128	; 0x80
 8004056:	0109      	lsls	r1, r1, #4
 8004058:	430a      	orrs	r2, r1
 800405a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4931      	ldr	r1, [pc, #196]	; (800412c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004068:	400a      	ands	r2, r1
 800406a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6999      	ldr	r1, [r3, #24]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	021a      	lsls	r2, r3, #8
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	619a      	str	r2, [r3, #24]
      break;
 8004080:	e048      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	0011      	movs	r1, r2
 800408a:	0018      	movs	r0, r3
 800408c:	f000 fab0 	bl	80045f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2108      	movs	r1, #8
 800409c:	430a      	orrs	r2, r1
 800409e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2104      	movs	r1, #4
 80040ac:	438a      	bics	r2, r1
 80040ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69d9      	ldr	r1, [r3, #28]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	61da      	str	r2, [r3, #28]
      break;
 80040c2:	e027      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	0011      	movs	r1, r2
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 fb15 	bl	80046fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2180      	movs	r1, #128	; 0x80
 80040de:	0109      	lsls	r1, r1, #4
 80040e0:	430a      	orrs	r2, r1
 80040e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	490f      	ldr	r1, [pc, #60]	; (800412c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69d9      	ldr	r1, [r3, #28]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	021a      	lsls	r2, r3, #8
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	61da      	str	r2, [r3, #28]
      break;
 8004108:	e004      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800410a:	2317      	movs	r3, #23
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
      break;
 8004112:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	223c      	movs	r2, #60	; 0x3c
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

  return status;
 800411c:	2317      	movs	r3, #23
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	781b      	ldrb	r3, [r3, #0]
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b006      	add	sp, #24
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	fffffbff 	.word	0xfffffbff

08004130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413a:	230f      	movs	r3, #15
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	223c      	movs	r2, #60	; 0x3c
 8004146:	5c9b      	ldrb	r3, [r3, r2]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_TIM_ConfigClockSource+0x20>
 800414c:	2302      	movs	r3, #2
 800414e:	e0bc      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x19a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	223c      	movs	r2, #60	; 0x3c
 8004154:	2101      	movs	r1, #1
 8004156:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	223d      	movs	r2, #61	; 0x3d
 800415c:	2102      	movs	r1, #2
 800415e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2277      	movs	r2, #119	; 0x77
 800416c:	4393      	bics	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a58      	ldr	r2, [pc, #352]	; (80042d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004174:	4013      	ands	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	0192      	lsls	r2, r2, #6
 8004188:	4293      	cmp	r3, r2
 800418a:	d040      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xde>
 800418c:	2280      	movs	r2, #128	; 0x80
 800418e:	0192      	lsls	r2, r2, #6
 8004190:	4293      	cmp	r3, r2
 8004192:	d900      	bls.n	8004196 <HAL_TIM_ConfigClockSource+0x66>
 8004194:	e088      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x178>
 8004196:	2280      	movs	r2, #128	; 0x80
 8004198:	0152      	lsls	r2, r2, #5
 800419a:	4293      	cmp	r3, r2
 800419c:	d100      	bne.n	80041a0 <HAL_TIM_ConfigClockSource+0x70>
 800419e:	e088      	b.n	80042b2 <HAL_TIM_ConfigClockSource+0x182>
 80041a0:	2280      	movs	r2, #128	; 0x80
 80041a2:	0152      	lsls	r2, r2, #5
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d900      	bls.n	80041aa <HAL_TIM_ConfigClockSource+0x7a>
 80041a8:	e07e      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x178>
 80041aa:	2b70      	cmp	r3, #112	; 0x70
 80041ac:	d018      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0xb0>
 80041ae:	d900      	bls.n	80041b2 <HAL_TIM_ConfigClockSource+0x82>
 80041b0:	e07a      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x178>
 80041b2:	2b60      	cmp	r3, #96	; 0x60
 80041b4:	d04f      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x126>
 80041b6:	d900      	bls.n	80041ba <HAL_TIM_ConfigClockSource+0x8a>
 80041b8:	e076      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x178>
 80041ba:	2b50      	cmp	r3, #80	; 0x50
 80041bc:	d03b      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0x106>
 80041be:	d900      	bls.n	80041c2 <HAL_TIM_ConfigClockSource+0x92>
 80041c0:	e072      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x178>
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d057      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x146>
 80041c6:	d900      	bls.n	80041ca <HAL_TIM_ConfigClockSource+0x9a>
 80041c8:	e06e      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x178>
 80041ca:	2b30      	cmp	r3, #48	; 0x30
 80041cc:	d063      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x166>
 80041ce:	d86b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x178>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d060      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x166>
 80041d4:	d868      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x178>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d05d      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x166>
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d05b      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x166>
 80041de:	e063      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f000 fb68 	bl	80048c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2277      	movs	r2, #119	; 0x77
 8004200:	4313      	orrs	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e052      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6899      	ldr	r1, [r3, #8]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f000 fb51 	bl	80048c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	01c9      	lsls	r1, r1, #7
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
      break;
 8004234:	e03e      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	001a      	movs	r2, r3
 8004244:	f000 fac4 	bl	80047d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2150      	movs	r1, #80	; 0x50
 800424e:	0018      	movs	r0, r3
 8004250:	f000 fb1e 	bl	8004890 <TIM_ITRx_SetConfig>
      break;
 8004254:	e02e      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	001a      	movs	r2, r3
 8004264:	f000 fae2 	bl	800482c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2160      	movs	r1, #96	; 0x60
 800426e:	0018      	movs	r0, r3
 8004270:	f000 fb0e 	bl	8004890 <TIM_ITRx_SetConfig>
      break;
 8004274:	e01e      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	001a      	movs	r2, r3
 8004284:	f000 faa4 	bl	80047d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	0018      	movs	r0, r3
 8004290:	f000 fafe 	bl	8004890 <TIM_ITRx_SetConfig>
      break;
 8004294:	e00e      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	0019      	movs	r1, r3
 80042a0:	0010      	movs	r0, r2
 80042a2:	f000 faf5 	bl	8004890 <TIM_ITRx_SetConfig>
      break;
 80042a6:	e005      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80042a8:	230f      	movs	r3, #15
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	2201      	movs	r2, #1
 80042ae:	701a      	strb	r2, [r3, #0]
      break;
 80042b0:	e000      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80042b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	223d      	movs	r2, #61	; 0x3d
 80042b8:	2101      	movs	r1, #1
 80042ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	223c      	movs	r2, #60	; 0x3c
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

  return status;
 80042c4:	230f      	movs	r3, #15
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	781b      	ldrb	r3, [r3, #0]
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b004      	add	sp, #16
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	ffff00ff 	.word	0xffff00ff

080042d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a34      	ldr	r2, [pc, #208]	; (80043bc <TIM_Base_SetConfig+0xe4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d008      	beq.n	8004302 <TIM_Base_SetConfig+0x2a>
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	05db      	lsls	r3, r3, #23
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0x2a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a30      	ldr	r2, [pc, #192]	; (80043c0 <TIM_Base_SetConfig+0xe8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2270      	movs	r2, #112	; 0x70
 8004306:	4393      	bics	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a29      	ldr	r2, [pc, #164]	; (80043bc <TIM_Base_SetConfig+0xe4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d018      	beq.n	800434e <TIM_Base_SetConfig+0x76>
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	05db      	lsls	r3, r3, #23
 8004322:	429a      	cmp	r2, r3
 8004324:	d013      	beq.n	800434e <TIM_Base_SetConfig+0x76>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <TIM_Base_SetConfig+0xe8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00f      	beq.n	800434e <TIM_Base_SetConfig+0x76>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <TIM_Base_SetConfig+0xec>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_Base_SetConfig+0x76>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <TIM_Base_SetConfig+0xf0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_Base_SetConfig+0x76>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a22      	ldr	r2, [pc, #136]	; (80043cc <TIM_Base_SetConfig+0xf4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_Base_SetConfig+0x76>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a21      	ldr	r2, [pc, #132]	; (80043d0 <TIM_Base_SetConfig+0xf8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <TIM_Base_SetConfig+0xfc>)
 8004352:	4013      	ands	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	4393      	bics	r3, r2
 8004366:	001a      	movs	r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <TIM_Base_SetConfig+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0xce>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a0d      	ldr	r2, [pc, #52]	; (80043c8 <TIM_Base_SetConfig+0xf0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0xce>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a0c      	ldr	r2, [pc, #48]	; (80043cc <TIM_Base_SetConfig+0xf4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0xce>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a0b      	ldr	r2, [pc, #44]	; (80043d0 <TIM_Base_SetConfig+0xf8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d103      	bne.n	80043ae <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	615a      	str	r2, [r3, #20]
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b004      	add	sp, #16
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40002000 	.word	0x40002000
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40014800 	.word	0x40014800
 80043d4:	fffffcff 	.word	0xfffffcff

080043d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	2201      	movs	r2, #1
 80043e8:	4393      	bics	r3, r2
 80043ea:	001a      	movs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2270      	movs	r2, #112	; 0x70
 8004406:	4393      	bics	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2203      	movs	r2, #3
 800440e:	4393      	bics	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2202      	movs	r2, #2
 8004420:	4393      	bics	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <TIM_OC1_SetConfig+0xf8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_OC1_SetConfig+0x76>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <TIM_OC1_SetConfig+0xfc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_OC1_SetConfig+0x76>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a25      	ldr	r2, [pc, #148]	; (80044d8 <TIM_OC1_SetConfig+0x100>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_OC1_SetConfig+0x76>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a24      	ldr	r2, [pc, #144]	; (80044dc <TIM_OC1_SetConfig+0x104>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10c      	bne.n	8004468 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2208      	movs	r2, #8
 8004452:	4393      	bics	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2204      	movs	r2, #4
 8004464:	4393      	bics	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <TIM_OC1_SetConfig+0xf8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00b      	beq.n	8004488 <TIM_OC1_SetConfig+0xb0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <TIM_OC1_SetConfig+0xfc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <TIM_OC1_SetConfig+0xb0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <TIM_OC1_SetConfig+0x100>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_OC1_SetConfig+0xb0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a16      	ldr	r2, [pc, #88]	; (80044dc <TIM_OC1_SetConfig+0x104>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d111      	bne.n	80044ac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <TIM_OC1_SetConfig+0x108>)
 800448c:	4013      	ands	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <TIM_OC1_SetConfig+0x10c>)
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b006      	add	sp, #24
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800
 80044e0:	fffffeff 	.word	0xfffffeff
 80044e4:	fffffdff 	.word	0xfffffdff

080044e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	2210      	movs	r2, #16
 80044f8:	4393      	bics	r3, r2
 80044fa:	001a      	movs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a2e      	ldr	r2, [pc, #184]	; (80045d0 <TIM_OC2_SetConfig+0xe8>)
 8004516:	4013      	ands	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <TIM_OC2_SetConfig+0xec>)
 800451e:	4013      	ands	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2220      	movs	r2, #32
 8004532:	4393      	bics	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <TIM_OC2_SetConfig+0xf0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10d      	bne.n	8004566 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2280      	movs	r2, #128	; 0x80
 800454e:	4393      	bics	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2240      	movs	r2, #64	; 0x40
 8004562:	4393      	bics	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <TIM_OC2_SetConfig+0xf0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00b      	beq.n	8004586 <TIM_OC2_SetConfig+0x9e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a1a      	ldr	r2, [pc, #104]	; (80045dc <TIM_OC2_SetConfig+0xf4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d007      	beq.n	8004586 <TIM_OC2_SetConfig+0x9e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <TIM_OC2_SetConfig+0xf8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC2_SetConfig+0x9e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <TIM_OC2_SetConfig+0xfc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d113      	bne.n	80045ae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <TIM_OC2_SetConfig+0x100>)
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4a16      	ldr	r2, [pc, #88]	; (80045ec <TIM_OC2_SetConfig+0x104>)
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b006      	add	sp, #24
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	ffff8fff 	.word	0xffff8fff
 80045d4:	fffffcff 	.word	0xfffffcff
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800
 80045e8:	fffffbff 	.word	0xfffffbff
 80045ec:	fffff7ff 	.word	0xfffff7ff

080045f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4a35      	ldr	r2, [pc, #212]	; (80046d4 <TIM_OC3_SetConfig+0xe4>)
 8004600:	401a      	ands	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2270      	movs	r2, #112	; 0x70
 800461c:	4393      	bics	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2203      	movs	r2, #3
 8004624:	4393      	bics	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4a28      	ldr	r2, [pc, #160]	; (80046d8 <TIM_OC3_SetConfig+0xe8>)
 8004636:	4013      	ands	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a24      	ldr	r2, [pc, #144]	; (80046dc <TIM_OC3_SetConfig+0xec>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10d      	bne.n	800466a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <TIM_OC3_SetConfig+0xf0>)
 8004652:	4013      	ands	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <TIM_OC3_SetConfig+0xf4>)
 8004666:	4013      	ands	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <TIM_OC3_SetConfig+0xec>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00b      	beq.n	800468a <TIM_OC3_SetConfig+0x9a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <TIM_OC3_SetConfig+0xf8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d007      	beq.n	800468a <TIM_OC3_SetConfig+0x9a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <TIM_OC3_SetConfig+0xfc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_OC3_SetConfig+0x9a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <TIM_OC3_SetConfig+0x100>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d113      	bne.n	80046b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <TIM_OC3_SetConfig+0x104>)
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4a18      	ldr	r2, [pc, #96]	; (80046f8 <TIM_OC3_SetConfig+0x108>)
 8004696:	4013      	ands	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b006      	add	sp, #24
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	fffffeff 	.word	0xfffffeff
 80046d8:	fffffdff 	.word	0xfffffdff
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	fffff7ff 	.word	0xfffff7ff
 80046e4:	fffffbff 	.word	0xfffffbff
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40014400 	.word	0x40014400
 80046f0:	40014800 	.word	0x40014800
 80046f4:	ffffefff 	.word	0xffffefff
 80046f8:	ffffdfff 	.word	0xffffdfff

080046fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	4a28      	ldr	r2, [pc, #160]	; (80047ac <TIM_OC4_SetConfig+0xb0>)
 800470c:	401a      	ands	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <TIM_OC4_SetConfig+0xb4>)
 8004728:	4013      	ands	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <TIM_OC4_SetConfig+0xb8>)
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <TIM_OC4_SetConfig+0xbc>)
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	031b      	lsls	r3, r3, #12
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a19      	ldr	r2, [pc, #100]	; (80047bc <TIM_OC4_SetConfig+0xc0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00b      	beq.n	8004774 <TIM_OC4_SetConfig+0x78>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <TIM_OC4_SetConfig+0xc4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d007      	beq.n	8004774 <TIM_OC4_SetConfig+0x78>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <TIM_OC4_SetConfig+0xc8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_OC4_SetConfig+0x78>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <TIM_OC4_SetConfig+0xcc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d109      	bne.n	8004788 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	4a15      	ldr	r2, [pc, #84]	; (80047cc <TIM_OC4_SetConfig+0xd0>)
 8004778:	4013      	ands	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	019b      	lsls	r3, r3, #6
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b006      	add	sp, #24
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	ffffefff 	.word	0xffffefff
 80047b0:	ffff8fff 	.word	0xffff8fff
 80047b4:	fffffcff 	.word	0xfffffcff
 80047b8:	ffffdfff 	.word	0xffffdfff
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	ffffbfff 	.word	0xffffbfff

080047d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	2201      	movs	r2, #1
 80047e8:	4393      	bics	r3, r2
 80047ea:	001a      	movs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	22f0      	movs	r2, #240	; 0xf0
 80047fa:	4393      	bics	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	220a      	movs	r2, #10
 800480c:	4393      	bics	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	621a      	str	r2, [r3, #32]
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	b006      	add	sp, #24
 800482a:	bd80      	pop	{r7, pc}

0800482c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	2210      	movs	r2, #16
 800483e:	4393      	bics	r3, r2
 8004840:	001a      	movs	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4a0d      	ldr	r2, [pc, #52]	; (800488c <TIM_TI2_ConfigInputStage+0x60>)
 8004856:	4013      	ands	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	031b      	lsls	r3, r3, #12
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	22a0      	movs	r2, #160	; 0xa0
 8004868:	4393      	bics	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b006      	add	sp, #24
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	ffff0fff 	.word	0xffff0fff

08004890 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2270      	movs	r2, #112	; 0x70
 80048a4:	4393      	bics	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	2207      	movs	r2, #7
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	609a      	str	r2, [r3, #8]
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4a09      	ldr	r2, [pc, #36]	; (8004900 <TIM_ETR_SetConfig+0x3c>)
 80048dc:	4013      	ands	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	021a      	lsls	r2, r3, #8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b006      	add	sp, #24
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	ffff00ff 	.word	0xffff00ff

08004904 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	221f      	movs	r2, #31
 8004914:	4013      	ands	r3, r2
 8004916:	2201      	movs	r2, #1
 8004918:	409a      	lsls	r2, r3
 800491a:	0013      	movs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	43d2      	mvns	r2, r2
 8004926:	401a      	ands	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1a      	ldr	r2, [r3, #32]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	211f      	movs	r1, #31
 8004934:	400b      	ands	r3, r1
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4099      	lsls	r1, r3
 800493a:	000b      	movs	r3, r1
 800493c:	431a      	orrs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	46bd      	mov	sp, r7
 8004946:	b006      	add	sp, #24
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	223c      	movs	r2, #60	; 0x3c
 800495a:	5c9b      	ldrb	r3, [r3, r2]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004960:	2302      	movs	r3, #2
 8004962:	e047      	b.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	223c      	movs	r2, #60	; 0x3c
 8004968:	2101      	movs	r1, #1
 800496a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	223d      	movs	r2, #61	; 0x3d
 8004970:	2102      	movs	r1, #2
 8004972:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2270      	movs	r2, #112	; 0x70
 8004988:	4393      	bics	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a16      	ldr	r2, [pc, #88]	; (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00f      	beq.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	05db      	lsls	r3, r3, #23
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d009      	beq.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10c      	bne.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2280      	movs	r2, #128	; 0x80
 80049cc:	4393      	bics	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	223d      	movs	r2, #61	; 0x3d
 80049e6:	2101      	movs	r1, #1
 80049e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	223c      	movs	r2, #60	; 0x3c
 80049ee:	2100      	movs	r1, #0
 80049f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	0018      	movs	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b004      	add	sp, #16
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40014000 	.word	0x40014000

08004a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e044      	b.n	8004aa4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d107      	bne.n	8004a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2274      	movs	r2, #116	; 0x74
 8004a26:	2100      	movs	r1, #0
 8004a28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f7fc fe89 	bl	8001744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2224      	movs	r2, #36	; 0x24
 8004a36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2101      	movs	r1, #1
 8004a44:	438a      	bics	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 f830 	bl	8004ab0 <UART_SetConfig>
 8004a50:	0003      	movs	r3, r0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e024      	b.n	8004aa4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	0018      	movs	r0, r3
 8004a66:	f000 fa0b 	bl	8004e80 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	490d      	ldr	r1, [pc, #52]	; (8004aac <HAL_UART_Init+0xa4>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	212a      	movs	r1, #42	; 0x2a
 8004a86:	438a      	bics	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2101      	movs	r1, #1
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f000 faa3 	bl	8004fe8 <UART_CheckIdleState>
 8004aa2:	0003      	movs	r3, r0
}
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	ffffb7ff 	.word	0xffffb7ff

08004ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab8:	231e      	movs	r3, #30
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4abe      	ldr	r2, [pc, #760]	; (8004dd8 <UART_SetConfig+0x328>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4ab9      	ldr	r2, [pc, #740]	; (8004ddc <UART_SetConfig+0x32c>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4ab0      	ldr	r2, [pc, #704]	; (8004de0 <UART_SetConfig+0x330>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	0019      	movs	r1, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4aac      	ldr	r2, [pc, #688]	; (8004de4 <UART_SetConfig+0x334>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d127      	bne.n	8004b86 <UART_SetConfig+0xd6>
 8004b36:	4bac      	ldr	r3, [pc, #688]	; (8004de8 <UART_SetConfig+0x338>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d00d      	beq.n	8004b5e <UART_SetConfig+0xae>
 8004b42:	d81b      	bhi.n	8004b7c <UART_SetConfig+0xcc>
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d014      	beq.n	8004b72 <UART_SetConfig+0xc2>
 8004b48:	d818      	bhi.n	8004b7c <UART_SetConfig+0xcc>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <UART_SetConfig+0xa4>
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d00a      	beq.n	8004b68 <UART_SetConfig+0xb8>
 8004b52:	e013      	b.n	8004b7c <UART_SetConfig+0xcc>
 8004b54:	231f      	movs	r3, #31
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	e0bd      	b.n	8004cda <UART_SetConfig+0x22a>
 8004b5e:	231f      	movs	r3, #31
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	2202      	movs	r2, #2
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e0b8      	b.n	8004cda <UART_SetConfig+0x22a>
 8004b68:	231f      	movs	r3, #31
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e0b3      	b.n	8004cda <UART_SetConfig+0x22a>
 8004b72:	231f      	movs	r3, #31
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	2208      	movs	r2, #8
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e0ae      	b.n	8004cda <UART_SetConfig+0x22a>
 8004b7c:	231f      	movs	r3, #31
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	2210      	movs	r2, #16
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	e0a9      	b.n	8004cda <UART_SetConfig+0x22a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a98      	ldr	r2, [pc, #608]	; (8004dec <UART_SetConfig+0x33c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d134      	bne.n	8004bfa <UART_SetConfig+0x14a>
 8004b90:	4b95      	ldr	r3, [pc, #596]	; (8004de8 <UART_SetConfig+0x338>)
 8004b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b94:	23c0      	movs	r3, #192	; 0xc0
 8004b96:	029b      	lsls	r3, r3, #10
 8004b98:	4013      	ands	r3, r2
 8004b9a:	22c0      	movs	r2, #192	; 0xc0
 8004b9c:	0292      	lsls	r2, r2, #10
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d017      	beq.n	8004bd2 <UART_SetConfig+0x122>
 8004ba2:	22c0      	movs	r2, #192	; 0xc0
 8004ba4:	0292      	lsls	r2, r2, #10
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d822      	bhi.n	8004bf0 <UART_SetConfig+0x140>
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	0292      	lsls	r2, r2, #10
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d019      	beq.n	8004be6 <UART_SetConfig+0x136>
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	0292      	lsls	r2, r2, #10
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d81a      	bhi.n	8004bf0 <UART_SetConfig+0x140>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d004      	beq.n	8004bc8 <UART_SetConfig+0x118>
 8004bbe:	2280      	movs	r2, #128	; 0x80
 8004bc0:	0252      	lsls	r2, r2, #9
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00a      	beq.n	8004bdc <UART_SetConfig+0x12c>
 8004bc6:	e013      	b.n	8004bf0 <UART_SetConfig+0x140>
 8004bc8:	231f      	movs	r3, #31
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	e083      	b.n	8004cda <UART_SetConfig+0x22a>
 8004bd2:	231f      	movs	r3, #31
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e07e      	b.n	8004cda <UART_SetConfig+0x22a>
 8004bdc:	231f      	movs	r3, #31
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	2204      	movs	r2, #4
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e079      	b.n	8004cda <UART_SetConfig+0x22a>
 8004be6:	231f      	movs	r3, #31
 8004be8:	18fb      	adds	r3, r7, r3
 8004bea:	2208      	movs	r2, #8
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e074      	b.n	8004cda <UART_SetConfig+0x22a>
 8004bf0:	231f      	movs	r3, #31
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e06f      	b.n	8004cda <UART_SetConfig+0x22a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7c      	ldr	r2, [pc, #496]	; (8004df0 <UART_SetConfig+0x340>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d134      	bne.n	8004c6e <UART_SetConfig+0x1be>
 8004c04:	4b78      	ldr	r3, [pc, #480]	; (8004de8 <UART_SetConfig+0x338>)
 8004c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c08:	23c0      	movs	r3, #192	; 0xc0
 8004c0a:	031b      	lsls	r3, r3, #12
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	22c0      	movs	r2, #192	; 0xc0
 8004c10:	0312      	lsls	r2, r2, #12
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d017      	beq.n	8004c46 <UART_SetConfig+0x196>
 8004c16:	22c0      	movs	r2, #192	; 0xc0
 8004c18:	0312      	lsls	r2, r2, #12
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d822      	bhi.n	8004c64 <UART_SetConfig+0x1b4>
 8004c1e:	2280      	movs	r2, #128	; 0x80
 8004c20:	0312      	lsls	r2, r2, #12
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d019      	beq.n	8004c5a <UART_SetConfig+0x1aa>
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	0312      	lsls	r2, r2, #12
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d81a      	bhi.n	8004c64 <UART_SetConfig+0x1b4>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <UART_SetConfig+0x18c>
 8004c32:	2280      	movs	r2, #128	; 0x80
 8004c34:	02d2      	lsls	r2, r2, #11
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00a      	beq.n	8004c50 <UART_SetConfig+0x1a0>
 8004c3a:	e013      	b.n	8004c64 <UART_SetConfig+0x1b4>
 8004c3c:	231f      	movs	r3, #31
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e049      	b.n	8004cda <UART_SetConfig+0x22a>
 8004c46:	231f      	movs	r3, #31
 8004c48:	18fb      	adds	r3, r7, r3
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e044      	b.n	8004cda <UART_SetConfig+0x22a>
 8004c50:	231f      	movs	r3, #31
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2204      	movs	r2, #4
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	e03f      	b.n	8004cda <UART_SetConfig+0x22a>
 8004c5a:	231f      	movs	r3, #31
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	2208      	movs	r2, #8
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e03a      	b.n	8004cda <UART_SetConfig+0x22a>
 8004c64:	231f      	movs	r3, #31
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	2210      	movs	r2, #16
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e035      	b.n	8004cda <UART_SetConfig+0x22a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a60      	ldr	r2, [pc, #384]	; (8004df4 <UART_SetConfig+0x344>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d104      	bne.n	8004c82 <UART_SetConfig+0x1d2>
 8004c78:	231f      	movs	r3, #31
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	e02b      	b.n	8004cda <UART_SetConfig+0x22a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5c      	ldr	r2, [pc, #368]	; (8004df8 <UART_SetConfig+0x348>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d104      	bne.n	8004c96 <UART_SetConfig+0x1e6>
 8004c8c:	231f      	movs	r3, #31
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e021      	b.n	8004cda <UART_SetConfig+0x22a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a58      	ldr	r2, [pc, #352]	; (8004dfc <UART_SetConfig+0x34c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d104      	bne.n	8004caa <UART_SetConfig+0x1fa>
 8004ca0:	231f      	movs	r3, #31
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e017      	b.n	8004cda <UART_SetConfig+0x22a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a54      	ldr	r2, [pc, #336]	; (8004e00 <UART_SetConfig+0x350>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d104      	bne.n	8004cbe <UART_SetConfig+0x20e>
 8004cb4:	231f      	movs	r3, #31
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x22a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a50      	ldr	r2, [pc, #320]	; (8004e04 <UART_SetConfig+0x354>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d104      	bne.n	8004cd2 <UART_SetConfig+0x222>
 8004cc8:	231f      	movs	r3, #31
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e003      	b.n	8004cda <UART_SetConfig+0x22a>
 8004cd2:	231f      	movs	r3, #31
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	2210      	movs	r2, #16
 8004cd8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d15d      	bne.n	8004da2 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8004ce6:	231f      	movs	r3, #31
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d015      	beq.n	8004d1c <UART_SetConfig+0x26c>
 8004cf0:	dc18      	bgt.n	8004d24 <UART_SetConfig+0x274>
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d00d      	beq.n	8004d12 <UART_SetConfig+0x262>
 8004cf6:	dc15      	bgt.n	8004d24 <UART_SetConfig+0x274>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <UART_SetConfig+0x252>
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d005      	beq.n	8004d0c <UART_SetConfig+0x25c>
 8004d00:	e010      	b.n	8004d24 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d02:	f7fe fb53 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8004d06:	0003      	movs	r3, r0
 8004d08:	61bb      	str	r3, [r7, #24]
        break;
 8004d0a:	e012      	b.n	8004d32 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b3e      	ldr	r3, [pc, #248]	; (8004e08 <UART_SetConfig+0x358>)
 8004d0e:	61bb      	str	r3, [r7, #24]
        break;
 8004d10:	e00f      	b.n	8004d32 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7fe fac1 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004d16:	0003      	movs	r3, r0
 8004d18:	61bb      	str	r3, [r7, #24]
        break;
 8004d1a:	e00a      	b.n	8004d32 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	61bb      	str	r3, [r7, #24]
        break;
 8004d22:	e006      	b.n	8004d32 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d28:	231e      	movs	r3, #30
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
        break;
 8004d30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d100      	bne.n	8004d3a <UART_SetConfig+0x28a>
 8004d38:	e095      	b.n	8004e66 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	005a      	lsls	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	18d2      	adds	r2, r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	0010      	movs	r0, r2
 8004d4e:	f7fb f9db 	bl	8000108 <__udivsi3>
 8004d52:	0003      	movs	r3, r0
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d91c      	bls.n	8004d98 <UART_SetConfig+0x2e8>
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	025b      	lsls	r3, r3, #9
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d217      	bcs.n	8004d98 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	200e      	movs	r0, #14
 8004d6e:	183b      	adds	r3, r7, r0
 8004d70:	210f      	movs	r1, #15
 8004d72:	438a      	bics	r2, r1
 8004d74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2207      	movs	r2, #7
 8004d7e:	4013      	ands	r3, r2
 8004d80:	b299      	uxth	r1, r3
 8004d82:	183b      	adds	r3, r7, r0
 8004d84:	183a      	adds	r2, r7, r0
 8004d86:	8812      	ldrh	r2, [r2, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	183a      	adds	r2, r7, r0
 8004d92:	8812      	ldrh	r2, [r2, #0]
 8004d94:	60da      	str	r2, [r3, #12]
 8004d96:	e066      	b.n	8004e66 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004d98:	231e      	movs	r3, #30
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e061      	b.n	8004e66 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004da2:	231f      	movs	r3, #31
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d02f      	beq.n	8004e0c <UART_SetConfig+0x35c>
 8004dac:	dc32      	bgt.n	8004e14 <UART_SetConfig+0x364>
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d00d      	beq.n	8004dce <UART_SetConfig+0x31e>
 8004db2:	dc2f      	bgt.n	8004e14 <UART_SetConfig+0x364>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <UART_SetConfig+0x30e>
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d005      	beq.n	8004dc8 <UART_SetConfig+0x318>
 8004dbc:	e02a      	b.n	8004e14 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dbe:	f7fe faf5 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	61bb      	str	r3, [r7, #24]
        break;
 8004dc6:	e02c      	b.n	8004e22 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <UART_SetConfig+0x358>)
 8004dca:	61bb      	str	r3, [r7, #24]
        break;
 8004dcc:	e029      	b.n	8004e22 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fe fa63 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	61bb      	str	r3, [r7, #24]
        break;
 8004dd6:	e024      	b.n	8004e22 <UART_SetConfig+0x372>
 8004dd8:	efff69f3 	.word	0xefff69f3
 8004ddc:	ffffcfff 	.word	0xffffcfff
 8004de0:	fffff4ff 	.word	0xfffff4ff
 8004de4:	40013800 	.word	0x40013800
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40004400 	.word	0x40004400
 8004df0:	40004800 	.word	0x40004800
 8004df4:	40004c00 	.word	0x40004c00
 8004df8:	40005000 	.word	0x40005000
 8004dfc:	40011400 	.word	0x40011400
 8004e00:	40011800 	.word	0x40011800
 8004e04:	40011c00 	.word	0x40011c00
 8004e08:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	61bb      	str	r3, [r7, #24]
        break;
 8004e12:	e006      	b.n	8004e22 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e18:	231e      	movs	r3, #30
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
        break;
 8004e20:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01e      	beq.n	8004e66 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	085a      	lsrs	r2, r3, #1
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	18d2      	adds	r2, r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	0019      	movs	r1, r3
 8004e38:	0010      	movs	r0, r2
 8004e3a:	f7fb f965 	bl	8000108 <__udivsi3>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d909      	bls.n	8004e5e <UART_SetConfig+0x3ae>
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	025b      	lsls	r3, r3, #9
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d204      	bcs.n	8004e5e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	60da      	str	r2, [r3, #12]
 8004e5c:	e003      	b.n	8004e66 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004e5e:	231e      	movs	r3, #30
 8004e60:	18fb      	adds	r3, r7, r3
 8004e62:	2201      	movs	r2, #1
 8004e64:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e72:	231e      	movs	r3, #30
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	781b      	ldrb	r3, [r3, #0]
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b008      	add	sp, #32
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4a4a      	ldr	r2, [pc, #296]	; (8004fc4 <UART_AdvFeatureConfig+0x144>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2202      	movs	r2, #2
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4a43      	ldr	r2, [pc, #268]	; (8004fc8 <UART_AdvFeatureConfig+0x148>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	0019      	movs	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4a3b      	ldr	r2, [pc, #236]	; (8004fcc <UART_AdvFeatureConfig+0x14c>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d00b      	beq.n	8004f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	4a34      	ldr	r2, [pc, #208]	; (8004fd0 <UART_AdvFeatureConfig+0x150>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	0019      	movs	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2210      	movs	r2, #16
 8004f16:	4013      	ands	r3, r2
 8004f18:	d00b      	beq.n	8004f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <UART_AdvFeatureConfig+0x154>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	0019      	movs	r1, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	2220      	movs	r2, #32
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4a25      	ldr	r2, [pc, #148]	; (8004fd8 <UART_AdvFeatureConfig+0x158>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	0019      	movs	r1, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2240      	movs	r2, #64	; 0x40
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d01d      	beq.n	8004f9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <UART_AdvFeatureConfig+0x15c>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	0019      	movs	r1, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	035b      	lsls	r3, r3, #13
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d10b      	bne.n	8004f9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <UART_AdvFeatureConfig+0x160>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4a0e      	ldr	r2, [pc, #56]	; (8004fe4 <UART_AdvFeatureConfig+0x164>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	0019      	movs	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	fffdffff 	.word	0xfffdffff
 8004fc8:	fffeffff 	.word	0xfffeffff
 8004fcc:	fffbffff 	.word	0xfffbffff
 8004fd0:	ffff7fff 	.word	0xffff7fff
 8004fd4:	ffffefff 	.word	0xffffefff
 8004fd8:	ffffdfff 	.word	0xffffdfff
 8004fdc:	ffefffff 	.word	0xffefffff
 8004fe0:	ff9fffff 	.word	0xff9fffff
 8004fe4:	fff7ffff 	.word	0xfff7ffff

08004fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2280      	movs	r2, #128	; 0x80
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff8:	f7fc fca6 	bl	8001948 <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2208      	movs	r2, #8
 8005008:	4013      	ands	r3, r2
 800500a:	2b08      	cmp	r3, #8
 800500c:	d10c      	bne.n	8005028 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	0391      	lsls	r1, r2, #14
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4a17      	ldr	r2, [pc, #92]	; (8005074 <UART_CheckIdleState+0x8c>)
 8005018:	9200      	str	r2, [sp, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	f000 f82c 	bl	8005078 <UART_WaitOnFlagUntilTimeout>
 8005020:	1e03      	subs	r3, r0, #0
 8005022:	d001      	beq.n	8005028 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e021      	b.n	800506c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2204      	movs	r2, #4
 8005030:	4013      	ands	r3, r2
 8005032:	2b04      	cmp	r3, #4
 8005034:	d10c      	bne.n	8005050 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2280      	movs	r2, #128	; 0x80
 800503a:	03d1      	lsls	r1, r2, #15
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	4a0d      	ldr	r2, [pc, #52]	; (8005074 <UART_CheckIdleState+0x8c>)
 8005040:	9200      	str	r2, [sp, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	f000 f818 	bl	8005078 <UART_WaitOnFlagUntilTimeout>
 8005048:	1e03      	subs	r3, r0, #0
 800504a:	d001      	beq.n	8005050 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e00d      	b.n	800506c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2274      	movs	r2, #116	; 0x74
 8005066:	2100      	movs	r1, #0
 8005068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	0018      	movs	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	b004      	add	sp, #16
 8005072:	bd80      	pop	{r7, pc}
 8005074:	01ffffff 	.word	0x01ffffff

08005078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b094      	sub	sp, #80	; 0x50
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	1dfb      	adds	r3, r7, #7
 8005086:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005088:	e0a3      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800508c:	3301      	adds	r3, #1
 800508e:	d100      	bne.n	8005092 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005090:	e09f      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005092:	f7fc fc59 	bl	8001948 <HAL_GetTick>
 8005096:	0002      	movs	r2, r0
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d13d      	bne.n	8005124 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a8:	f3ef 8310 	mrs	r3, PRIMASK
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b0:	647b      	str	r3, [r7, #68]	; 0x44
 80050b2:	2301      	movs	r3, #1
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	f383 8810 	msr	PRIMASK, r3
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	494c      	ldr	r1, [pc, #304]	; (80051fc <UART_WaitOnFlagUntilTimeout+0x184>)
 80050ca:	400a      	ands	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	f383 8810 	msr	PRIMASK, r3
}
 80050d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050da:	f3ef 8310 	mrs	r3, PRIMASK
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80050e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e2:	643b      	str	r3, [r7, #64]	; 0x40
 80050e4:	2301      	movs	r3, #1
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	f383 8810 	msr	PRIMASK, r3
}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2101      	movs	r1, #1
 80050fc:	438a      	bics	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]
 8005100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005106:	f383 8810 	msr	PRIMASK, r3
}
 800510a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2274      	movs	r2, #116	; 0x74
 800511c:	2100      	movs	r1, #0
 800511e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e067      	b.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2204      	movs	r2, #4
 800512c:	4013      	ands	r3, r2
 800512e:	d050      	beq.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69da      	ldr	r2, [r3, #28]
 8005136:	2380      	movs	r3, #128	; 0x80
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	401a      	ands	r2, r3
 800513c:	2380      	movs	r3, #128	; 0x80
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	429a      	cmp	r2, r3
 8005142:	d146      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2280      	movs	r2, #128	; 0x80
 800514a:	0112      	lsls	r2, r2, #4
 800514c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514e:	f3ef 8310 	mrs	r3, PRIMASK
 8005152:	613b      	str	r3, [r7, #16]
  return(result);
 8005154:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005158:	2301      	movs	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f383 8810 	msr	PRIMASK, r3
}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4923      	ldr	r1, [pc, #140]	; (80051fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8005170:	400a      	ands	r2, r1
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005176:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f383 8810 	msr	PRIMASK, r3
}
 800517e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005180:	f3ef 8310 	mrs	r3, PRIMASK
 8005184:	61fb      	str	r3, [r7, #28]
  return(result);
 8005186:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005188:	64bb      	str	r3, [r7, #72]	; 0x48
 800518a:	2301      	movs	r3, #1
 800518c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f383 8810 	msr	PRIMASK, r3
}
 8005194:	46c0      	nop			; (mov r8, r8)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2101      	movs	r1, #1
 80051a2:	438a      	bics	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]
 80051a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	f383 8810 	msr	PRIMASK, r3
}
 80051b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2280      	movs	r2, #128	; 0x80
 80051c2:	2120      	movs	r1, #32
 80051c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2274      	movs	r2, #116	; 0x74
 80051ca:	2100      	movs	r1, #0
 80051cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e010      	b.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	4013      	ands	r3, r2
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	425a      	negs	r2, r3
 80051e2:	4153      	adcs	r3, r2
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	001a      	movs	r2, r3
 80051e8:	1dfb      	adds	r3, r7, #7
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d100      	bne.n	80051f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80051f0:	e74b      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b014      	add	sp, #80	; 0x50
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	fffffe5f 	.word	0xfffffe5f

08005200 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005206:	f3ef 8305 	mrs	r3, IPSR
 800520a:	60bb      	str	r3, [r7, #8]
  return(result);
 800520c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005212:	f3ef 8310 	mrs	r3, PRIMASK
 8005216:	607b      	str	r3, [r7, #4]
  return(result);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <osKernelInitialize+0x2e>
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <osKernelInitialize+0x54>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d103      	bne.n	800522e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005226:	2306      	movs	r3, #6
 8005228:	425b      	negs	r3, r3
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e00c      	b.n	8005248 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800522e:	4b09      	ldr	r3, [pc, #36]	; (8005254 <osKernelInitialize+0x54>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <osKernelInitialize+0x54>)
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e002      	b.n	8005248 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8005242:	2301      	movs	r3, #1
 8005244:	425b      	negs	r3, r3
 8005246:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005248:	68fb      	ldr	r3, [r7, #12]
}
 800524a:	0018      	movs	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	b004      	add	sp, #16
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	20001ec4 	.word	0x20001ec4

08005258 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800525e:	f3ef 8305 	mrs	r3, IPSR
 8005262:	60bb      	str	r3, [r7, #8]
  return(result);
 8005264:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526a:	f3ef 8310 	mrs	r3, PRIMASK
 800526e:	607b      	str	r3, [r7, #4]
  return(result);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <osKernelStart+0x2e>
 8005276:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <osKernelStart+0x58>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d103      	bne.n	8005286 <osKernelStart+0x2e>
    stat = osErrorISR;
 800527e:	2306      	movs	r3, #6
 8005280:	425b      	negs	r3, r3
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	e00e      	b.n	80052a4 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005286:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <osKernelStart+0x58>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d107      	bne.n	800529e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <osKernelStart+0x58>)
 8005290:	2202      	movs	r2, #2
 8005292:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005294:	f000 ff46 	bl	8006124 <vTaskStartScheduler>
      stat = osOK;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e002      	b.n	80052a4 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800529e:	2301      	movs	r3, #1
 80052a0:	425b      	negs	r3, r3
 80052a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80052a4:	68fb      	ldr	r3, [r7, #12]
}
 80052a6:	0018      	movs	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b004      	add	sp, #16
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20001ec4 	.word	0x20001ec4

080052b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052b4:	b5b0      	push	{r4, r5, r7, lr}
 80052b6:	b090      	sub	sp, #64	; 0x40
 80052b8:	af04      	add	r7, sp, #16
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c4:	f3ef 8305 	mrs	r3, IPSR
 80052c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80052ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d000      	beq.n	80052d2 <osThreadNew+0x1e>
 80052d0:	e090      	b.n	80053f4 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d2:	f3ef 8310 	mrs	r3, PRIMASK
 80052d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <osThreadNew+0x34>
 80052de:	4b48      	ldr	r3, [pc, #288]	; (8005400 <osThreadNew+0x14c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d100      	bne.n	80052e8 <osThreadNew+0x34>
 80052e6:	e085      	b.n	80053f4 <osThreadNew+0x140>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d100      	bne.n	80052f0 <osThreadNew+0x3c>
 80052ee:	e081      	b.n	80053f4 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80052f4:	2318      	movs	r3, #24
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 80052f8:	2117      	movs	r1, #23
 80052fa:	187b      	adds	r3, r7, r1
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005300:	187b      	adds	r3, r7, r1
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005304:	2301      	movs	r3, #1
 8005306:	425b      	negs	r3, r3
 8005308:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d044      	beq.n	800539a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <osThreadNew+0x6a>
        name = attr->name;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <osThreadNew+0x8e>
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	2b38      	cmp	r3, #56	; 0x38
 8005336:	d804      	bhi.n	8005342 <osThreadNew+0x8e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	4013      	ands	r3, r2
 8005340:	d001      	beq.n	8005346 <osThreadNew+0x92>
        return (NULL);
 8005342:	2300      	movs	r3, #0
 8005344:	e057      	b.n	80053f6 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	089b      	lsrs	r3, r3, #2
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <osThreadNew+0xc8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2bbb      	cmp	r3, #187	; 0xbb
 8005364:	d90a      	bls.n	800537c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800536a:	2b00      	cmp	r3, #0
 800536c:	d006      	beq.n	800537c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <osThreadNew+0xc8>
        mem = 1;
 8005376:	2301      	movs	r3, #1
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	e010      	b.n	800539e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10c      	bne.n	800539e <osThreadNew+0xea>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d108      	bne.n	800539e <osThreadNew+0xea>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <osThreadNew+0xea>
          mem = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	e001      	b.n	800539e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d112      	bne.n	80053ca <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053ac:	68bd      	ldr	r5, [r7, #8]
 80053ae:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80053b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	9302      	str	r3, [sp, #8]
 80053b6:	9201      	str	r2, [sp, #4]
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	002b      	movs	r3, r5
 80053be:	0022      	movs	r2, r4
 80053c0:	f000 fd21 	bl	8005e06 <xTaskCreateStatic>
 80053c4:	0003      	movs	r3, r0
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	e014      	b.n	80053f4 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d111      	bne.n	80053f4 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68bc      	ldr	r4, [r7, #8]
 80053d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	2310      	movs	r3, #16
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	0023      	movs	r3, r4
 80053e6:	f000 fd51 	bl	8005e8c <xTaskCreate>
 80053ea:	0003      	movs	r3, r0
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d001      	beq.n	80053f4 <osThreadNew+0x140>
          hTask = NULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053f4:	693b      	ldr	r3, [r7, #16]
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b00c      	add	sp, #48	; 0x30
 80053fc:	bdb0      	pop	{r4, r5, r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	20001ec4 	.word	0x20001ec4

08005404 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a06      	ldr	r2, [pc, #24]	; (800542c <vApplicationGetIdleTaskMemory+0x28>)
 8005414:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a05      	ldr	r2, [pc, #20]	; (8005430 <vApplicationGetIdleTaskMemory+0x2c>)
 800541a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2280      	movs	r2, #128	; 0x80
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	46bd      	mov	sp, r7
 8005426:	b004      	add	sp, #16
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	20001ec8 	.word	0x20001ec8
 8005430:	20001f84 	.word	0x20001f84

08005434 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a06      	ldr	r2, [pc, #24]	; (800545c <vApplicationGetTimerTaskMemory+0x28>)
 8005444:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4a05      	ldr	r2, [pc, #20]	; (8005460 <vApplicationGetTimerTaskMemory+0x2c>)
 800544a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2280      	movs	r2, #128	; 0x80
 8005450:	0052      	lsls	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b004      	add	sp, #16
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20002184 	.word	0x20002184
 8005460:	20002240 	.word	0x20002240

08005464 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3308      	adds	r3, #8
 8005470:	001a      	movs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	4252      	negs	r2, r2
 800547c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3308      	adds	r3, #8
 8005482:	001a      	movs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3308      	adds	r3, #8
 800548c:	001a      	movs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}

080054a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b002      	add	sp, #8
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]
}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}

080054fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3301      	adds	r3, #1
 800550e:	d103      	bne.n	8005518 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	e00c      	b.n	8005532 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3308      	adds	r3, #8
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e002      	b.n	8005526 <vListInsert+0x2c>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d2f6      	bcs.n	8005520 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	601a      	str	r2, [r3, #0]
}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	b004      	add	sp, #16
 8005564:	bd80      	pop	{r7, pc}

08005566 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6892      	ldr	r2, [r2, #8]
 800557c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6852      	ldr	r2, [r2, #4]
 8005586:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	429a      	cmp	r2, r3
 8005590:	d103      	bne.n	800559a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	1e5a      	subs	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
}
 80055ae:	0018      	movs	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b004      	add	sp, #16
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <xQueueGenericReset+0x18>
 80055ca:	b672      	cpsid	i
 80055cc:	e7fe      	b.n	80055cc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80055ce:	f001 fdd7 	bl	8007180 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	434b      	muls	r3, r1
 80055e0:	18d2      	adds	r2, r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fc:	1e59      	subs	r1, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	434b      	muls	r3, r1
 8005604:	18d2      	adds	r2, r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2244      	movs	r2, #68	; 0x44
 800560e:	21ff      	movs	r1, #255	; 0xff
 8005610:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2245      	movs	r2, #69	; 0x45
 8005616:	21ff      	movs	r1, #255	; 0xff
 8005618:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10d      	bne.n	800563c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d013      	beq.n	8005650 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3310      	adds	r3, #16
 800562c:	0018      	movs	r0, r3
 800562e:	f000 ffcf 	bl	80065d0 <xTaskRemoveFromEventList>
 8005632:	1e03      	subs	r3, r0, #0
 8005634:	d00c      	beq.n	8005650 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005636:	f001 fd93 	bl	8007160 <vPortYield>
 800563a:	e009      	b.n	8005650 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3310      	adds	r3, #16
 8005640:	0018      	movs	r0, r3
 8005642:	f7ff ff0f 	bl	8005464 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3324      	adds	r3, #36	; 0x24
 800564a:	0018      	movs	r0, r3
 800564c:	f7ff ff0a 	bl	8005464 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005650:	f001 fda8 	bl	80071a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005654:	2301      	movs	r3, #1
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b004      	add	sp, #16
 800565c:	bd80      	pop	{r7, pc}

0800565e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800565e:	b590      	push	{r4, r7, lr}
 8005660:	b089      	sub	sp, #36	; 0x24
 8005662:	af02      	add	r7, sp, #8
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <xQueueGenericCreateStatic+0x18>
 8005672:	b672      	cpsid	i
 8005674:	e7fe      	b.n	8005674 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <xQueueGenericCreateStatic+0x22>
 800567c:	b672      	cpsid	i
 800567e:	e7fe      	b.n	800567e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <xQueueGenericCreateStatic+0x2e>
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <xQueueGenericCreateStatic+0x32>
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <xQueueGenericCreateStatic+0x34>
 8005690:	2300      	movs	r3, #0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <xQueueGenericCreateStatic+0x3c>
 8005696:	b672      	cpsid	i
 8005698:	e7fe      	b.n	8005698 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d102      	bne.n	80056a6 <xQueueGenericCreateStatic+0x48>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <xQueueGenericCreateStatic+0x4c>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <xQueueGenericCreateStatic+0x4e>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <xQueueGenericCreateStatic+0x56>
 80056b0:	b672      	cpsid	i
 80056b2:	e7fe      	b.n	80056b2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056b4:	2350      	movs	r3, #80	; 0x50
 80056b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b50      	cmp	r3, #80	; 0x50
 80056bc:	d001      	beq.n	80056c2 <xQueueGenericCreateStatic+0x64>
 80056be:	b672      	cpsid	i
 80056c0:	e7fe      	b.n	80056c0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2246      	movs	r2, #70	; 0x46
 80056d0:	2101      	movs	r1, #1
 80056d2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056d4:	2328      	movs	r3, #40	; 0x28
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	781c      	ldrb	r4, [r3, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	0023      	movs	r3, r4
 80056e6:	f000 f805 	bl	80056f4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056ea:	697b      	ldr	r3, [r7, #20]
	}
 80056ec:	0018      	movs	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b007      	add	sp, #28
 80056f2:	bd90      	pop	{r4, r7, pc}

080056f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	001a      	movs	r2, r3
 8005702:	1cfb      	adds	r3, r7, #3
 8005704:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d103      	bne.n	8005714 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	e002      	b.n	800571a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2101      	movs	r1, #1
 800572a:	0018      	movs	r0, r3
 800572c:	f7ff ff43 	bl	80055b6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	1cfa      	adds	r2, r7, #3
 8005734:	214c      	movs	r1, #76	; 0x4c
 8005736:	7812      	ldrb	r2, [r2, #0]
 8005738:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	46bd      	mov	sp, r7
 800573e:	b004      	add	sp, #16
 8005740:	bd80      	pop	{r7, pc}

08005742 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b08a      	sub	sp, #40	; 0x28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005750:	2300      	movs	r3, #0
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <xQueueGenericSend+0x20>
 800575e:	b672      	cpsid	i
 8005760:	e7fe      	b.n	8005760 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d103      	bne.n	8005770 <xQueueGenericSend+0x2e>
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <xQueueGenericSend+0x32>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <xQueueGenericSend+0x34>
 8005774:	2300      	movs	r3, #0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <xQueueGenericSend+0x3c>
 800577a:	b672      	cpsid	i
 800577c:	e7fe      	b.n	800577c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d103      	bne.n	800578c <xQueueGenericSend+0x4a>
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <xQueueGenericSend+0x4e>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <xQueueGenericSend+0x50>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <xQueueGenericSend+0x58>
 8005796:	b672      	cpsid	i
 8005798:	e7fe      	b.n	8005798 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800579a:	f001 f8b7 	bl	800690c <xTaskGetSchedulerState>
 800579e:	1e03      	subs	r3, r0, #0
 80057a0:	d102      	bne.n	80057a8 <xQueueGenericSend+0x66>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <xQueueGenericSend+0x6a>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <xQueueGenericSend+0x6c>
 80057ac:	2300      	movs	r3, #0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <xQueueGenericSend+0x74>
 80057b2:	b672      	cpsid	i
 80057b4:	e7fe      	b.n	80057b4 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057b6:	f001 fce3 	bl	8007180 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d302      	bcc.n	80057cc <xQueueGenericSend+0x8a>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d11e      	bne.n	800580a <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	0018      	movs	r0, r3
 80057d4:	f000 f99f 	bl	8005b16 <prvCopyDataToQueue>
 80057d8:	0003      	movs	r3, r0
 80057da:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	3324      	adds	r3, #36	; 0x24
 80057e8:	0018      	movs	r0, r3
 80057ea:	f000 fef1 	bl	80065d0 <xTaskRemoveFromEventList>
 80057ee:	1e03      	subs	r3, r0, #0
 80057f0:	d007      	beq.n	8005802 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057f2:	f001 fcb5 	bl	8007160 <vPortYield>
 80057f6:	e004      	b.n	8005802 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057fe:	f001 fcaf 	bl	8007160 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005802:	f001 fccf 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 8005806:	2301      	movs	r3, #1
 8005808:	e05b      	b.n	80058c2 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005810:	f001 fcc8 	bl	80071a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005814:	2300      	movs	r3, #0
 8005816:	e054      	b.n	80058c2 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800581e:	2314      	movs	r3, #20
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	0018      	movs	r0, r3
 8005824:	f000 ff30 	bl	8006688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800582c:	f001 fcba 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005830:	f000 fcd6 	bl	80061e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005834:	f001 fca4 	bl	8007180 <vPortEnterCritical>
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	2244      	movs	r2, #68	; 0x44
 800583c:	5c9b      	ldrb	r3, [r3, r2]
 800583e:	b25b      	sxtb	r3, r3
 8005840:	3301      	adds	r3, #1
 8005842:	d103      	bne.n	800584c <xQueueGenericSend+0x10a>
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	2244      	movs	r2, #68	; 0x44
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2245      	movs	r2, #69	; 0x45
 8005850:	5c9b      	ldrb	r3, [r3, r2]
 8005852:	b25b      	sxtb	r3, r3
 8005854:	3301      	adds	r3, #1
 8005856:	d103      	bne.n	8005860 <xQueueGenericSend+0x11e>
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	2245      	movs	r2, #69	; 0x45
 800585c:	2100      	movs	r1, #0
 800585e:	5499      	strb	r1, [r3, r2]
 8005860:	f001 fca0 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005864:	1d3a      	adds	r2, r7, #4
 8005866:	2314      	movs	r3, #20
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	0011      	movs	r1, r2
 800586c:	0018      	movs	r0, r3
 800586e:	f000 ff1f 	bl	80066b0 <xTaskCheckForTimeOut>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d11e      	bne.n	80058b4 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	0018      	movs	r0, r3
 800587a:	f000 fa51 	bl	8005d20 <prvIsQueueFull>
 800587e:	1e03      	subs	r3, r0, #0
 8005880:	d011      	beq.n	80058a6 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	3310      	adds	r3, #16
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	0011      	movs	r1, r2
 800588a:	0018      	movs	r0, r3
 800588c:	f000 fe5c 	bl	8006548 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	0018      	movs	r0, r3
 8005894:	f000 f9d0 	bl	8005c38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005898:	f000 fcae 	bl	80061f8 <xTaskResumeAll>
 800589c:	1e03      	subs	r3, r0, #0
 800589e:	d18a      	bne.n	80057b6 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80058a0:	f001 fc5e 	bl	8007160 <vPortYield>
 80058a4:	e787      	b.n	80057b6 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 f9c5 	bl	8005c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ae:	f000 fca3 	bl	80061f8 <xTaskResumeAll>
 80058b2:	e780      	b.n	80057b6 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 f9be 	bl	8005c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058bc:	f000 fc9c 	bl	80061f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058c0:	2300      	movs	r3, #0
		}
	}
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b00a      	add	sp, #40	; 0x28
 80058c8:	bd80      	pop	{r7, pc}

080058ca <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058ca:	b590      	push	{r4, r7, lr}
 80058cc:	b089      	sub	sp, #36	; 0x24
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <xQueueGenericSendFromISR+0x1c>
 80058e2:	b672      	cpsid	i
 80058e4:	e7fe      	b.n	80058e4 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d103      	bne.n	80058f4 <xQueueGenericSendFromISR+0x2a>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <xQueueGenericSendFromISR+0x2e>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <xQueueGenericSendFromISR+0x30>
 80058f8:	2300      	movs	r3, #0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <xQueueGenericSendFromISR+0x38>
 80058fe:	b672      	cpsid	i
 8005900:	e7fe      	b.n	8005900 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d103      	bne.n	8005910 <xQueueGenericSendFromISR+0x46>
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <xQueueGenericSendFromISR+0x4a>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <xQueueGenericSendFromISR+0x4c>
 8005914:	2300      	movs	r3, #0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <xQueueGenericSendFromISR+0x54>
 800591a:	b672      	cpsid	i
 800591c:	e7fe      	b.n	800591c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800591e:	f001 fc59 	bl	80071d4 <ulSetInterruptMaskFromISR>
 8005922:	0003      	movs	r3, r0
 8005924:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <xQueueGenericSendFromISR+0x6e>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d12e      	bne.n	8005996 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005938:	2413      	movs	r4, #19
 800593a:	193b      	adds	r3, r7, r4
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	2145      	movs	r1, #69	; 0x45
 8005940:	5c52      	ldrb	r2, [r2, r1]
 8005942:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	0018      	movs	r0, r3
 800594c:	f000 f8e3 	bl	8005b16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005950:	193b      	adds	r3, r7, r4
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	b25b      	sxtb	r3, r3
 8005956:	3301      	adds	r3, #1
 8005958:	d111      	bne.n	800597e <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	d016      	beq.n	8005990 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	3324      	adds	r3, #36	; 0x24
 8005966:	0018      	movs	r0, r3
 8005968:	f000 fe32 	bl	80065d0 <xTaskRemoveFromEventList>
 800596c:	1e03      	subs	r3, r0, #0
 800596e:	d00f      	beq.n	8005990 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e008      	b.n	8005990 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800597e:	2313      	movs	r3, #19
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	b259      	sxtb	r1, r3
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2245      	movs	r2, #69	; 0x45
 800598e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005990:	2301      	movs	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
		{
 8005994:	e001      	b.n	800599a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	0018      	movs	r0, r3
 800599e:	f001 fc1f 	bl	80071e0 <vClearInterruptMaskFromISR>

	return xReturn;
 80059a2:	69fb      	ldr	r3, [r7, #28]
}
 80059a4:	0018      	movs	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b009      	add	sp, #36	; 0x24
 80059aa:	bd90      	pop	{r4, r7, pc}

080059ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <xQueueReceive+0x1e>
 80059c6:	b672      	cpsid	i
 80059c8:	e7fe      	b.n	80059c8 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d103      	bne.n	80059d8 <xQueueReceive+0x2c>
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <xQueueReceive+0x30>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <xQueueReceive+0x32>
 80059dc:	2300      	movs	r3, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <xQueueReceive+0x3a>
 80059e2:	b672      	cpsid	i
 80059e4:	e7fe      	b.n	80059e4 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059e6:	f000 ff91 	bl	800690c <xTaskGetSchedulerState>
 80059ea:	1e03      	subs	r3, r0, #0
 80059ec:	d102      	bne.n	80059f4 <xQueueReceive+0x48>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <xQueueReceive+0x4c>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <xQueueReceive+0x4e>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <xQueueReceive+0x56>
 80059fe:	b672      	cpsid	i
 8005a00:	e7fe      	b.n	8005a00 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a02:	f001 fbbd 	bl	8007180 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01a      	beq.n	8005a48 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	0011      	movs	r1, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f000 f8e7 	bl	8005bec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	3310      	adds	r3, #16
 8005a32:	0018      	movs	r0, r3
 8005a34:	f000 fdcc 	bl	80065d0 <xTaskRemoveFromEventList>
 8005a38:	1e03      	subs	r3, r0, #0
 8005a3a:	d001      	beq.n	8005a40 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a3c:	f001 fb90 	bl	8007160 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a40:	f001 fbb0 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e062      	b.n	8005b0e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a4e:	f001 fba9 	bl	80071a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e05b      	b.n	8005b0e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a5c:	2314      	movs	r3, #20
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	0018      	movs	r0, r3
 8005a62:	f000 fe11 	bl	8006688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a66:	2301      	movs	r3, #1
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a6a:	f001 fb9b 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a6e:	f000 fbb7 	bl	80061e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a72:	f001 fb85 	bl	8007180 <vPortEnterCritical>
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	2244      	movs	r2, #68	; 0x44
 8005a7a:	5c9b      	ldrb	r3, [r3, r2]
 8005a7c:	b25b      	sxtb	r3, r3
 8005a7e:	3301      	adds	r3, #1
 8005a80:	d103      	bne.n	8005a8a <xQueueReceive+0xde>
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	2244      	movs	r2, #68	; 0x44
 8005a86:	2100      	movs	r1, #0
 8005a88:	5499      	strb	r1, [r3, r2]
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	2245      	movs	r2, #69	; 0x45
 8005a8e:	5c9b      	ldrb	r3, [r3, r2]
 8005a90:	b25b      	sxtb	r3, r3
 8005a92:	3301      	adds	r3, #1
 8005a94:	d103      	bne.n	8005a9e <xQueueReceive+0xf2>
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	2245      	movs	r2, #69	; 0x45
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	5499      	strb	r1, [r3, r2]
 8005a9e:	f001 fb81 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aa2:	1d3a      	adds	r2, r7, #4
 8005aa4:	2314      	movs	r3, #20
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	0011      	movs	r1, r2
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f000 fe00 	bl	80066b0 <xTaskCheckForTimeOut>
 8005ab0:	1e03      	subs	r3, r0, #0
 8005ab2:	d11e      	bne.n	8005af2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f000 f91c 	bl	8005cf4 <prvIsQueueEmpty>
 8005abc:	1e03      	subs	r3, r0, #0
 8005abe:	d011      	beq.n	8005ae4 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	3324      	adds	r3, #36	; 0x24
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	0011      	movs	r1, r2
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f000 fd3d 	bl	8006548 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f000 f8b1 	bl	8005c38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ad6:	f000 fb8f 	bl	80061f8 <xTaskResumeAll>
 8005ada:	1e03      	subs	r3, r0, #0
 8005adc:	d191      	bne.n	8005a02 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005ade:	f001 fb3f 	bl	8007160 <vPortYield>
 8005ae2:	e78e      	b.n	8005a02 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 f8a6 	bl	8005c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aec:	f000 fb84 	bl	80061f8 <xTaskResumeAll>
 8005af0:	e787      	b.n	8005a02 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f000 f89f 	bl	8005c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005afa:	f000 fb7d 	bl	80061f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 f8f7 	bl	8005cf4 <prvIsQueueEmpty>
 8005b06:	1e03      	subs	r3, r0, #0
 8005b08:	d100      	bne.n	8005b0c <xQueueReceive+0x160>
 8005b0a:	e77a      	b.n	8005a02 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b00a      	add	sp, #40	; 0x28
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10e      	bne.n	8005b52 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d14e      	bne.n	8005bda <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f000 feff 	bl	8006944 <xTaskPriorityDisinherit>
 8005b46:	0003      	movs	r3, r0
 8005b48:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	605a      	str	r2, [r3, #4]
 8005b50:	e043      	b.n	8005bda <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d119      	bne.n	8005b8c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6898      	ldr	r0, [r3, #8]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	0019      	movs	r1, r3
 8005b64:	f001 fd70 	bl	8007648 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	18d2      	adds	r2, r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d32b      	bcc.n	8005bda <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	609a      	str	r2, [r3, #8]
 8005b8a:	e026      	b.n	8005bda <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68d8      	ldr	r0, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	0019      	movs	r1, r3
 8005b98:	f001 fd56 	bl	8007648 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	18d2      	adds	r2, r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d207      	bcs.n	8005bc8 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	425b      	negs	r3, r3
 8005bc2:	18d2      	adds	r2, r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d105      	bne.n	8005bda <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005be2:	697b      	ldr	r3, [r7, #20]
}
 8005be4:	0018      	movs	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b006      	add	sp, #24
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	18d2      	adds	r2, r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d303      	bcc.n	8005c20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68d9      	ldr	r1, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f001 fd0c 	bl	8007648 <memcpy>
	}
}
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b002      	add	sp, #8
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c40:	f001 fa9e 	bl	8007180 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c44:	230f      	movs	r3, #15
 8005c46:	18fb      	adds	r3, r7, r3
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	2145      	movs	r1, #69	; 0x45
 8005c4c:	5c52      	ldrb	r2, [r2, r1]
 8005c4e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c50:	e013      	b.n	8005c7a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3324      	adds	r3, #36	; 0x24
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 fcb6 	bl	80065d0 <xTaskRemoveFromEventList>
 8005c64:	1e03      	subs	r3, r0, #0
 8005c66:	d001      	beq.n	8005c6c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c68:	f000 fd72 	bl	8006750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c6c:	210f      	movs	r1, #15
 8005c6e:	187b      	adds	r3, r7, r1
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	187b      	adds	r3, r7, r1
 8005c78:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c7a:	230f      	movs	r3, #15
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b25b      	sxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dce5      	bgt.n	8005c52 <prvUnlockQueue+0x1a>
 8005c86:	e000      	b.n	8005c8a <prvUnlockQueue+0x52>
					break;
 8005c88:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2245      	movs	r2, #69	; 0x45
 8005c8e:	21ff      	movs	r1, #255	; 0xff
 8005c90:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005c92:	f001 fa87 	bl	80071a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c96:	f001 fa73 	bl	8007180 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c9a:	230e      	movs	r3, #14
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	2144      	movs	r1, #68	; 0x44
 8005ca2:	5c52      	ldrb	r2, [r2, r1]
 8005ca4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ca6:	e013      	b.n	8005cd0 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d016      	beq.n	8005cde <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3310      	adds	r3, #16
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 fc8b 	bl	80065d0 <xTaskRemoveFromEventList>
 8005cba:	1e03      	subs	r3, r0, #0
 8005cbc:	d001      	beq.n	8005cc2 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005cbe:	f000 fd47 	bl	8006750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cc2:	210e      	movs	r1, #14
 8005cc4:	187b      	adds	r3, r7, r1
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	187b      	adds	r3, r7, r1
 8005cce:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cd0:	230e      	movs	r3, #14
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	b25b      	sxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	dce5      	bgt.n	8005ca8 <prvUnlockQueue+0x70>
 8005cdc:	e000      	b.n	8005ce0 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005cde:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2244      	movs	r2, #68	; 0x44
 8005ce4:	21ff      	movs	r1, #255	; 0xff
 8005ce6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005ce8:	f001 fa5c 	bl	80071a4 <vPortExitCritical>
}
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b004      	add	sp, #16
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cfc:	f001 fa40 	bl	8007180 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d102      	bne.n	8005d0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	e001      	b.n	8005d12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d12:	f001 fa47 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 8005d16:	68fb      	ldr	r3, [r7, #12]
}
 8005d18:	0018      	movs	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b004      	add	sp, #16
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d28:	f001 fa2a 	bl	8007180 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d102      	bne.n	8005d3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e001      	b.n	8005d42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d42:	f001 fa2f 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b004      	add	sp, #16
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e015      	b.n	8005d8c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d60:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <vQueueAddToRegistry+0x4c>)
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	00d2      	lsls	r2, r2, #3
 8005d66:	58d3      	ldr	r3, [r2, r3]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10c      	bne.n	8005d86 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <vQueueAddToRegistry+0x4c>)
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	00d2      	lsls	r2, r2, #3
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d76:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <vQueueAddToRegistry+0x4c>)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	18d3      	adds	r3, r2, r3
 8005d7e:	3304      	adds	r3, #4
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d84:	e006      	b.n	8005d94 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b07      	cmp	r3, #7
 8005d90:	d9e6      	bls.n	8005d60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b004      	add	sp, #16
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20002640 	.word	0x20002640

08005da0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005db0:	f001 f9e6 	bl	8007180 <vPortEnterCritical>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2244      	movs	r2, #68	; 0x44
 8005db8:	5c9b      	ldrb	r3, [r3, r2]
 8005dba:	b25b      	sxtb	r3, r3
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	d103      	bne.n	8005dc8 <vQueueWaitForMessageRestricted+0x28>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2244      	movs	r2, #68	; 0x44
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5499      	strb	r1, [r3, r2]
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2245      	movs	r2, #69	; 0x45
 8005dcc:	5c9b      	ldrb	r3, [r3, r2]
 8005dce:	b25b      	sxtb	r3, r3
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	d103      	bne.n	8005ddc <vQueueWaitForMessageRestricted+0x3c>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2245      	movs	r2, #69	; 0x45
 8005dd8:	2100      	movs	r1, #0
 8005dda:	5499      	strb	r1, [r3, r2]
 8005ddc:	f001 f9e2 	bl	80071a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	3324      	adds	r3, #36	; 0x24
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	0018      	movs	r0, r3
 8005df2:	f000 fbc7 	bl	8006584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f7ff ff1d 	bl	8005c38 <prvUnlockQueue>
	}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b006      	add	sp, #24
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e06:	b590      	push	{r4, r7, lr}
 8005e08:	b08d      	sub	sp, #52	; 0x34
 8005e0a:	af04      	add	r7, sp, #16
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <xTaskCreateStatic+0x18>
 8005e1a:	b672      	cpsid	i
 8005e1c:	e7fe      	b.n	8005e1c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <xTaskCreateStatic+0x22>
 8005e24:	b672      	cpsid	i
 8005e26:	e7fe      	b.n	8005e26 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e28:	23bc      	movs	r3, #188	; 0xbc
 8005e2a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2bbc      	cmp	r3, #188	; 0xbc
 8005e30:	d001      	beq.n	8005e36 <xTaskCreateStatic+0x30>
 8005e32:	b672      	cpsid	i
 8005e34:	e7fe      	b.n	8005e34 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d020      	beq.n	8005e7e <xTaskCreateStatic+0x78>
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01d      	beq.n	8005e7e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e44:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	22b9      	movs	r2, #185	; 0xb9
 8005e50:	2102      	movs	r1, #2
 8005e52:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e54:	683c      	ldr	r4, [r7, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	9303      	str	r3, [sp, #12]
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	9302      	str	r3, [sp, #8]
 8005e64:	2318      	movs	r3, #24
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	0023      	movs	r3, r4
 8005e70:	f000 f858 	bl	8005f24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	0018      	movs	r0, r3
 8005e78:	f000 f8ec 	bl	8006054 <prvAddNewTaskToReadyList>
 8005e7c:	e001      	b.n	8005e82 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e82:	69bb      	ldr	r3, [r7, #24]
	}
 8005e84:	0018      	movs	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b009      	add	sp, #36	; 0x24
 8005e8a:	bd90      	pop	{r4, r7, pc}

08005e8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e8c:	b590      	push	{r4, r7, lr}
 8005e8e:	b08d      	sub	sp, #52	; 0x34
 8005e90:	af04      	add	r7, sp, #16
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	1dbb      	adds	r3, r7, #6
 8005e9a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9c:	1dbb      	adds	r3, r7, #6
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f001 fa04 	bl	80072b0 <pvPortMalloc>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d010      	beq.n	8005ed4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005eb2:	20bc      	movs	r0, #188	; 0xbc
 8005eb4:	f001 f9fc 	bl	80072b0 <pvPortMalloc>
 8005eb8:	0003      	movs	r3, r0
 8005eba:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ec8:	e006      	b.n	8005ed8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f001 fa95 	bl	80073fc <vPortFree>
 8005ed2:	e001      	b.n	8005ed8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01a      	beq.n	8005f14 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	22b9      	movs	r2, #185	; 0xb9
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ee6:	1dbb      	adds	r3, r7, #6
 8005ee8:	881a      	ldrh	r2, [r3, #0]
 8005eea:	683c      	ldr	r4, [r7, #0]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9303      	str	r3, [sp, #12]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	9302      	str	r3, [sp, #8]
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	0023      	movs	r3, r4
 8005f02:	f000 f80f 	bl	8005f24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f000 f8a3 	bl	8006054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e002      	b.n	8005f1a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f14:	2301      	movs	r3, #1
 8005f16:	425b      	negs	r3, r3
 8005f18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b009      	add	sp, #36	; 0x24
 8005f22:	bd90      	pop	{r4, r7, pc}

08005f24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	001a      	movs	r2, r3
 8005f3c:	21a5      	movs	r1, #165	; 0xa5
 8005f3e:	f001 fb8c 	bl	800765a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	493e      	ldr	r1, [pc, #248]	; (8006044 <prvInitialiseNewTask+0x120>)
 8005f4a:	468c      	mov	ip, r1
 8005f4c:	4463      	add	r3, ip
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	18d3      	adds	r3, r2, r3
 8005f52:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2207      	movs	r2, #7
 8005f58:	4393      	bics	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2207      	movs	r2, #7
 8005f60:	4013      	ands	r3, r2
 8005f62:	d001      	beq.n	8005f68 <prvInitialiseNewTask+0x44>
 8005f64:	b672      	cpsid	i
 8005f66:	e7fe      	b.n	8005f66 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e013      	b.n	8005f96 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	18d3      	adds	r3, r2, r3
 8005f74:	7818      	ldrb	r0, [r3, #0]
 8005f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f78:	2134      	movs	r1, #52	; 0x34
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	18d3      	adds	r3, r2, r3
 8005f7e:	185b      	adds	r3, r3, r1
 8005f80:	1c02      	adds	r2, r0, #0
 8005f82:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	18d3      	adds	r3, r2, r3
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d006      	beq.n	8005f9e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	3301      	adds	r3, #1
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b0f      	cmp	r3, #15
 8005f9a:	d9e8      	bls.n	8005f6e <prvInitialiseNewTask+0x4a>
 8005f9c:	e000      	b.n	8005fa0 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005f9e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2243      	movs	r2, #67	; 0x43
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	2b37      	cmp	r3, #55	; 0x37
 8005fac:	d901      	bls.n	8005fb2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fae:	2337      	movs	r3, #55	; 0x37
 8005fb0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	6a3a      	ldr	r2, [r7, #32]
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	6a3a      	ldr	r2, [r7, #32]
 8005fbc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7ff fa69 	bl	80054a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	3318      	adds	r3, #24
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f7ff fa64 	bl	80054a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	2238      	movs	r2, #56	; 0x38
 8005fe2:	1ad2      	subs	r2, r2, r3
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	22b4      	movs	r2, #180	; 0xb4
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	22b8      	movs	r2, #184	; 0xb8
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	3354      	adds	r3, #84	; 0x54
 8006002:	2260      	movs	r2, #96	; 0x60
 8006004:	2100      	movs	r1, #0
 8006006:	0018      	movs	r0, r3
 8006008:	f001 fb27 	bl	800765a <memset>
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	4a0e      	ldr	r2, [pc, #56]	; (8006048 <prvInitialiseNewTask+0x124>)
 8006010:	659a      	str	r2, [r3, #88]	; 0x58
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	4a0d      	ldr	r2, [pc, #52]	; (800604c <prvInitialiseNewTask+0x128>)
 8006016:	65da      	str	r2, [r3, #92]	; 0x5c
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	4a0d      	ldr	r2, [pc, #52]	; (8006050 <prvInitialiseNewTask+0x12c>)
 800601c:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	68f9      	ldr	r1, [r7, #12]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	0018      	movs	r0, r3
 8006026:	f001 f80d 	bl	8007044 <pxPortInitialiseStack>
 800602a:	0002      	movs	r2, r0
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800603a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800603c:	46c0      	nop			; (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	b006      	add	sp, #24
 8006042:	bd80      	pop	{r7, pc}
 8006044:	3fffffff 	.word	0x3fffffff
 8006048:	0800794c 	.word	0x0800794c
 800604c:	0800796c 	.word	0x0800796c
 8006050:	0800792c 	.word	0x0800792c

08006054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800605c:	f001 f890 	bl	8007180 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006060:	4b2a      	ldr	r3, [pc, #168]	; (800610c <prvAddNewTaskToReadyList+0xb8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <prvAddNewTaskToReadyList+0xb8>)
 8006068:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800606a:	4b29      	ldr	r3, [pc, #164]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006072:	4b27      	ldr	r3, [pc, #156]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006078:	4b24      	ldr	r3, [pc, #144]	; (800610c <prvAddNewTaskToReadyList+0xb8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d110      	bne.n	80060a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006080:	f000 fb80 	bl	8006784 <prvInitialiseTaskLists>
 8006084:	e00d      	b.n	80060a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006086:	4b23      	ldr	r3, [pc, #140]	; (8006114 <prvAddNewTaskToReadyList+0xc0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800608e:	4b20      	ldr	r3, [pc, #128]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	429a      	cmp	r2, r3
 800609a:	d802      	bhi.n	80060a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800609c:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060a2:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <prvAddNewTaskToReadyList+0xc4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <prvAddNewTaskToReadyList+0xc4>)
 80060aa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <prvAddNewTaskToReadyList+0xc4>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b8:	4b18      	ldr	r3, [pc, #96]	; (800611c <prvAddNewTaskToReadyList+0xc8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d903      	bls.n	80060c8 <prvAddNewTaskToReadyList+0x74>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c4:	4b15      	ldr	r3, [pc, #84]	; (800611c <prvAddNewTaskToReadyList+0xc8>)
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	0013      	movs	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	189b      	adds	r3, r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4a12      	ldr	r2, [pc, #72]	; (8006120 <prvAddNewTaskToReadyList+0xcc>)
 80060d6:	189a      	adds	r2, r3, r2
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	0019      	movs	r1, r3
 80060de:	0010      	movs	r0, r2
 80060e0:	f7ff f9e9 	bl	80054b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060e4:	f001 f85e 	bl	80071a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <prvAddNewTaskToReadyList+0xc0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d201      	bcs.n	8006102 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060fe:	f001 f82f 	bl	8007160 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	46bd      	mov	sp, r7
 8006106:	b002      	add	sp, #8
 8006108:	bd80      	pop	{r7, pc}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	20002b54 	.word	0x20002b54
 8006110:	20002680 	.word	0x20002680
 8006114:	20002b60 	.word	0x20002b60
 8006118:	20002b70 	.word	0x20002b70
 800611c:	20002b5c 	.word	0x20002b5c
 8006120:	20002684 	.word	0x20002684

08006124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006132:	003a      	movs	r2, r7
 8006134:	1d39      	adds	r1, r7, #4
 8006136:	2308      	movs	r3, #8
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	0018      	movs	r0, r3
 800613c:	f7ff f962 	bl	8005404 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006140:	683c      	ldr	r4, [r7, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	491e      	ldr	r1, [pc, #120]	; (80061c0 <vTaskStartScheduler+0x9c>)
 8006148:	481e      	ldr	r0, [pc, #120]	; (80061c4 <vTaskStartScheduler+0xa0>)
 800614a:	9202      	str	r2, [sp, #8]
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	2300      	movs	r3, #0
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	2300      	movs	r3, #0
 8006154:	0022      	movs	r2, r4
 8006156:	f7ff fe56 	bl	8005e06 <xTaskCreateStatic>
 800615a:	0002      	movs	r2, r0
 800615c:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <vTaskStartScheduler+0xa4>)
 800615e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006160:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <vTaskStartScheduler+0xa4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006168:	2301      	movs	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e001      	b.n	8006172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d103      	bne.n	8006180 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006178:	f000 fc94 	bl	8006aa4 <xTimerCreateTimerTask>
 800617c:	0003      	movs	r3, r0
 800617e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d113      	bne.n	80061ae <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006186:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006188:	4b10      	ldr	r3, [pc, #64]	; (80061cc <vTaskStartScheduler+0xa8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3354      	adds	r3, #84	; 0x54
 800618e:	001a      	movs	r2, r3
 8006190:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <vTaskStartScheduler+0xac>)
 8006192:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <vTaskStartScheduler+0xb0>)
 8006196:	2201      	movs	r2, #1
 8006198:	4252      	negs	r2, r2
 800619a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <vTaskStartScheduler+0xb4>)
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061a2:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <vTaskStartScheduler+0xb8>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061a8:	f000 ffb6 	bl	8007118 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061ac:	e004      	b.n	80061b8 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3301      	adds	r3, #1
 80061b2:	d101      	bne.n	80061b8 <vTaskStartScheduler+0x94>
 80061b4:	b672      	cpsid	i
 80061b6:	e7fe      	b.n	80061b6 <vTaskStartScheduler+0x92>
}
 80061b8:	46c0      	nop			; (mov r8, r8)
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b005      	add	sp, #20
 80061be:	bd90      	pop	{r4, r7, pc}
 80061c0:	08007868 	.word	0x08007868
 80061c4:	08006765 	.word	0x08006765
 80061c8:	20002b78 	.word	0x20002b78
 80061cc:	20002680 	.word	0x20002680
 80061d0:	20001c18 	.word	0x20001c18
 80061d4:	20002b74 	.word	0x20002b74
 80061d8:	20002b60 	.word	0x20002b60
 80061dc:	20002b58 	.word	0x20002b58

080061e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <vTaskSuspendAll+0x14>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	4b02      	ldr	r3, [pc, #8]	; (80061f4 <vTaskSuspendAll+0x14>)
 80061ec:	601a      	str	r2, [r3, #0]
}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20002b7c 	.word	0x20002b7c

080061f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006206:	4b3a      	ldr	r3, [pc, #232]	; (80062f0 <xTaskResumeAll+0xf8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <xTaskResumeAll+0x1a>
 800620e:	b672      	cpsid	i
 8006210:	e7fe      	b.n	8006210 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006212:	f000 ffb5 	bl	8007180 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006216:	4b36      	ldr	r3, [pc, #216]	; (80062f0 <xTaskResumeAll+0xf8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	1e5a      	subs	r2, r3, #1
 800621c:	4b34      	ldr	r3, [pc, #208]	; (80062f0 <xTaskResumeAll+0xf8>)
 800621e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006220:	4b33      	ldr	r3, [pc, #204]	; (80062f0 <xTaskResumeAll+0xf8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d15b      	bne.n	80062e0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006228:	4b32      	ldr	r3, [pc, #200]	; (80062f4 <xTaskResumeAll+0xfc>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d057      	beq.n	80062e0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006230:	e02f      	b.n	8006292 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006232:	4b31      	ldr	r3, [pc, #196]	; (80062f8 <xTaskResumeAll+0x100>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3318      	adds	r3, #24
 800623e:	0018      	movs	r0, r3
 8006240:	f7ff f991 	bl	8005566 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3304      	adds	r3, #4
 8006248:	0018      	movs	r0, r3
 800624a:	f7ff f98c 	bl	8005566 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	4b2a      	ldr	r3, [pc, #168]	; (80062fc <xTaskResumeAll+0x104>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d903      	bls.n	8006262 <xTaskResumeAll+0x6a>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	4b27      	ldr	r3, [pc, #156]	; (80062fc <xTaskResumeAll+0x104>)
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	0013      	movs	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	189b      	adds	r3, r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4a24      	ldr	r2, [pc, #144]	; (8006300 <xTaskResumeAll+0x108>)
 8006270:	189a      	adds	r2, r3, r2
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3304      	adds	r3, #4
 8006276:	0019      	movs	r1, r3
 8006278:	0010      	movs	r0, r2
 800627a:	f7ff f91c 	bl	80054b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006282:	4b20      	ldr	r3, [pc, #128]	; (8006304 <xTaskResumeAll+0x10c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	429a      	cmp	r2, r3
 800628a:	d302      	bcc.n	8006292 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800628c:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <xTaskResumeAll+0x110>)
 800628e:	2201      	movs	r2, #1
 8006290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006292:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <xTaskResumeAll+0x100>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1cb      	bne.n	8006232 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062a0:	f000 fb10 	bl	80068c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062a4:	4b19      	ldr	r3, [pc, #100]	; (800630c <xTaskResumeAll+0x114>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00f      	beq.n	80062d0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062b0:	f000 f83c 	bl	800632c <xTaskIncrementTick>
 80062b4:	1e03      	subs	r3, r0, #0
 80062b6:	d002      	beq.n	80062be <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <xTaskResumeAll+0x110>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f2      	bne.n	80062b0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80062ca:	4b10      	ldr	r3, [pc, #64]	; (800630c <xTaskResumeAll+0x114>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062d0:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <xTaskResumeAll+0x110>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062dc:	f000 ff40 	bl	8007160 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e0:	f000 ff60 	bl	80071a4 <vPortExitCritical>

	return xAlreadyYielded;
 80062e4:	68bb      	ldr	r3, [r7, #8]
}
 80062e6:	0018      	movs	r0, r3
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b004      	add	sp, #16
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	20002b7c 	.word	0x20002b7c
 80062f4:	20002b54 	.word	0x20002b54
 80062f8:	20002b14 	.word	0x20002b14
 80062fc:	20002b5c 	.word	0x20002b5c
 8006300:	20002684 	.word	0x20002684
 8006304:	20002680 	.word	0x20002680
 8006308:	20002b68 	.word	0x20002b68
 800630c:	20002b64 	.word	0x20002b64

08006310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006316:	4b04      	ldr	r3, [pc, #16]	; (8006328 <xTaskGetTickCount+0x18>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800631c:	687b      	ldr	r3, [r7, #4]
}
 800631e:	0018      	movs	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	b002      	add	sp, #8
 8006324:	bd80      	pop	{r7, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	20002b58 	.word	0x20002b58

0800632c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006336:	4b4c      	ldr	r3, [pc, #304]	; (8006468 <xTaskIncrementTick+0x13c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d000      	beq.n	8006340 <xTaskIncrementTick+0x14>
 800633e:	e083      	b.n	8006448 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006340:	4b4a      	ldr	r3, [pc, #296]	; (800646c <xTaskIncrementTick+0x140>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3301      	adds	r3, #1
 8006346:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006348:	4b48      	ldr	r3, [pc, #288]	; (800646c <xTaskIncrementTick+0x140>)
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d117      	bne.n	8006384 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006354:	4b46      	ldr	r3, [pc, #280]	; (8006470 <xTaskIncrementTick+0x144>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <xTaskIncrementTick+0x36>
 800635e:	b672      	cpsid	i
 8006360:	e7fe      	b.n	8006360 <xTaskIncrementTick+0x34>
 8006362:	4b43      	ldr	r3, [pc, #268]	; (8006470 <xTaskIncrementTick+0x144>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	4b42      	ldr	r3, [pc, #264]	; (8006474 <xTaskIncrementTick+0x148>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b40      	ldr	r3, [pc, #256]	; (8006470 <xTaskIncrementTick+0x144>)
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	4b40      	ldr	r3, [pc, #256]	; (8006474 <xTaskIncrementTick+0x148>)
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	4b40      	ldr	r3, [pc, #256]	; (8006478 <xTaskIncrementTick+0x14c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	4b3e      	ldr	r3, [pc, #248]	; (8006478 <xTaskIncrementTick+0x14c>)
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f000 faa0 	bl	80068c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006384:	4b3d      	ldr	r3, [pc, #244]	; (800647c <xTaskIncrementTick+0x150>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	429a      	cmp	r2, r3
 800638c:	d34e      	bcc.n	800642c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800638e:	4b38      	ldr	r3, [pc, #224]	; (8006470 <xTaskIncrementTick+0x144>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <xTaskIncrementTick+0x70>
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <xTaskIncrementTick+0x72>
 800639c:	2300      	movs	r3, #0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a2:	4b36      	ldr	r3, [pc, #216]	; (800647c <xTaskIncrementTick+0x150>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	4252      	negs	r2, r2
 80063a8:	601a      	str	r2, [r3, #0]
					break;
 80063aa:	e03f      	b.n	800642c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063ac:	4b30      	ldr	r3, [pc, #192]	; (8006470 <xTaskIncrementTick+0x144>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d203      	bcs.n	80063cc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063c4:	4b2d      	ldr	r3, [pc, #180]	; (800647c <xTaskIncrementTick+0x150>)
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	601a      	str	r2, [r3, #0]
						break;
 80063ca:	e02f      	b.n	800642c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	3304      	adds	r3, #4
 80063d0:	0018      	movs	r0, r3
 80063d2:	f7ff f8c8 	bl	8005566 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	3318      	adds	r3, #24
 80063e2:	0018      	movs	r0, r3
 80063e4:	f7ff f8bf 	bl	8005566 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	4b24      	ldr	r3, [pc, #144]	; (8006480 <xTaskIncrementTick+0x154>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d903      	bls.n	80063fc <xTaskIncrementTick+0xd0>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	4b21      	ldr	r3, [pc, #132]	; (8006480 <xTaskIncrementTick+0x154>)
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	0013      	movs	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	189b      	adds	r3, r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <xTaskIncrementTick+0x158>)
 800640a:	189a      	adds	r2, r3, r2
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	3304      	adds	r3, #4
 8006410:	0019      	movs	r1, r3
 8006412:	0010      	movs	r0, r2
 8006414:	f7ff f84f 	bl	80054b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641c:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <xTaskIncrementTick+0x15c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	429a      	cmp	r2, r3
 8006424:	d3b3      	bcc.n	800638e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006426:	2301      	movs	r3, #1
 8006428:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800642a:	e7b0      	b.n	800638e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800642c:	4b16      	ldr	r3, [pc, #88]	; (8006488 <xTaskIncrementTick+0x15c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	4914      	ldr	r1, [pc, #80]	; (8006484 <xTaskIncrementTick+0x158>)
 8006434:	0013      	movs	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	189b      	adds	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	585b      	ldr	r3, [r3, r1]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d907      	bls.n	8006452 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006442:	2301      	movs	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e004      	b.n	8006452 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006448:	4b10      	ldr	r3, [pc, #64]	; (800648c <xTaskIncrementTick+0x160>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	4b0f      	ldr	r3, [pc, #60]	; (800648c <xTaskIncrementTick+0x160>)
 8006450:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <xTaskIncrementTick+0x164>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800645a:	2301      	movs	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800645e:	697b      	ldr	r3, [r7, #20]
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b006      	add	sp, #24
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20002b7c 	.word	0x20002b7c
 800646c:	20002b58 	.word	0x20002b58
 8006470:	20002b0c 	.word	0x20002b0c
 8006474:	20002b10 	.word	0x20002b10
 8006478:	20002b6c 	.word	0x20002b6c
 800647c:	20002b74 	.word	0x20002b74
 8006480:	20002b5c 	.word	0x20002b5c
 8006484:	20002684 	.word	0x20002684
 8006488:	20002680 	.word	0x20002680
 800648c:	20002b64 	.word	0x20002b64
 8006490:	20002b68 	.word	0x20002b68

08006494 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800649a:	4b25      	ldr	r3, [pc, #148]	; (8006530 <vTaskSwitchContext+0x9c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064a2:	4b24      	ldr	r3, [pc, #144]	; (8006534 <vTaskSwitchContext+0xa0>)
 80064a4:	2201      	movs	r2, #1
 80064a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064a8:	e03d      	b.n	8006526 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80064aa:	4b22      	ldr	r3, [pc, #136]	; (8006534 <vTaskSwitchContext+0xa0>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064b0:	4b21      	ldr	r3, [pc, #132]	; (8006538 <vTaskSwitchContext+0xa4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	e007      	b.n	80064c8 <vTaskSwitchContext+0x34>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <vTaskSwitchContext+0x2e>
 80064be:	b672      	cpsid	i
 80064c0:	e7fe      	b.n	80064c0 <vTaskSwitchContext+0x2c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	607b      	str	r3, [r7, #4]
 80064c8:	491c      	ldr	r1, [pc, #112]	; (800653c <vTaskSwitchContext+0xa8>)
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	0013      	movs	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	585b      	ldr	r3, [r3, r1]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0ee      	beq.n	80064b8 <vTaskSwitchContext+0x24>
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	0013      	movs	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	189b      	adds	r3, r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4a15      	ldr	r2, [pc, #84]	; (800653c <vTaskSwitchContext+0xa8>)
 80064e6:	189b      	adds	r3, r3, r2
 80064e8:	603b      	str	r3, [r7, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	605a      	str	r2, [r3, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d104      	bne.n	800650a <vTaskSwitchContext+0x76>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <vTaskSwitchContext+0xac>)
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	4b08      	ldr	r3, [pc, #32]	; (8006538 <vTaskSwitchContext+0xa4>)
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800651a:	4b09      	ldr	r3, [pc, #36]	; (8006540 <vTaskSwitchContext+0xac>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3354      	adds	r3, #84	; 0x54
 8006520:	001a      	movs	r2, r3
 8006522:	4b08      	ldr	r3, [pc, #32]	; (8006544 <vTaskSwitchContext+0xb0>)
 8006524:	601a      	str	r2, [r3, #0]
}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	46bd      	mov	sp, r7
 800652a:	b002      	add	sp, #8
 800652c:	bd80      	pop	{r7, pc}
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	20002b7c 	.word	0x20002b7c
 8006534:	20002b68 	.word	0x20002b68
 8006538:	20002b5c 	.word	0x20002b5c
 800653c:	20002684 	.word	0x20002684
 8006540:	20002680 	.word	0x20002680
 8006544:	20001c18 	.word	0x20001c18

08006548 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <vTaskPlaceOnEventList+0x14>
 8006558:	b672      	cpsid	i
 800655a:	e7fe      	b.n	800655a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <vTaskPlaceOnEventList+0x38>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3318      	adds	r3, #24
 8006562:	001a      	movs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	0011      	movs	r1, r2
 8006568:	0018      	movs	r0, r3
 800656a:	f7fe ffc6 	bl	80054fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2101      	movs	r1, #1
 8006572:	0018      	movs	r0, r3
 8006574:	f000 fa42 	bl	80069fc <prvAddCurrentTaskToDelayedList>
}
 8006578:	46c0      	nop			; (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20002680 	.word	0x20002680

08006584 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <vTaskPlaceOnEventListRestricted+0x16>
 8006596:	b672      	cpsid	i
 8006598:	e7fe      	b.n	8006598 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <vTaskPlaceOnEventListRestricted+0x48>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3318      	adds	r3, #24
 80065a0:	001a      	movs	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	0011      	movs	r1, r2
 80065a6:	0018      	movs	r0, r3
 80065a8:	f7fe ff85 	bl	80054b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80065b2:	2301      	movs	r3, #1
 80065b4:	425b      	negs	r3, r3
 80065b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	0011      	movs	r1, r2
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 fa1c 	bl	80069fc <prvAddCurrentTaskToDelayedList>
	}
 80065c4:	46c0      	nop			; (mov r8, r8)
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b004      	add	sp, #16
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20002680 	.word	0x20002680

080065d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <xTaskRemoveFromEventList+0x1a>
 80065e6:	b672      	cpsid	i
 80065e8:	e7fe      	b.n	80065e8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3318      	adds	r3, #24
 80065ee:	0018      	movs	r0, r3
 80065f0:	f7fe ffb9 	bl	8005566 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065f4:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <xTaskRemoveFromEventList+0xa0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d11d      	bne.n	8006638 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	3304      	adds	r3, #4
 8006600:	0018      	movs	r0, r3
 8006602:	f7fe ffb0 	bl	8005566 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660a:	4b1a      	ldr	r3, [pc, #104]	; (8006674 <xTaskRemoveFromEventList+0xa4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d903      	bls.n	800661a <xTaskRemoveFromEventList+0x4a>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006616:	4b17      	ldr	r3, [pc, #92]	; (8006674 <xTaskRemoveFromEventList+0xa4>)
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661e:	0013      	movs	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	189b      	adds	r3, r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4a14      	ldr	r2, [pc, #80]	; (8006678 <xTaskRemoveFromEventList+0xa8>)
 8006628:	189a      	adds	r2, r3, r2
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	3304      	adds	r3, #4
 800662e:	0019      	movs	r1, r3
 8006630:	0010      	movs	r0, r2
 8006632:	f7fe ff40 	bl	80054b6 <vListInsertEnd>
 8006636:	e007      	b.n	8006648 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	3318      	adds	r3, #24
 800663c:	001a      	movs	r2, r3
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <xTaskRemoveFromEventList+0xac>)
 8006640:	0011      	movs	r1, r2
 8006642:	0018      	movs	r0, r3
 8006644:	f7fe ff37 	bl	80054b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <xTaskRemoveFromEventList+0xb0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	429a      	cmp	r2, r3
 8006654:	d905      	bls.n	8006662 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006656:	2301      	movs	r3, #1
 8006658:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800665a:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <xTaskRemoveFromEventList+0xb4>)
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	e001      	b.n	8006666 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006666:	68fb      	ldr	r3, [r7, #12]
}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	b004      	add	sp, #16
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20002b7c 	.word	0x20002b7c
 8006674:	20002b5c 	.word	0x20002b5c
 8006678:	20002684 	.word	0x20002684
 800667c:	20002b14 	.word	0x20002b14
 8006680:	20002680 	.word	0x20002680
 8006684:	20002b68 	.word	0x20002b68

08006688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <vTaskInternalSetTimeOutState+0x20>)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006698:	4b04      	ldr	r3, [pc, #16]	; (80066ac <vTaskInternalSetTimeOutState+0x24>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	605a      	str	r2, [r3, #4]
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b002      	add	sp, #8
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20002b6c 	.word	0x20002b6c
 80066ac:	20002b58 	.word	0x20002b58

080066b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <xTaskCheckForTimeOut+0x14>
 80066c0:	b672      	cpsid	i
 80066c2:	e7fe      	b.n	80066c2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <xTaskCheckForTimeOut+0x1e>
 80066ca:	b672      	cpsid	i
 80066cc:	e7fe      	b.n	80066cc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80066ce:	f000 fd57 	bl	8007180 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066d2:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <xTaskCheckForTimeOut+0x98>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3301      	adds	r3, #1
 80066e8:	d102      	bne.n	80066f0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	e024      	b.n	800673a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	4b15      	ldr	r3, [pc, #84]	; (800674c <xTaskCheckForTimeOut+0x9c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d007      	beq.n	800670c <xTaskCheckForTimeOut+0x5c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	429a      	cmp	r2, r3
 8006704:	d302      	bcc.n	800670c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006706:	2301      	movs	r3, #1
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	e016      	b.n	800673a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	429a      	cmp	r2, r3
 8006714:	d20c      	bcs.n	8006730 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	1ad2      	subs	r2, r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0018      	movs	r0, r3
 8006726:	f7ff ffaf 	bl	8006688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e004      	b.n	800673a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006736:	2301      	movs	r3, #1
 8006738:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800673a:	f000 fd33 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 800673e:	697b      	ldr	r3, [r7, #20]
}
 8006740:	0018      	movs	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	b006      	add	sp, #24
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20002b58 	.word	0x20002b58
 800674c:	20002b6c 	.word	0x20002b6c

08006750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006754:	4b02      	ldr	r3, [pc, #8]	; (8006760 <vTaskMissedYield+0x10>)
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]
}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20002b68 	.word	0x20002b68

08006764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800676c:	f000 f84e 	bl	800680c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006770:	4b03      	ldr	r3, [pc, #12]	; (8006780 <prvIdleTask+0x1c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d9f9      	bls.n	800676c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006778:	f000 fcf2 	bl	8007160 <vPortYield>
		prvCheckTasksWaitingTermination();
 800677c:	e7f6      	b.n	800676c <prvIdleTask+0x8>
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	20002684 	.word	0x20002684

08006784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800678a:	2300      	movs	r3, #0
 800678c:	607b      	str	r3, [r7, #4]
 800678e:	e00c      	b.n	80067aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	0013      	movs	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	189b      	adds	r3, r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4a14      	ldr	r2, [pc, #80]	; (80067ec <prvInitialiseTaskLists+0x68>)
 800679c:	189b      	adds	r3, r3, r2
 800679e:	0018      	movs	r0, r3
 80067a0:	f7fe fe60 	bl	8005464 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3301      	adds	r3, #1
 80067a8:	607b      	str	r3, [r7, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b37      	cmp	r3, #55	; 0x37
 80067ae:	d9ef      	bls.n	8006790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067b0:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <prvInitialiseTaskLists+0x6c>)
 80067b2:	0018      	movs	r0, r3
 80067b4:	f7fe fe56 	bl	8005464 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067b8:	4b0e      	ldr	r3, [pc, #56]	; (80067f4 <prvInitialiseTaskLists+0x70>)
 80067ba:	0018      	movs	r0, r3
 80067bc:	f7fe fe52 	bl	8005464 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067c0:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <prvInitialiseTaskLists+0x74>)
 80067c2:	0018      	movs	r0, r3
 80067c4:	f7fe fe4e 	bl	8005464 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <prvInitialiseTaskLists+0x78>)
 80067ca:	0018      	movs	r0, r3
 80067cc:	f7fe fe4a 	bl	8005464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <prvInitialiseTaskLists+0x7c>)
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7fe fe46 	bl	8005464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <prvInitialiseTaskLists+0x80>)
 80067da:	4a05      	ldr	r2, [pc, #20]	; (80067f0 <prvInitialiseTaskLists+0x6c>)
 80067dc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067de:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <prvInitialiseTaskLists+0x84>)
 80067e0:	4a04      	ldr	r2, [pc, #16]	; (80067f4 <prvInitialiseTaskLists+0x70>)
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	46c0      	nop			; (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b002      	add	sp, #8
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20002684 	.word	0x20002684
 80067f0:	20002ae4 	.word	0x20002ae4
 80067f4:	20002af8 	.word	0x20002af8
 80067f8:	20002b14 	.word	0x20002b14
 80067fc:	20002b28 	.word	0x20002b28
 8006800:	20002b40 	.word	0x20002b40
 8006804:	20002b0c 	.word	0x20002b0c
 8006808:	20002b10 	.word	0x20002b10

0800680c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006812:	e01a      	b.n	800684a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006814:	f000 fcb4 	bl	8007180 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006818:	4b10      	ldr	r3, [pc, #64]	; (800685c <prvCheckTasksWaitingTermination+0x50>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	0018      	movs	r0, r3
 8006826:	f7fe fe9e 	bl	8005566 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800682a:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <prvCheckTasksWaitingTermination+0x54>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	1e5a      	subs	r2, r3, #1
 8006830:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <prvCheckTasksWaitingTermination+0x54>)
 8006832:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <prvCheckTasksWaitingTermination+0x58>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	1e5a      	subs	r2, r3, #1
 800683a:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <prvCheckTasksWaitingTermination+0x58>)
 800683c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800683e:	f000 fcb1 	bl	80071a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	0018      	movs	r0, r3
 8006846:	f000 f80f 	bl	8006868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <prvCheckTasksWaitingTermination+0x58>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e0      	bne.n	8006814 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	46c0      	nop			; (mov r8, r8)
 8006856:	46bd      	mov	sp, r7
 8006858:	b002      	add	sp, #8
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20002b28 	.word	0x20002b28
 8006860:	20002b54 	.word	0x20002b54
 8006864:	20002b3c 	.word	0x20002b3c

08006868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3354      	adds	r3, #84	; 0x54
 8006874:	0018      	movs	r0, r3
 8006876:	f000 ff05 	bl	8007684 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	22b9      	movs	r2, #185	; 0xb9
 800687e:	5c9b      	ldrb	r3, [r3, r2]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	0018      	movs	r0, r3
 800688a:	f000 fdb7 	bl	80073fc <vPortFree>
				vPortFree( pxTCB );
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	0018      	movs	r0, r3
 8006892:	f000 fdb3 	bl	80073fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006896:	e010      	b.n	80068ba <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	22b9      	movs	r2, #185	; 0xb9
 800689c:	5c9b      	ldrb	r3, [r3, r2]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d104      	bne.n	80068ac <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0018      	movs	r0, r3
 80068a6:	f000 fda9 	bl	80073fc <vPortFree>
	}
 80068aa:	e006      	b.n	80068ba <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	22b9      	movs	r2, #185	; 0xb9
 80068b0:	5c9b      	ldrb	r3, [r3, r2]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d001      	beq.n	80068ba <prvDeleteTCB+0x52>
 80068b6:	b672      	cpsid	i
 80068b8:	e7fe      	b.n	80068b8 <prvDeleteTCB+0x50>
	}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	46bd      	mov	sp, r7
 80068be:	b002      	add	sp, #8
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ca:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <prvResetNextTaskUnblockTime+0x40>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <prvResetNextTaskUnblockTime+0x14>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <prvResetNextTaskUnblockTime+0x16>
 80068d8:	2300      	movs	r3, #0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068de:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <prvResetNextTaskUnblockTime+0x44>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	4252      	negs	r2, r2
 80068e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068e6:	e008      	b.n	80068fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <prvResetNextTaskUnblockTime+0x40>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	4b04      	ldr	r3, [pc, #16]	; (8006908 <prvResetNextTaskUnblockTime+0x44>)
 80068f8:	601a      	str	r2, [r3, #0]
}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b002      	add	sp, #8
 8006900:	bd80      	pop	{r7, pc}
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	20002b0c 	.word	0x20002b0c
 8006908:	20002b74 	.word	0x20002b74

0800690c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006912:	4b0a      	ldr	r3, [pc, #40]	; (800693c <xTaskGetSchedulerState+0x30>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800691a:	2301      	movs	r3, #1
 800691c:	607b      	str	r3, [r7, #4]
 800691e:	e008      	b.n	8006932 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <xTaskGetSchedulerState+0x34>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d102      	bne.n	800692e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006928:	2302      	movs	r3, #2
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	e001      	b.n	8006932 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800692e:	2300      	movs	r3, #0
 8006930:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006932:	687b      	ldr	r3, [r7, #4]
	}
 8006934:	0018      	movs	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	b002      	add	sp, #8
 800693a:	bd80      	pop	{r7, pc}
 800693c:	20002b60 	.word	0x20002b60
 8006940:	20002b7c 	.word	0x20002b7c

08006944 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d044      	beq.n	80069e4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800695a:	4b25      	ldr	r3, [pc, #148]	; (80069f0 <xTaskPriorityDisinherit+0xac>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	d001      	beq.n	8006968 <xTaskPriorityDisinherit+0x24>
 8006964:	b672      	cpsid	i
 8006966:	e7fe      	b.n	8006966 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <xTaskPriorityDisinherit+0x30>
 8006970:	b672      	cpsid	i
 8006972:	e7fe      	b.n	8006972 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006978:	1e5a      	subs	r2, r3, #1
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006986:	429a      	cmp	r2, r3
 8006988:	d02c      	beq.n	80069e4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698e:	2b00      	cmp	r3, #0
 8006990:	d128      	bne.n	80069e4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	3304      	adds	r3, #4
 8006996:	0018      	movs	r0, r3
 8006998:	f7fe fde5 	bl	8005566 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	2238      	movs	r2, #56	; 0x38
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <xTaskPriorityDisinherit+0xb0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d903      	bls.n	80069c4 <xTaskPriorityDisinherit+0x80>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <xTaskPriorityDisinherit+0xb0>)
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	0013      	movs	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	189b      	adds	r3, r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <xTaskPriorityDisinherit+0xb4>)
 80069d2:	189a      	adds	r2, r3, r2
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	3304      	adds	r3, #4
 80069d8:	0019      	movs	r1, r3
 80069da:	0010      	movs	r0, r2
 80069dc:	f7fe fd6b 	bl	80054b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069e0:	2301      	movs	r3, #1
 80069e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069e4:	68fb      	ldr	r3, [r7, #12]
	}
 80069e6:	0018      	movs	r0, r3
 80069e8:	46bd      	mov	sp, r7
 80069ea:	b004      	add	sp, #16
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	20002680 	.word	0x20002680
 80069f4:	20002b5c 	.word	0x20002b5c
 80069f8:	20002684 	.word	0x20002684

080069fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a06:	4b21      	ldr	r3, [pc, #132]	; (8006a8c <prvAddCurrentTaskToDelayedList+0x90>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a0c:	4b20      	ldr	r3, [pc, #128]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3304      	adds	r3, #4
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7fe fda7 	bl	8005566 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	d10b      	bne.n	8006a36 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a24:	4b1a      	ldr	r3, [pc, #104]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	4b1a      	ldr	r3, [pc, #104]	; (8006a94 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a2c:	0011      	movs	r1, r2
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f7fe fd41 	bl	80054b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a34:	e026      	b.n	8006a84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	18d3      	adds	r3, r2, r3
 8006a3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a3e:	4b14      	ldr	r3, [pc, #80]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d209      	bcs.n	8006a62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a4e:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3304      	adds	r3, #4
 8006a58:	0019      	movs	r1, r3
 8006a5a:	0010      	movs	r0, r2
 8006a5c:	f7fe fd4d 	bl	80054fa <vListInsert>
}
 8006a60:	e010      	b.n	8006a84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a62:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	0019      	movs	r1, r3
 8006a6e:	0010      	movs	r0, r2
 8006a70:	f7fe fd43 	bl	80054fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a74:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d202      	bcs.n	8006a84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a7e:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	46c0      	nop			; (mov r8, r8)
 8006a86:	46bd      	mov	sp, r7
 8006a88:	b004      	add	sp, #16
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20002b58 	.word	0x20002b58
 8006a90:	20002680 	.word	0x20002680
 8006a94:	20002b40 	.word	0x20002b40
 8006a98:	20002b10 	.word	0x20002b10
 8006a9c:	20002b0c 	.word	0x20002b0c
 8006aa0:	20002b74 	.word	0x20002b74

08006aa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006aa4:	b590      	push	{r4, r7, lr}
 8006aa6:	b089      	sub	sp, #36	; 0x24
 8006aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006aae:	f000 fa87 	bl	8006fc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ab2:	4b17      	ldr	r3, [pc, #92]	; (8006b10 <xTimerCreateTimerTask+0x6c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d020      	beq.n	8006afc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ac2:	003a      	movs	r2, r7
 8006ac4:	1d39      	adds	r1, r7, #4
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	0018      	movs	r0, r3
 8006acc:	f7fe fcb2 	bl	8005434 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ad0:	683c      	ldr	r4, [r7, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	490f      	ldr	r1, [pc, #60]	; (8006b14 <xTimerCreateTimerTask+0x70>)
 8006ad8:	480f      	ldr	r0, [pc, #60]	; (8006b18 <xTimerCreateTimerTask+0x74>)
 8006ada:	9202      	str	r2, [sp, #8]
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	2306      	movs	r3, #6
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	0022      	movs	r2, r4
 8006ae6:	f7ff f98e 	bl	8005e06 <xTaskCreateStatic>
 8006aea:	0002      	movs	r2, r0
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <xTimerCreateTimerTask+0x78>)
 8006aee:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006af0:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <xTimerCreateTimerTask+0x78>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006af8:	2301      	movs	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <xTimerCreateTimerTask+0x62>
 8006b02:	b672      	cpsid	i
 8006b04:	e7fe      	b.n	8006b04 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006b06:	68fb      	ldr	r3, [r7, #12]
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b005      	add	sp, #20
 8006b0e:	bd90      	pop	{r4, r7, pc}
 8006b10:	20002bb0 	.word	0x20002bb0
 8006b14:	08007870 	.word	0x08007870
 8006b18:	08006c25 	.word	0x08006c25
 8006b1c:	20002bb4 	.word	0x20002bb4

08006b20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b08b      	sub	sp, #44	; 0x2c
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <xTimerGenericCommand+0x1c>
 8006b38:	b672      	cpsid	i
 8006b3a:	e7fe      	b.n	8006b3a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b3c:	4b1c      	ldr	r3, [pc, #112]	; (8006bb0 <xTimerGenericCommand+0x90>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d030      	beq.n	8006ba6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b44:	2414      	movs	r4, #20
 8006b46:	193b      	adds	r3, r7, r4
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b4c:	193b      	adds	r3, r7, r4
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006b52:	193b      	adds	r3, r7, r4
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	dc19      	bgt.n	8006b92 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b5e:	f7ff fed5 	bl	800690c <xTaskGetSchedulerState>
 8006b62:	0003      	movs	r3, r0
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d109      	bne.n	8006b7c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b68:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <xTimerGenericCommand+0x90>)
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b6e:	1939      	adds	r1, r7, r4
 8006b70:	2300      	movs	r3, #0
 8006b72:	f7fe fde6 	bl	8005742 <xQueueGenericSend>
 8006b76:	0003      	movs	r3, r0
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7a:	e014      	b.n	8006ba6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <xTimerGenericCommand+0x90>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	2314      	movs	r3, #20
 8006b82:	18f9      	adds	r1, r7, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	2200      	movs	r2, #0
 8006b88:	f7fe fddb 	bl	8005742 <xQueueGenericSend>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b90:	e009      	b.n	8006ba6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b92:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <xTimerGenericCommand+0x90>)
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	2314      	movs	r3, #20
 8006b9a:	18f9      	adds	r1, r7, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f7fe fe94 	bl	80058ca <xQueueGenericSendFromISR>
 8006ba2:	0003      	movs	r3, r0
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ba8:	0018      	movs	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b00b      	add	sp, #44	; 0x2c
 8006bae:	bd90      	pop	{r4, r7, pc}
 8006bb0:	20002bb0 	.word	0x20002bb0

08006bb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bbe:	4b18      	ldr	r3, [pc, #96]	; (8006c20 <prvProcessExpiredTimer+0x6c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f7fe fcca 	bl	8005566 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d119      	bne.n	8006c0e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	18d1      	adds	r1, r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f8b6 	bl	8006d58 <prvInsertTimerInActiveList>
 8006bec:	1e03      	subs	r3, r0, #0
 8006bee:	d00e      	beq.n	8006c0e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	f7ff ff90 	bl	8006b20 <xTimerGenericCommand>
 8006c00:	0003      	movs	r3, r0
 8006c02:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <prvProcessExpiredTimer+0x5a>
 8006c0a:	b672      	cpsid	i
 8006c0c:	e7fe      	b.n	8006c0c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	0010      	movs	r0, r2
 8006c16:	4798      	blx	r3
}
 8006c18:	46c0      	nop			; (mov r8, r8)
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b004      	add	sp, #16
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20002ba8 	.word	0x20002ba8

08006c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c2c:	2308      	movs	r3, #8
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	0018      	movs	r0, r3
 8006c32:	f000 f851 	bl	8006cd8 <prvGetNextExpireTime>
 8006c36:	0003      	movs	r3, r0
 8006c38:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	0011      	movs	r1, r2
 8006c40:	0018      	movs	r0, r3
 8006c42:	f000 f803 	bl	8006c4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c46:	f000 f8c9 	bl	8006ddc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c4a:	e7ef      	b.n	8006c2c <prvTimerTask+0x8>

08006c4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c56:	f7ff fac3 	bl	80061e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f000 f85a 	bl	8006d18 <prvSampleTimeNow>
 8006c64:	0003      	movs	r3, r0
 8006c66:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d129      	bne.n	8006cc2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10c      	bne.n	8006c8e <prvProcessTimerOrBlockTask+0x42>
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d808      	bhi.n	8006c8e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006c7c:	f7ff fabc 	bl	80061f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	0011      	movs	r1, r2
 8006c86:	0018      	movs	r0, r3
 8006c88:	f7ff ff94 	bl	8006bb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c8c:	e01b      	b.n	8006cc6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d006      	beq.n	8006ca2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c94:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <prvProcessTimerOrBlockTask+0x84>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	425a      	negs	r2, r3
 8006c9c:	4153      	adcs	r3, r2
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <prvProcessTimerOrBlockTask+0x88>)
 8006ca4:	6818      	ldr	r0, [r3, #0]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	0019      	movs	r1, r3
 8006cb0:	f7ff f876 	bl	8005da0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cb4:	f7ff faa0 	bl	80061f8 <xTaskResumeAll>
 8006cb8:	1e03      	subs	r3, r0, #0
 8006cba:	d104      	bne.n	8006cc6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8006cbc:	f000 fa50 	bl	8007160 <vPortYield>
}
 8006cc0:	e001      	b.n	8006cc6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006cc2:	f7ff fa99 	bl	80061f8 <xTaskResumeAll>
}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	b004      	add	sp, #16
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	20002bac 	.word	0x20002bac
 8006cd4:	20002bb0 	.word	0x20002bb0

08006cd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <prvGetNextExpireTime+0x3c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	425a      	negs	r2, r3
 8006ce8:	4153      	adcs	r3, r2
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	001a      	movs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d105      	bne.n	8006d06 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cfa:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <prvGetNextExpireTime+0x3c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	e001      	b.n	8006d0a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
}
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b004      	add	sp, #16
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20002ba8 	.word	0x20002ba8

08006d18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d20:	f7ff faf6 	bl	8006310 <xTaskGetTickCount>
 8006d24:	0003      	movs	r3, r0
 8006d26:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <prvSampleTimeNow+0x3c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d205      	bcs.n	8006d3e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006d32:	f000 f8eb 	bl	8006f0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	e002      	b.n	8006d44 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d44:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <prvSampleTimeNow+0x3c>)
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
}
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b004      	add	sp, #16
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20002bb8 	.word	0x20002bb8

08006d58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d812      	bhi.n	8006da4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	1ad2      	subs	r2, r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d302      	bcc.n	8006d92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	e01b      	b.n	8006dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d92:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <prvInsertTimerInActiveList+0x7c>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	0019      	movs	r1, r3
 8006d9c:	0010      	movs	r0, r2
 8006d9e:	f7fe fbac 	bl	80054fa <vListInsert>
 8006da2:	e012      	b.n	8006dca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d206      	bcs.n	8006dba <prvInsertTimerInActiveList+0x62>
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d302      	bcc.n	8006dba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006db4:	2301      	movs	r3, #1
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e007      	b.n	8006dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dba:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <prvInsertTimerInActiveList+0x80>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	0010      	movs	r0, r2
 8006dc6:	f7fe fb98 	bl	80054fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006dca:	697b      	ldr	r3, [r7, #20]
}
 8006dcc:	0018      	movs	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b006      	add	sp, #24
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20002bac 	.word	0x20002bac
 8006dd8:	20002ba8 	.word	0x20002ba8

08006ddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ddc:	b590      	push	{r4, r7, lr}
 8006dde:	b08d      	sub	sp, #52	; 0x34
 8006de0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006de2:	e07f      	b.n	8006ee4 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006de4:	2208      	movs	r2, #8
 8006de6:	18bb      	adds	r3, r7, r2
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	da0f      	bge.n	8006e0e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006dee:	18bb      	adds	r3, r7, r2
 8006df0:	3304      	adds	r3, #4
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <prvProcessReceivedCommands+0x22>
 8006dfa:	b672      	cpsid	i
 8006dfc:	e7fe      	b.n	8006dfc <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	6858      	ldr	r0, [r3, #4]
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	0019      	movs	r1, r3
 8006e0c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e0e:	2208      	movs	r2, #8
 8006e10:	18bb      	adds	r3, r7, r2
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	db64      	blt.n	8006ee2 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e18:	18bb      	adds	r3, r7, r2
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d004      	beq.n	8006e30 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f7fe fb9b 	bl	8005566 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e30:	1d3b      	adds	r3, r7, #4
 8006e32:	0018      	movs	r0, r3
 8006e34:	f7ff ff70 	bl	8006d18 <prvSampleTimeNow>
 8006e38:	0003      	movs	r3, r0
 8006e3a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	18fb      	adds	r3, r7, r3
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b09      	cmp	r3, #9
 8006e44:	d84e      	bhi.n	8006ee4 <prvProcessReceivedCommands+0x108>
 8006e46:	009a      	lsls	r2, r3, #2
 8006e48:	4b2e      	ldr	r3, [pc, #184]	; (8006f04 <prvProcessReceivedCommands+0x128>)
 8006e4a:	18d3      	adds	r3, r2, r3
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e50:	2408      	movs	r4, #8
 8006e52:	193b      	adds	r3, r7, r4
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	18d1      	adds	r1, r2, r3
 8006e5c:	193b      	adds	r3, r7, r4
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	6a38      	ldr	r0, [r7, #32]
 8006e64:	f7ff ff78 	bl	8006d58 <prvInsertTimerInActiveList>
 8006e68:	1e03      	subs	r3, r0, #0
 8006e6a:	d03b      	beq.n	8006ee4 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	0010      	movs	r0, r2
 8006e74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d132      	bne.n	8006ee4 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e7e:	193b      	adds	r3, r7, r4
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	18d2      	adds	r2, r2, r3
 8006e88:	6a38      	ldr	r0, [r7, #32]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2100      	movs	r1, #0
 8006e92:	f7ff fe45 	bl	8006b20 <xTimerGenericCommand>
 8006e96:	0003      	movs	r3, r0
 8006e98:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d121      	bne.n	8006ee4 <prvProcessReceivedCommands+0x108>
 8006ea0:	b672      	cpsid	i
 8006ea2:	e7fe      	b.n	8006ea2 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	18fb      	adds	r3, r7, r3
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <prvProcessReceivedCommands+0xde>
 8006eb6:	b672      	cpsid	i
 8006eb8:	e7fe      	b.n	8006eb8 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	18d1      	adds	r1, r2, r3
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	6a38      	ldr	r0, [r7, #32]
 8006ec8:	f7ff ff46 	bl	8006d58 <prvInsertTimerInActiveList>
					break;
 8006ecc:	e00a      	b.n	8006ee4 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	222c      	movs	r2, #44	; 0x2c
 8006ed2:	5c9b      	ldrb	r3, [r3, r2]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d105      	bne.n	8006ee4 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	0018      	movs	r0, r3
 8006edc:	f000 fa8e 	bl	80073fc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ee0:	e000      	b.n	8006ee4 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006ee2:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <prvProcessReceivedCommands+0x12c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	18b9      	adds	r1, r7, r2
 8006eec:	2200      	movs	r2, #0
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f7fe fd5c 	bl	80059ac <xQueueReceive>
 8006ef4:	1e03      	subs	r3, r0, #0
 8006ef6:	d000      	beq.n	8006efa <prvProcessReceivedCommands+0x11e>
 8006ef8:	e774      	b.n	8006de4 <prvProcessReceivedCommands+0x8>
	}
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	46c0      	nop			; (mov r8, r8)
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b00b      	add	sp, #44	; 0x2c
 8006f02:	bd90      	pop	{r4, r7, pc}
 8006f04:	08007904 	.word	0x08007904
 8006f08:	20002bb0 	.word	0x20002bb0

08006f0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f12:	e03e      	b.n	8006f92 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f14:	4b28      	ldr	r3, [pc, #160]	; (8006fb8 <prvSwitchTimerLists+0xac>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f1e:	4b26      	ldr	r3, [pc, #152]	; (8006fb8 <prvSwitchTimerLists+0xac>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	f7fe fb1a 	bl	8005566 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	0010      	movs	r0, r2
 8006f3a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d126      	bne.n	8006f92 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	18d3      	adds	r3, r2, r3
 8006f4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d90e      	bls.n	8006f74 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f62:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <prvSwitchTimerLists+0xac>)
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	0010      	movs	r0, r2
 8006f6e:	f7fe fac4 	bl	80054fa <vListInsert>
 8006f72:	e00e      	b.n	8006f92 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2100      	movs	r1, #0
 8006f80:	f7ff fdce 	bl	8006b20 <xTimerGenericCommand>
 8006f84:	0003      	movs	r3, r0
 8006f86:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <prvSwitchTimerLists+0x86>
 8006f8e:	b672      	cpsid	i
 8006f90:	e7fe      	b.n	8006f90 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f92:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <prvSwitchTimerLists+0xac>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1bb      	bne.n	8006f14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <prvSwitchTimerLists+0xac>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fa2:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <prvSwitchTimerLists+0xb0>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <prvSwitchTimerLists+0xac>)
 8006fa8:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006faa:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <prvSwitchTimerLists+0xb0>)
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	601a      	str	r2, [r3, #0]
}
 8006fb0:	46c0      	nop			; (mov r8, r8)
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	b006      	add	sp, #24
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20002ba8 	.word	0x20002ba8
 8006fbc:	20002bac 	.word	0x20002bac

08006fc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006fc6:	f000 f8db 	bl	8007180 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006fca:	4b16      	ldr	r3, [pc, #88]	; (8007024 <prvCheckForValidListAndQueue+0x64>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d123      	bne.n	800701a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <prvCheckForValidListAndQueue+0x68>)
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f7fe fa45 	bl	8005464 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fda:	4b14      	ldr	r3, [pc, #80]	; (800702c <prvCheckForValidListAndQueue+0x6c>)
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7fe fa41 	bl	8005464 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006fe2:	4b13      	ldr	r3, [pc, #76]	; (8007030 <prvCheckForValidListAndQueue+0x70>)
 8006fe4:	4a10      	ldr	r2, [pc, #64]	; (8007028 <prvCheckForValidListAndQueue+0x68>)
 8006fe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006fe8:	4b12      	ldr	r3, [pc, #72]	; (8007034 <prvCheckForValidListAndQueue+0x74>)
 8006fea:	4a10      	ldr	r2, [pc, #64]	; (800702c <prvCheckForValidListAndQueue+0x6c>)
 8006fec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fee:	4b12      	ldr	r3, [pc, #72]	; (8007038 <prvCheckForValidListAndQueue+0x78>)
 8006ff0:	4a12      	ldr	r2, [pc, #72]	; (800703c <prvCheckForValidListAndQueue+0x7c>)
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	9100      	str	r1, [sp, #0]
 8006ff6:	2110      	movs	r1, #16
 8006ff8:	200a      	movs	r0, #10
 8006ffa:	f7fe fb30 	bl	800565e <xQueueGenericCreateStatic>
 8006ffe:	0002      	movs	r2, r0
 8007000:	4b08      	ldr	r3, [pc, #32]	; (8007024 <prvCheckForValidListAndQueue+0x64>)
 8007002:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007004:	4b07      	ldr	r3, [pc, #28]	; (8007024 <prvCheckForValidListAndQueue+0x64>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d006      	beq.n	800701a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <prvCheckForValidListAndQueue+0x64>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a0b      	ldr	r2, [pc, #44]	; (8007040 <prvCheckForValidListAndQueue+0x80>)
 8007012:	0011      	movs	r1, r2
 8007014:	0018      	movs	r0, r3
 8007016:	f7fe fe9b 	bl	8005d50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800701a:	f000 f8c3 	bl	80071a4 <vPortExitCritical>
}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20002bb0 	.word	0x20002bb0
 8007028:	20002b80 	.word	0x20002b80
 800702c:	20002b94 	.word	0x20002b94
 8007030:	20002ba8 	.word	0x20002ba8
 8007034:	20002bac 	.word	0x20002bac
 8007038:	20002c5c 	.word	0x20002c5c
 800703c:	20002bbc 	.word	0x20002bbc
 8007040:	08007878 	.word	0x08007878

08007044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3b04      	subs	r3, #4
 8007054:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2280      	movs	r2, #128	; 0x80
 800705a:	0452      	lsls	r2, r2, #17
 800705c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3b04      	subs	r3, #4
 8007062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3b04      	subs	r3, #4
 800706e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007070:	4a08      	ldr	r2, [pc, #32]	; (8007094 <pxPortInitialiseStack+0x50>)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3b14      	subs	r3, #20
 800707a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3b20      	subs	r3, #32
 8007086:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007088:	68fb      	ldr	r3, [r7, #12]
}
 800708a:	0018      	movs	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	b004      	add	sp, #16
 8007090:	bd80      	pop	{r7, pc}
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	08007099 	.word	0x08007099

08007098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800709e:	2300      	movs	r3, #0
 80070a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070a2:	4b08      	ldr	r3, [pc, #32]	; (80070c4 <prvTaskExitError+0x2c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3301      	adds	r3, #1
 80070a8:	d001      	beq.n	80070ae <prvTaskExitError+0x16>
 80070aa:	b672      	cpsid	i
 80070ac:	e7fe      	b.n	80070ac <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80070ae:	b672      	cpsid	i
	while( ulDummy == 0 )
 80070b0:	46c0      	nop			; (mov r8, r8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0fc      	beq.n	80070b2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070b8:	46c0      	nop			; (mov r8, r8)
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	46bd      	mov	sp, r7
 80070be:	b002      	add	sp, #8
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	46c0      	nop			; (mov r8, r8)
 80070c4:	20001c14 	.word	0x20001c14

080070c8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80070cc:	46c0      	nop			; (mov r8, r8)
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80070e0:	4a0b      	ldr	r2, [pc, #44]	; (8007110 <pxCurrentTCBConst2>)
 80070e2:	6813      	ldr	r3, [r2, #0]
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	3020      	adds	r0, #32
 80070e8:	f380 8809 	msr	PSP, r0
 80070ec:	2002      	movs	r0, #2
 80070ee:	f380 8814 	msr	CONTROL, r0
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80070f8:	46ae      	mov	lr, r5
 80070fa:	bc08      	pop	{r3}
 80070fc:	bc04      	pop	{r2}
 80070fe:	b662      	cpsie	i
 8007100:	4718      	bx	r3
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	46c0      	nop			; (mov r8, r8)
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	46c0      	nop			; (mov r8, r8)
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	46c0      	nop			; (mov r8, r8)
 800710e:	46c0      	nop			; (mov r8, r8)

08007110 <pxCurrentTCBConst2>:
 8007110:	20002680 	.word	0x20002680
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007114:	46c0      	nop			; (mov r8, r8)
 8007116:	46c0      	nop			; (mov r8, r8)

08007118 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <xPortStartScheduler+0x40>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <xPortStartScheduler+0x40>)
 8007122:	21ff      	movs	r1, #255	; 0xff
 8007124:	0409      	lsls	r1, r1, #16
 8007126:	430a      	orrs	r2, r1
 8007128:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <xPortStartScheduler+0x40>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <xPortStartScheduler+0x40>)
 8007130:	21ff      	movs	r1, #255	; 0xff
 8007132:	0609      	lsls	r1, r1, #24
 8007134:	430a      	orrs	r2, r1
 8007136:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007138:	f000 f898 	bl	800726c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800713c:	4b07      	ldr	r3, [pc, #28]	; (800715c <xPortStartScheduler+0x44>)
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007142:	f7ff ffcd 	bl	80070e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007146:	f7ff f9a5 	bl	8006494 <vTaskSwitchContext>
	prvTaskExitError();
 800714a:	f7ff ffa5 	bl	8007098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800714e:	2300      	movs	r3, #0
}
 8007150:	0018      	movs	r0, r3
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	e000ed20 	.word	0xe000ed20
 800715c:	20001c14 	.word	0x20001c14

08007160 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007164:	4b05      	ldr	r3, [pc, #20]	; (800717c <vPortYield+0x1c>)
 8007166:	2280      	movs	r2, #128	; 0x80
 8007168:	0552      	lsls	r2, r2, #21
 800716a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800716c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007170:	f3bf 8f6f 	isb	sy
}
 8007174:	46c0      	nop			; (mov r8, r8)
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007184:	b672      	cpsid	i
    uxCriticalNesting++;
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <vPortEnterCritical+0x20>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <vPortEnterCritical+0x20>)
 800718e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007190:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007194:	f3bf 8f6f 	isb	sy
}
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	20001c14 	.word	0x20001c14

080071a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <vPortExitCritical+0x2c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <vPortExitCritical+0x10>
 80071b0:	b672      	cpsid	i
 80071b2:	e7fe      	b.n	80071b2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <vPortExitCritical+0x2c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	1e5a      	subs	r2, r3, #1
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <vPortExitCritical+0x2c>)
 80071bc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80071be:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <vPortExitCritical+0x2c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d100      	bne.n	80071c8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80071c6:	b662      	cpsie	i
    }
}
 80071c8:	46c0      	nop			; (mov r8, r8)
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	46c0      	nop			; (mov r8, r8)
 80071d0:	20001c14 	.word	0x20001c14

080071d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80071d4:	f3ef 8010 	mrs	r0, PRIMASK
 80071d8:	b672      	cpsid	i
 80071da:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	0018      	movs	r0, r3

080071e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80071e0:	f380 8810 	msr	PRIMASK, r0
 80071e4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80071e6:	46c0      	nop			; (mov r8, r8)
	...

080071f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071f0:	f3ef 8009 	mrs	r0, PSP
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <pxCurrentTCBConst>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	3820      	subs	r0, #32
 80071fa:	6010      	str	r0, [r2, #0]
 80071fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80071fe:	4644      	mov	r4, r8
 8007200:	464d      	mov	r5, r9
 8007202:	4656      	mov	r6, sl
 8007204:	465f      	mov	r7, fp
 8007206:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007208:	b508      	push	{r3, lr}
 800720a:	b672      	cpsid	i
 800720c:	f7ff f942 	bl	8006494 <vTaskSwitchContext>
 8007210:	b662      	cpsie	i
 8007212:	bc0c      	pop	{r2, r3}
 8007214:	6811      	ldr	r1, [r2, #0]
 8007216:	6808      	ldr	r0, [r1, #0]
 8007218:	3010      	adds	r0, #16
 800721a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800721c:	46a0      	mov	r8, r4
 800721e:	46a9      	mov	r9, r5
 8007220:	46b2      	mov	sl, r6
 8007222:	46bb      	mov	fp, r7
 8007224:	f380 8809 	msr	PSP, r0
 8007228:	3820      	subs	r0, #32
 800722a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800722c:	4718      	bx	r3
 800722e:	46c0      	nop			; (mov r8, r8)

08007230 <pxCurrentTCBConst>:
 8007230:	20002680 	.word	0x20002680
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007234:	46c0      	nop			; (mov r8, r8)
 8007236:	46c0      	nop			; (mov r8, r8)

08007238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800723e:	f7ff ffc9 	bl	80071d4 <ulSetInterruptMaskFromISR>
 8007242:	0003      	movs	r3, r0
 8007244:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007246:	f7ff f871 	bl	800632c <xTaskIncrementTick>
 800724a:	1e03      	subs	r3, r0, #0
 800724c:	d003      	beq.n	8007256 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800724e:	4b06      	ldr	r3, [pc, #24]	; (8007268 <xPortSysTickHandler+0x30>)
 8007250:	2280      	movs	r2, #128	; 0x80
 8007252:	0552      	lsls	r2, r2, #21
 8007254:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	0018      	movs	r0, r3
 800725a:	f7ff ffc1 	bl	80071e0 <vClearInterruptMaskFromISR>
}
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	46bd      	mov	sp, r7
 8007262:	b002      	add	sp, #8
 8007264:	bd80      	pop	{r7, pc}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <prvSetupTimerInterrupt+0x34>)
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007276:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <prvSetupTimerInterrupt+0x38>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <prvSetupTimerInterrupt+0x3c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	22fa      	movs	r2, #250	; 0xfa
 8007282:	0091      	lsls	r1, r2, #2
 8007284:	0018      	movs	r0, r3
 8007286:	f7f8 ff3f 	bl	8000108 <__udivsi3>
 800728a:	0003      	movs	r3, r0
 800728c:	001a      	movs	r2, r3
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <prvSetupTimerInterrupt+0x40>)
 8007290:	3a01      	subs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007294:	4b02      	ldr	r3, [pc, #8]	; (80072a0 <prvSetupTimerInterrupt+0x34>)
 8007296:	2207      	movs	r2, #7
 8007298:	601a      	str	r2, [r3, #0]
}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	e000e010 	.word	0xe000e010
 80072a4:	e000e018 	.word	0xe000e018
 80072a8:	20001c08 	.word	0x20001c08
 80072ac:	e000e014 	.word	0xe000e014

080072b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80072bc:	f7fe ff90 	bl	80061e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072c0:	4b49      	ldr	r3, [pc, #292]	; (80073e8 <pvPortMalloc+0x138>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072c8:	f000 f8e0 	bl	800748c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072cc:	4b47      	ldr	r3, [pc, #284]	; (80073ec <pvPortMalloc+0x13c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4013      	ands	r3, r2
 80072d4:	d000      	beq.n	80072d8 <pvPortMalloc+0x28>
 80072d6:	e079      	b.n	80073cc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d012      	beq.n	8007304 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80072de:	2208      	movs	r2, #8
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	189b      	adds	r3, r3, r2
 80072e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2207      	movs	r2, #7
 80072ea:	4013      	ands	r3, r2
 80072ec:	d00a      	beq.n	8007304 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2207      	movs	r2, #7
 80072f2:	4393      	bics	r3, r2
 80072f4:	3308      	adds	r3, #8
 80072f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2207      	movs	r2, #7
 80072fc:	4013      	ands	r3, r2
 80072fe:	d001      	beq.n	8007304 <pvPortMalloc+0x54>
 8007300:	b672      	cpsid	i
 8007302:	e7fe      	b.n	8007302 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d060      	beq.n	80073cc <pvPortMalloc+0x11c>
 800730a:	4b39      	ldr	r3, [pc, #228]	; (80073f0 <pvPortMalloc+0x140>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d85b      	bhi.n	80073cc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007314:	4b37      	ldr	r3, [pc, #220]	; (80073f4 <pvPortMalloc+0x144>)
 8007316:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007318:	4b36      	ldr	r3, [pc, #216]	; (80073f4 <pvPortMalloc+0x144>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800731e:	e004      	b.n	800732a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d903      	bls.n	800733c <pvPortMalloc+0x8c>
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f1      	bne.n	8007320 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800733c:	4b2a      	ldr	r3, [pc, #168]	; (80073e8 <pvPortMalloc+0x138>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	429a      	cmp	r2, r3
 8007344:	d042      	beq.n	80073cc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2208      	movs	r2, #8
 800734c:	189b      	adds	r3, r3, r2
 800734e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1ad2      	subs	r2, r2, r3
 8007360:	2308      	movs	r3, #8
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	429a      	cmp	r2, r3
 8007366:	d916      	bls.n	8007396 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	18d3      	adds	r3, r2, r3
 800736e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2207      	movs	r2, #7
 8007374:	4013      	ands	r3, r2
 8007376:	d001      	beq.n	800737c <pvPortMalloc+0xcc>
 8007378:	b672      	cpsid	i
 800737a:	e7fe      	b.n	800737a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	0018      	movs	r0, r3
 8007392:	f000 f8db 	bl	800754c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007396:	4b16      	ldr	r3, [pc, #88]	; (80073f0 <pvPortMalloc+0x140>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <pvPortMalloc+0x140>)
 80073a2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073a4:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <pvPortMalloc+0x140>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <pvPortMalloc+0x148>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d203      	bcs.n	80073b8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <pvPortMalloc+0x140>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <pvPortMalloc+0x148>)
 80073b6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <pvPortMalloc+0x13c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	431a      	orrs	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073cc:	f7fe ff14 	bl	80061f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2207      	movs	r2, #7
 80073d4:	4013      	ands	r3, r2
 80073d6:	d001      	beq.n	80073dc <pvPortMalloc+0x12c>
 80073d8:	b672      	cpsid	i
 80073da:	e7fe      	b.n	80073da <pvPortMalloc+0x12a>
	return pvReturn;
 80073dc:	68fb      	ldr	r3, [r7, #12]
}
 80073de:	0018      	movs	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b006      	add	sp, #24
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	200038b4 	.word	0x200038b4
 80073ec:	200038c0 	.word	0x200038c0
 80073f0:	200038b8 	.word	0x200038b8
 80073f4:	200038ac 	.word	0x200038ac
 80073f8:	200038bc 	.word	0x200038bc

080073fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d035      	beq.n	800747a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800740e:	2308      	movs	r3, #8
 8007410:	425b      	negs	r3, r3
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	18d3      	adds	r3, r2, r3
 8007416:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	4b18      	ldr	r3, [pc, #96]	; (8007484 <vPortFree+0x88>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4013      	ands	r3, r2
 8007426:	d101      	bne.n	800742c <vPortFree+0x30>
 8007428:	b672      	cpsid	i
 800742a:	e7fe      	b.n	800742a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <vPortFree+0x3c>
 8007434:	b672      	cpsid	i
 8007436:	e7fe      	b.n	8007436 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <vPortFree+0x88>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4013      	ands	r3, r2
 8007442:	d01a      	beq.n	800747a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d116      	bne.n	800747a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <vPortFree+0x88>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	43db      	mvns	r3, r3
 8007456:	401a      	ands	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800745c:	f7fe fec0 	bl	80061e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	4b08      	ldr	r3, [pc, #32]	; (8007488 <vPortFree+0x8c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	18d2      	adds	r2, r2, r3
 800746a:	4b07      	ldr	r3, [pc, #28]	; (8007488 <vPortFree+0x8c>)
 800746c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	0018      	movs	r0, r3
 8007472:	f000 f86b 	bl	800754c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007476:	f7fe febf 	bl	80061f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	46bd      	mov	sp, r7
 800747e:	b004      	add	sp, #16
 8007480:	bd80      	pop	{r7, pc}
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	200038c0 	.word	0x200038c0
 8007488:	200038b8 	.word	0x200038b8

0800748c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007492:	23c0      	movs	r3, #192	; 0xc0
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007498:	4b26      	ldr	r3, [pc, #152]	; (8007534 <prvHeapInit+0xa8>)
 800749a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2207      	movs	r2, #7
 80074a0:	4013      	ands	r3, r2
 80074a2:	d00c      	beq.n	80074be <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3307      	adds	r3, #7
 80074a8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2207      	movs	r2, #7
 80074ae:	4393      	bics	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	1ad2      	subs	r2, r2, r3
 80074b8:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <prvHeapInit+0xa8>)
 80074ba:	18d3      	adds	r3, r2, r3
 80074bc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074c2:	4b1d      	ldr	r3, [pc, #116]	; (8007538 <prvHeapInit+0xac>)
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074c8:	4b1b      	ldr	r3, [pc, #108]	; (8007538 <prvHeapInit+0xac>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	18d3      	adds	r3, r2, r3
 80074d4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074d6:	2208      	movs	r2, #8
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2207      	movs	r2, #7
 80074e2:	4393      	bics	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4b14      	ldr	r3, [pc, #80]	; (800753c <prvHeapInit+0xb0>)
 80074ea:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80074ec:	4b13      	ldr	r3, [pc, #76]	; (800753c <prvHeapInit+0xb0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074f4:	4b11      	ldr	r3, [pc, #68]	; (800753c <prvHeapInit+0xb0>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	1ad2      	subs	r2, r2, r3
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800750a:	4b0c      	ldr	r3, [pc, #48]	; (800753c <prvHeapInit+0xb0>)
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <prvHeapInit+0xb4>)
 8007518:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <prvHeapInit+0xb8>)
 8007520:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007522:	4b09      	ldr	r3, [pc, #36]	; (8007548 <prvHeapInit+0xbc>)
 8007524:	2280      	movs	r2, #128	; 0x80
 8007526:	0612      	lsls	r2, r2, #24
 8007528:	601a      	str	r2, [r3, #0]
}
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	46bd      	mov	sp, r7
 800752e:	b004      	add	sp, #16
 8007530:	bd80      	pop	{r7, pc}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	20002cac 	.word	0x20002cac
 8007538:	200038ac 	.word	0x200038ac
 800753c:	200038b4 	.word	0x200038b4
 8007540:	200038bc 	.word	0x200038bc
 8007544:	200038b8 	.word	0x200038b8
 8007548:	200038c0 	.word	0x200038c0

0800754c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007554:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <prvInsertBlockIntoFreeList+0xa8>)
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	e002      	b.n	8007560 <prvInsertBlockIntoFreeList+0x14>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	429a      	cmp	r2, r3
 8007568:	d8f7      	bhi.n	800755a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	18d3      	adds	r3, r2, r3
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	429a      	cmp	r2, r3
 800757a:	d108      	bne.n	800758e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	18d2      	adds	r2, r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	18d2      	adds	r2, r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d118      	bne.n	80075d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <prvInsertBlockIntoFreeList+0xac>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d00d      	beq.n	80075ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	18d2      	adds	r2, r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	e008      	b.n	80075dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <prvInsertBlockIntoFreeList+0xac>)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	e003      	b.n	80075dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d002      	beq.n	80075ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	46bd      	mov	sp, r7
 80075ee:	b004      	add	sp, #16
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	200038ac 	.word	0x200038ac
 80075f8:	200038b4 	.word	0x200038b4

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	2600      	movs	r6, #0
 8007600:	4d0c      	ldr	r5, [pc, #48]	; (8007634 <__libc_init_array+0x38>)
 8007602:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007604:	1b64      	subs	r4, r4, r5
 8007606:	10a4      	asrs	r4, r4, #2
 8007608:	42a6      	cmp	r6, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	2600      	movs	r6, #0
 800760e:	f000 f8f9 	bl	8007804 <_init>
 8007612:	4d0a      	ldr	r5, [pc, #40]	; (800763c <__libc_init_array+0x40>)
 8007614:	4c0a      	ldr	r4, [pc, #40]	; (8007640 <__libc_init_array+0x44>)
 8007616:	1b64      	subs	r4, r4, r5
 8007618:	10a4      	asrs	r4, r4, #2
 800761a:	42a6      	cmp	r6, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	00b3      	lsls	r3, r6, #2
 8007622:	58eb      	ldr	r3, [r5, r3]
 8007624:	4798      	blx	r3
 8007626:	3601      	adds	r6, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	00b3      	lsls	r3, r6, #2
 800762c:	58eb      	ldr	r3, [r5, r3]
 800762e:	4798      	blx	r3
 8007630:	3601      	adds	r6, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	0800798c 	.word	0x0800798c
 8007638:	0800798c 	.word	0x0800798c
 800763c:	0800798c 	.word	0x0800798c
 8007640:	08007990 	.word	0x08007990

08007644 <__retarget_lock_acquire_recursive>:
 8007644:	4770      	bx	lr

08007646 <__retarget_lock_release_recursive>:
 8007646:	4770      	bx	lr

08007648 <memcpy>:
 8007648:	2300      	movs	r3, #0
 800764a:	b510      	push	{r4, lr}
 800764c:	429a      	cmp	r2, r3
 800764e:	d100      	bne.n	8007652 <memcpy+0xa>
 8007650:	bd10      	pop	{r4, pc}
 8007652:	5ccc      	ldrb	r4, [r1, r3]
 8007654:	54c4      	strb	r4, [r0, r3]
 8007656:	3301      	adds	r3, #1
 8007658:	e7f8      	b.n	800764c <memcpy+0x4>

0800765a <memset>:
 800765a:	0003      	movs	r3, r0
 800765c:	1882      	adds	r2, r0, r2
 800765e:	4293      	cmp	r3, r2
 8007660:	d100      	bne.n	8007664 <memset+0xa>
 8007662:	4770      	bx	lr
 8007664:	7019      	strb	r1, [r3, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	e7f9      	b.n	800765e <memset+0x4>

0800766a <cleanup_glue>:
 800766a:	b570      	push	{r4, r5, r6, lr}
 800766c:	000d      	movs	r5, r1
 800766e:	6809      	ldr	r1, [r1, #0]
 8007670:	0004      	movs	r4, r0
 8007672:	2900      	cmp	r1, #0
 8007674:	d001      	beq.n	800767a <cleanup_glue+0x10>
 8007676:	f7ff fff8 	bl	800766a <cleanup_glue>
 800767a:	0029      	movs	r1, r5
 800767c:	0020      	movs	r0, r4
 800767e:	f000 f877 	bl	8007770 <_free_r>
 8007682:	bd70      	pop	{r4, r5, r6, pc}

08007684 <_reclaim_reent>:
 8007684:	4b31      	ldr	r3, [pc, #196]	; (800774c <_reclaim_reent+0xc8>)
 8007686:	b570      	push	{r4, r5, r6, lr}
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	0004      	movs	r4, r0
 800768c:	4283      	cmp	r3, r0
 800768e:	d049      	beq.n	8007724 <_reclaim_reent+0xa0>
 8007690:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <_reclaim_reent+0x28>
 8007696:	2500      	movs	r5, #0
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	42ab      	cmp	r3, r5
 800769c:	d147      	bne.n	800772e <_reclaim_reent+0xaa>
 800769e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076a0:	6819      	ldr	r1, [r3, #0]
 80076a2:	2900      	cmp	r1, #0
 80076a4:	d002      	beq.n	80076ac <_reclaim_reent+0x28>
 80076a6:	0020      	movs	r0, r4
 80076a8:	f000 f862 	bl	8007770 <_free_r>
 80076ac:	6961      	ldr	r1, [r4, #20]
 80076ae:	2900      	cmp	r1, #0
 80076b0:	d002      	beq.n	80076b8 <_reclaim_reent+0x34>
 80076b2:	0020      	movs	r0, r4
 80076b4:	f000 f85c 	bl	8007770 <_free_r>
 80076b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80076ba:	2900      	cmp	r1, #0
 80076bc:	d002      	beq.n	80076c4 <_reclaim_reent+0x40>
 80076be:	0020      	movs	r0, r4
 80076c0:	f000 f856 	bl	8007770 <_free_r>
 80076c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80076c6:	2900      	cmp	r1, #0
 80076c8:	d002      	beq.n	80076d0 <_reclaim_reent+0x4c>
 80076ca:	0020      	movs	r0, r4
 80076cc:	f000 f850 	bl	8007770 <_free_r>
 80076d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80076d2:	2900      	cmp	r1, #0
 80076d4:	d002      	beq.n	80076dc <_reclaim_reent+0x58>
 80076d6:	0020      	movs	r0, r4
 80076d8:	f000 f84a 	bl	8007770 <_free_r>
 80076dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80076de:	2900      	cmp	r1, #0
 80076e0:	d002      	beq.n	80076e8 <_reclaim_reent+0x64>
 80076e2:	0020      	movs	r0, r4
 80076e4:	f000 f844 	bl	8007770 <_free_r>
 80076e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80076ea:	2900      	cmp	r1, #0
 80076ec:	d002      	beq.n	80076f4 <_reclaim_reent+0x70>
 80076ee:	0020      	movs	r0, r4
 80076f0:	f000 f83e 	bl	8007770 <_free_r>
 80076f4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80076f6:	2900      	cmp	r1, #0
 80076f8:	d002      	beq.n	8007700 <_reclaim_reent+0x7c>
 80076fa:	0020      	movs	r0, r4
 80076fc:	f000 f838 	bl	8007770 <_free_r>
 8007700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007702:	2900      	cmp	r1, #0
 8007704:	d002      	beq.n	800770c <_reclaim_reent+0x88>
 8007706:	0020      	movs	r0, r4
 8007708:	f000 f832 	bl	8007770 <_free_r>
 800770c:	69a3      	ldr	r3, [r4, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d008      	beq.n	8007724 <_reclaim_reent+0xa0>
 8007712:	0020      	movs	r0, r4
 8007714:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007716:	4798      	blx	r3
 8007718:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800771a:	2900      	cmp	r1, #0
 800771c:	d002      	beq.n	8007724 <_reclaim_reent+0xa0>
 800771e:	0020      	movs	r0, r4
 8007720:	f7ff ffa3 	bl	800766a <cleanup_glue>
 8007724:	bd70      	pop	{r4, r5, r6, pc}
 8007726:	5949      	ldr	r1, [r1, r5]
 8007728:	2900      	cmp	r1, #0
 800772a:	d108      	bne.n	800773e <_reclaim_reent+0xba>
 800772c:	3504      	adds	r5, #4
 800772e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007730:	68d9      	ldr	r1, [r3, #12]
 8007732:	2d80      	cmp	r5, #128	; 0x80
 8007734:	d1f7      	bne.n	8007726 <_reclaim_reent+0xa2>
 8007736:	0020      	movs	r0, r4
 8007738:	f000 f81a 	bl	8007770 <_free_r>
 800773c:	e7af      	b.n	800769e <_reclaim_reent+0x1a>
 800773e:	680e      	ldr	r6, [r1, #0]
 8007740:	0020      	movs	r0, r4
 8007742:	f000 f815 	bl	8007770 <_free_r>
 8007746:	0031      	movs	r1, r6
 8007748:	e7ee      	b.n	8007728 <_reclaim_reent+0xa4>
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	20001c18 	.word	0x20001c18

08007750 <__malloc_lock>:
 8007750:	b510      	push	{r4, lr}
 8007752:	4802      	ldr	r0, [pc, #8]	; (800775c <__malloc_lock+0xc>)
 8007754:	f7ff ff76 	bl	8007644 <__retarget_lock_acquire_recursive>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	200038c4 	.word	0x200038c4

08007760 <__malloc_unlock>:
 8007760:	b510      	push	{r4, lr}
 8007762:	4802      	ldr	r0, [pc, #8]	; (800776c <__malloc_unlock+0xc>)
 8007764:	f7ff ff6f 	bl	8007646 <__retarget_lock_release_recursive>
 8007768:	bd10      	pop	{r4, pc}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	200038c4 	.word	0x200038c4

08007770 <_free_r>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	0005      	movs	r5, r0
 8007774:	2900      	cmp	r1, #0
 8007776:	d010      	beq.n	800779a <_free_r+0x2a>
 8007778:	1f0c      	subs	r4, r1, #4
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	da00      	bge.n	8007782 <_free_r+0x12>
 8007780:	18e4      	adds	r4, r4, r3
 8007782:	0028      	movs	r0, r5
 8007784:	f7ff ffe4 	bl	8007750 <__malloc_lock>
 8007788:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <_free_r+0x90>)
 800778a:	6813      	ldr	r3, [r2, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <_free_r+0x2c>
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	6014      	str	r4, [r2, #0]
 8007794:	0028      	movs	r0, r5
 8007796:	f7ff ffe3 	bl	8007760 <__malloc_unlock>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	42a3      	cmp	r3, r4
 800779e:	d908      	bls.n	80077b2 <_free_r+0x42>
 80077a0:	6821      	ldr	r1, [r4, #0]
 80077a2:	1860      	adds	r0, r4, r1
 80077a4:	4283      	cmp	r3, r0
 80077a6:	d1f3      	bne.n	8007790 <_free_r+0x20>
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	1841      	adds	r1, r0, r1
 80077ae:	6021      	str	r1, [r4, #0]
 80077b0:	e7ee      	b.n	8007790 <_free_r+0x20>
 80077b2:	001a      	movs	r2, r3
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <_free_r+0x4e>
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	d9f9      	bls.n	80077b2 <_free_r+0x42>
 80077be:	6811      	ldr	r1, [r2, #0]
 80077c0:	1850      	adds	r0, r2, r1
 80077c2:	42a0      	cmp	r0, r4
 80077c4:	d10b      	bne.n	80077de <_free_r+0x6e>
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	1809      	adds	r1, r1, r0
 80077ca:	1850      	adds	r0, r2, r1
 80077cc:	6011      	str	r1, [r2, #0]
 80077ce:	4283      	cmp	r3, r0
 80077d0:	d1e0      	bne.n	8007794 <_free_r+0x24>
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	1841      	adds	r1, r0, r1
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	6053      	str	r3, [r2, #4]
 80077dc:	e7da      	b.n	8007794 <_free_r+0x24>
 80077de:	42a0      	cmp	r0, r4
 80077e0:	d902      	bls.n	80077e8 <_free_r+0x78>
 80077e2:	230c      	movs	r3, #12
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	e7d5      	b.n	8007794 <_free_r+0x24>
 80077e8:	6821      	ldr	r1, [r4, #0]
 80077ea:	1860      	adds	r0, r4, r1
 80077ec:	4283      	cmp	r3, r0
 80077ee:	d103      	bne.n	80077f8 <_free_r+0x88>
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	1841      	adds	r1, r0, r1
 80077f6:	6021      	str	r1, [r4, #0]
 80077f8:	6063      	str	r3, [r4, #4]
 80077fa:	6054      	str	r4, [r2, #4]
 80077fc:	e7ca      	b.n	8007794 <_free_r+0x24>
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	200038c8 	.word	0x200038c8

08007804 <_init>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr

08007810 <_fini>:
 8007810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007816:	bc08      	pop	{r3}
 8007818:	469e      	mov	lr, r3
 800781a:	4770      	bx	lr
