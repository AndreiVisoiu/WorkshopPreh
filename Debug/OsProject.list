
OsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000736c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007534  08007534  00021c7c  2**0
                  CONTENTS
  4 .ARM          00000000  08007534  08007534  00021c7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007534  08007534  00021c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007538  08007538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001c7c  20000000  0800753c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c24  20001c7c  080091b8  00021c7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038a0  080091b8  000238a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00021c7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad98  00000000  00000000  00021ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364f  00000000  00000000  0003ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00040090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  000417b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dc7  00000000  00000000  00042d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ec3  00000000  00000000  00046b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6e11  00000000  00000000  00060a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005798  00000000  00000000  00117884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20001c7c 	.word	0x20001c7c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007414 	.word	0x08007414

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20001c80 	.word	0x20001c80
 8000104:	08007414 	.word	0x08007414

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <st7565_write_buffer>:
#define CMD(c)        do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 0 ); st7565_sendbyte( c ); } while (0);
#define DATA(d)       do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 ); st7565_sendbyte( d ); } while (0);
#define DELAY(mS)     do { HAL_Delay( mS ); } while(0);

//Renders the buffer contents
void st7565_write_buffer(uint8_t *buffer) {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 8000228:	230e      	movs	r3, #14
 800022a:	18fb      	adds	r3, r7, r3
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	e060      	b.n	80002f4 <st7565_write_buffer+0xd4>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 8000232:	4b35      	ldr	r3, [pc, #212]	; (8000308 <st7565_write_buffer+0xe8>)
 8000234:	2200      	movs	r2, #0
 8000236:	2180      	movs	r1, #128	; 0x80
 8000238:	0018      	movs	r0, r3
 800023a:	f002 f9bd 	bl	80025b8 <HAL_GPIO_WritePin>
 800023e:	230e      	movs	r3, #14
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	4a31      	ldr	r2, [pc, #196]	; (800030c <st7565_write_buffer+0xec>)
 8000246:	5cd3      	ldrb	r3, [r2, r3]
 8000248:	2250      	movs	r2, #80	; 0x50
 800024a:	4252      	negs	r2, r2
 800024c:	4313      	orrs	r3, r2
 800024e:	b2db      	uxtb	r3, r3
 8000250:	0018      	movs	r0, r3
 8000252:	f000 f85d 	bl	8000310 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000256:	4b2c      	ldr	r3, [pc, #176]	; (8000308 <st7565_write_buffer+0xe8>)
 8000258:	2200      	movs	r2, #0
 800025a:	2180      	movs	r1, #128	; 0x80
 800025c:	0018      	movs	r0, r3
 800025e:	f002 f9ab 	bl	80025b8 <HAL_GPIO_WritePin>
 8000262:	2000      	movs	r0, #0
 8000264:	f000 f854 	bl	8000310 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000268:	4b27      	ldr	r3, [pc, #156]	; (8000308 <st7565_write_buffer+0xe8>)
 800026a:	2200      	movs	r2, #0
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	0018      	movs	r0, r3
 8000270:	f002 f9a2 	bl	80025b8 <HAL_GPIO_WritePin>
 8000274:	2010      	movs	r0, #16
 8000276:	f000 f84b 	bl	8000310 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 800027a:	4b23      	ldr	r3, [pc, #140]	; (8000308 <st7565_write_buffer+0xe8>)
 800027c:	2200      	movs	r2, #0
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	0018      	movs	r0, r3
 8000282:	f002 f999 	bl	80025b8 <HAL_GPIO_WritePin>
 8000286:	20e0      	movs	r0, #224	; 0xe0
 8000288:	f000 f842 	bl	8000310 <st7565_sendbyte>
		DATA(0xff);
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <st7565_write_buffer+0xe8>)
 800028e:	2201      	movs	r2, #1
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	0018      	movs	r0, r3
 8000294:	f002 f990 	bl	80025b8 <HAL_GPIO_WritePin>
 8000298:	20ff      	movs	r0, #255	; 0xff
 800029a:	f000 f839 	bl	8000310 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 800029e:	230f      	movs	r3, #15
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
 80002a6:	e019      	b.n	80002dc <st7565_write_buffer+0xbc>
			DATA(buffer[(128 * p) + c]);
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <st7565_write_buffer+0xe8>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 f982 	bl	80025b8 <HAL_GPIO_WritePin>
 80002b4:	230e      	movs	r3, #14
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	01da      	lsls	r2, r3, #7
 80002bc:	240f      	movs	r4, #15
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	18d3      	adds	r3, r2, r3
 80002c4:	001a      	movs	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	189b      	adds	r3, r3, r2
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 f81f 	bl	8000310 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	781a      	ldrb	r2, [r3, #0]
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	3201      	adds	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	230f      	movs	r3, #15
 80002de:	18fb      	adds	r3, r7, r3
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	b25b      	sxtb	r3, r3
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	dadf      	bge.n	80002a8 <st7565_write_buffer+0x88>
	for (p = 0; p < 8; p++) {
 80002e8:	210e      	movs	r1, #14
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	781a      	ldrb	r2, [r3, #0]
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	3201      	adds	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	230e      	movs	r3, #14
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b07      	cmp	r3, #7
 80002fc:	d999      	bls.n	8000232 <st7565_write_buffer+0x12>
		}
	}
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b005      	add	sp, #20
 8000306:	bd90      	pop	{r4, r7, pc}
 8000308:	48000800 	.word	0x48000800
 800030c:	20000400 	.word	0x20000400

08000310 <st7565_sendbyte>:

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	0002      	movs	r2, r0
 8000318:	1dfb      	adds	r3, r7, #7
 800031a:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 800031c:	1df9      	adds	r1, r7, #7
 800031e:	4804      	ldr	r0, [pc, #16]	; (8000330 <st7565_sendbyte+0x20>)
 8000320:	2364      	movs	r3, #100	; 0x64
 8000322:	2201      	movs	r2, #1
 8000324:	f003 f81e 	bl	8003364 <HAL_SPI_Transmit>
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b002      	add	sp, #8
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20001d1c 	.word	0x20001d1c

08000334 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000338:	2380      	movs	r3, #128	; 0x80
 800033a:	0059      	lsls	r1, r3, #1
 800033c:	2390      	movs	r3, #144	; 0x90
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	2201      	movs	r2, #1
 8000342:	0018      	movs	r0, r3
 8000344:	f002 f938 	bl	80025b8 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8000348:	4b4e      	ldr	r3, [pc, #312]	; (8000484 <st7565_init+0x150>)
 800034a:	2201      	movs	r2, #1
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0018      	movs	r0, r3
 8000350:	f002 f932 	bl	80025b8 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000354:	2380      	movs	r3, #128	; 0x80
 8000356:	0099      	lsls	r1, r3, #2
 8000358:	2390      	movs	r3, #144	; 0x90
 800035a:	05db      	lsls	r3, r3, #23
 800035c:	2201      	movs	r2, #1
 800035e:	0018      	movs	r0, r3
 8000360:	f002 f92a 	bl	80025b8 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8000364:	4b48      	ldr	r3, [pc, #288]	; (8000488 <st7565_init+0x154>)
 8000366:	2201      	movs	r2, #1
 8000368:	2140      	movs	r1, #64	; 0x40
 800036a:	0018      	movs	r0, r3
 800036c:	f002 f924 	bl	80025b8 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 8000370:	4b45      	ldr	r3, [pc, #276]	; (8000488 <st7565_init+0x154>)
 8000372:	2200      	movs	r2, #0
 8000374:	2140      	movs	r1, #64	; 0x40
 8000376:	0018      	movs	r0, r3
 8000378:	f002 f91e 	bl	80025b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	0099      	lsls	r1, r3, #2
 8000380:	2390      	movs	r3, #144	; 0x90
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2200      	movs	r2, #0
 8000386:	0018      	movs	r0, r3
 8000388:	f002 f916 	bl	80025b8 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 800038c:	23fa      	movs	r3, #250	; 0xfa
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f8f1 	bl	8001578 <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	0099      	lsls	r1, r3, #2
 800039a:	2390      	movs	r3, #144	; 0x90
 800039c:	05db      	lsls	r3, r3, #23
 800039e:	2201      	movs	r2, #1
 80003a0:	0018      	movs	r0, r3
 80003a2:	f002 f909 	bl	80025b8 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 80003a6:	4b37      	ldr	r3, [pc, #220]	; (8000484 <st7565_init+0x150>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	2180      	movs	r1, #128	; 0x80
 80003ac:	0018      	movs	r0, r3
 80003ae:	f002 f903 	bl	80025b8 <HAL_GPIO_WritePin>
 80003b2:	20a3      	movs	r0, #163	; 0xa3
 80003b4:	f7ff ffac 	bl	8000310 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 80003b8:	4b32      	ldr	r3, [pc, #200]	; (8000484 <st7565_init+0x150>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	2180      	movs	r1, #128	; 0x80
 80003be:	0018      	movs	r0, r3
 80003c0:	f002 f8fa 	bl	80025b8 <HAL_GPIO_WritePin>
 80003c4:	20a0      	movs	r0, #160	; 0xa0
 80003c6:	f7ff ffa3 	bl	8000310 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 80003ca:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <st7565_init+0x150>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	0018      	movs	r0, r3
 80003d2:	f002 f8f1 	bl	80025b8 <HAL_GPIO_WritePin>
 80003d6:	20c0      	movs	r0, #192	; 0xc0
 80003d8:	f7ff ff9a 	bl	8000310 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 80003dc:	4b29      	ldr	r3, [pc, #164]	; (8000484 <st7565_init+0x150>)
 80003de:	2200      	movs	r2, #0
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	0018      	movs	r0, r3
 80003e4:	f002 f8e8 	bl	80025b8 <HAL_GPIO_WritePin>
 80003e8:	2040      	movs	r0, #64	; 0x40
 80003ea:	f7ff ff91 	bl	8000310 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 80003ee:	4b25      	ldr	r3, [pc, #148]	; (8000484 <st7565_init+0x150>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	0018      	movs	r0, r3
 80003f6:	f002 f8df 	bl	80025b8 <HAL_GPIO_WritePin>
 80003fa:	202c      	movs	r0, #44	; 0x2c
 80003fc:	f7ff ff88 	bl	8000310 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 8000400:	2032      	movs	r0, #50	; 0x32
 8000402:	f001 f8b9 	bl	8001578 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <st7565_init+0x150>)
 8000408:	2200      	movs	r2, #0
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	0018      	movs	r0, r3
 800040e:	f002 f8d3 	bl	80025b8 <HAL_GPIO_WritePin>
 8000412:	202e      	movs	r0, #46	; 0x2e
 8000414:	f7ff ff7c 	bl	8000310 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 8000418:	2032      	movs	r0, #50	; 0x32
 800041a:	f001 f8ad 	bl	8001578 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <st7565_init+0x150>)
 8000420:	2200      	movs	r2, #0
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	0018      	movs	r0, r3
 8000426:	f002 f8c7 	bl	80025b8 <HAL_GPIO_WritePin>
 800042a:	202f      	movs	r0, #47	; 0x2f
 800042c:	f7ff ff70 	bl	8000310 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8000430:	200a      	movs	r0, #10
 8000432:	f001 f8a1 	bl	8001578 <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <st7565_init+0x150>)
 8000438:	2200      	movs	r2, #0
 800043a:	2180      	movs	r1, #128	; 0x80
 800043c:	0018      	movs	r0, r3
 800043e:	f002 f8bb 	bl	80025b8 <HAL_GPIO_WritePin>
 8000442:	2026      	movs	r0, #38	; 0x26
 8000444:	f7ff ff64 	bl	8000310 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 8000448:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <st7565_init+0x150>)
 800044a:	2200      	movs	r2, #0
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	0018      	movs	r0, r3
 8000450:	f002 f8b2 	bl	80025b8 <HAL_GPIO_WritePin>
 8000454:	20af      	movs	r0, #175	; 0xaf
 8000456:	f7ff ff5b 	bl	8000310 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <st7565_init+0x150>)
 800045c:	2200      	movs	r2, #0
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	0018      	movs	r0, r3
 8000462:	f002 f8a9 	bl	80025b8 <HAL_GPIO_WritePin>
 8000466:	20a4      	movs	r0, #164	; 0xa4
 8000468:	f7ff ff52 	bl	8000310 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 800046c:	2000      	movs	r0, #0
 800046e:	f000 f81d 	bl	80004ac <st7565_set_brightness>
 	st7565_clear_screen();
 8000472:	f000 f83f 	bl	80004f4 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <st7565_init+0x158>)
 8000478:	0018      	movs	r0, r3
 800047a:	f000 f897 	bl	80005ac <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	48000800 	.word	0x48000800
 8000488:	48000400 	.word	0x48000400
 800048c:	20000000 	.word	0x20000000

08000490 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	0059      	lsls	r1, r3, #1
 8000498:	2390      	movs	r3, #144	; 0x90
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	2201      	movs	r2, #1
 800049e:	0018      	movs	r0, r3
 80004a0:	f002 f88a 	bl	80025b8 <HAL_GPIO_WritePin>
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	0002      	movs	r2, r0
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <st7565_set_brightness+0x44>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0018      	movs	r0, r3
 80004c0:	f002 f87a 	bl	80025b8 <HAL_GPIO_WritePin>
 80004c4:	2081      	movs	r0, #129	; 0x81
 80004c6:	f7ff ff23 	bl	8000310 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <st7565_set_brightness+0x44>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 f871 	bl	80025b8 <HAL_GPIO_WritePin>
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	223f      	movs	r2, #63	; 0x3f
 80004dc:	4013      	ands	r3, r2
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	0018      	movs	r0, r3
 80004e2:	f7ff ff15 	bl	8000310 <st7565_sendbyte>
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	48000800 	.word	0x48000800

080004f4 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e049      	b.n	8000596 <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <st7565_clear_screen+0xb4>)
 8000504:	2200      	movs	r2, #0
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0018      	movs	r0, r3
 800050a:	f002 f855 	bl	80025b8 <HAL_GPIO_WritePin>
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2250      	movs	r2, #80	; 0x50
 8000514:	4252      	negs	r2, r2
 8000516:	4313      	orrs	r3, r2
 8000518:	b2db      	uxtb	r3, r3
 800051a:	0018      	movs	r0, r3
 800051c:	f7ff fef8 	bl	8000310 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000520:	1dbb      	adds	r3, r7, #6
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e02d      	b.n	8000584 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <st7565_clear_screen+0xb4>)
 800052a:	2200      	movs	r2, #0
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0018      	movs	r0, r3
 8000530:	f002 f842 	bl	80025b8 <HAL_GPIO_WritePin>
 8000534:	1dbb      	adds	r3, r7, #6
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	220f      	movs	r2, #15
 800053a:	4013      	ands	r3, r2
 800053c:	b2db      	uxtb	r3, r3
 800053e:	0018      	movs	r0, r3
 8000540:	f7ff fee6 	bl	8000310 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <st7565_clear_screen+0xb4>)
 8000546:	2200      	movs	r2, #0
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0018      	movs	r0, r3
 800054c:	f002 f834 	bl	80025b8 <HAL_GPIO_WritePin>
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	091b      	lsrs	r3, r3, #4
 8000556:	b2db      	uxtb	r3, r3
 8000558:	b25b      	sxtb	r3, r3
 800055a:	2210      	movs	r2, #16
 800055c:	4313      	orrs	r3, r2
 800055e:	b25b      	sxtb	r3, r3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff fed4 	bl	8000310 <st7565_sendbyte>
			DATA(0x0);
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <st7565_clear_screen+0xb4>)
 800056a:	2201      	movs	r2, #1
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	0018      	movs	r0, r3
 8000570:	f002 f822 	bl	80025b8 <HAL_GPIO_WritePin>
 8000574:	2000      	movs	r0, #0
 8000576:	f7ff fecb 	bl	8000310 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 800057a:	1dbb      	adds	r3, r7, #6
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	1dbb      	adds	r3, r7, #6
 8000580:	3201      	adds	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b80      	cmp	r3, #128	; 0x80
 800058a:	d9cd      	bls.n	8000528 <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	3201      	adds	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b07      	cmp	r3, #7
 800059c:	d9b1      	bls.n	8000502 <st7565_clear_screen+0xe>
		}
	}
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	48000800 	.word	0x48000800

080005ac <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	00da      	lsls	r2, r3, #3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2100      	movs	r1, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f006 fe54 	bl	800726a <memset>
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}

080005ca <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 80005ca:	b590      	push	{r4, r7, lr}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	000c      	movs	r4, r1
 80005d4:	0010      	movs	r0, r2
 80005d6:	0019      	movs	r1, r3
 80005d8:	1cfb      	adds	r3, r7, #3
 80005da:	1c22      	adds	r2, r4, #0
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	1cbb      	adds	r3, r7, #2
 80005e0:	1c02      	adds	r2, r0, #0
 80005e2:	701a      	strb	r2, [r3, #0]
 80005e4:	1c7b      	adds	r3, r7, #1
 80005e6:	1c0a      	adds	r2, r1, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 80005ea:	1cfb      	adds	r3, r7, #3
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db51      	blt.n	8000698 <st7565_setpixel+0xce>
 80005f4:	1cbb      	adds	r3, r7, #2
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b3f      	cmp	r3, #63	; 0x3f
 80005fa:	d84d      	bhi.n	8000698 <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 80005fc:	1c7b      	adds	r3, r7, #1
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d023      	beq.n	800064c <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000604:	1cfb      	adds	r3, r7, #3
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	1cbb      	adds	r3, r7, #2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	08db      	lsrs	r3, r3, #3
 800060e:	b2d8      	uxtb	r0, r3
 8000610:	0003      	movs	r3, r0
 8000612:	01db      	lsls	r3, r3, #7
 8000614:	18d3      	adds	r3, r2, r3
 8000616:	001a      	movs	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	189b      	adds	r3, r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b25a      	sxtb	r2, r3
 8000620:	1cbb      	adds	r3, r7, #2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	43db      	mvns	r3, r3
 8000626:	2107      	movs	r1, #7
 8000628:	400b      	ands	r3, r1
 800062a:	2101      	movs	r1, #1
 800062c:	4099      	lsls	r1, r3
 800062e:	000b      	movs	r3, r1
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4313      	orrs	r3, r2
 8000634:	b259      	sxtb	r1, r3
 8000636:	1cfb      	adds	r3, r7, #3
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	0003      	movs	r3, r0
 800063c:	01db      	lsls	r3, r3, #7
 800063e:	18d3      	adds	r3, r2, r3
 8000640:	001a      	movs	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	189b      	adds	r3, r3, r2
 8000646:	b2ca      	uxtb	r2, r1
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	e026      	b.n	800069a <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 800064c:	1cfb      	adds	r3, r7, #3
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	1cbb      	adds	r3, r7, #2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	b2d8      	uxtb	r0, r3
 8000658:	0003      	movs	r3, r0
 800065a:	01db      	lsls	r3, r3, #7
 800065c:	18d3      	adds	r3, r2, r3
 800065e:	001a      	movs	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	189b      	adds	r3, r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b25b      	sxtb	r3, r3
 8000668:	1cba      	adds	r2, r7, #2
 800066a:	7812      	ldrb	r2, [r2, #0]
 800066c:	43d2      	mvns	r2, r2
 800066e:	2107      	movs	r1, #7
 8000670:	400a      	ands	r2, r1
 8000672:	2101      	movs	r1, #1
 8000674:	4091      	lsls	r1, r2
 8000676:	000a      	movs	r2, r1
 8000678:	b252      	sxtb	r2, r2
 800067a:	43d2      	mvns	r2, r2
 800067c:	b252      	sxtb	r2, r2
 800067e:	4013      	ands	r3, r2
 8000680:	b259      	sxtb	r1, r3
 8000682:	1cfb      	adds	r3, r7, #3
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	0003      	movs	r3, r0
 8000688:	01db      	lsls	r3, r3, #7
 800068a:	18d3      	adds	r3, r2, r3
 800068c:	001a      	movs	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	189b      	adds	r3, r3, r2
 8000692:	b2ca      	uxtb	r2, r1
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e000      	b.n	800069a <st7565_setpixel+0xd0>
		return;
 8000698:	46c0      	nop			; (mov r8, r8)
}
 800069a:	46bd      	mov	sp, r7
 800069c:	b003      	add	sp, #12
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <st7565_drawbitmap>:

//draw pixel at *x/*y from *bitmap
void st7565_drawbitmap(uint8_t *buff, uint8_t x, uint8_t y,
		const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color) {
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	0008      	movs	r0, r1
 80006aa:	0011      	movs	r1, r2
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	230b      	movs	r3, #11
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	1c02      	adds	r2, r0, #0
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	230a      	movs	r3, #10
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	1c0a      	adds	r2, r1, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	uint8_t j, i;
	for (j = 0; j < h; j++) {
 80006be:	2317      	movs	r3, #23
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e04c      	b.n	8000762 <st7565_drawbitmap+0xc2>
		for (i = 0; i < w; i++) {
 80006c8:	2316      	movs	r3, #22
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e037      	b.n	8000742 <st7565_drawbitmap+0xa2>
			if (*(bitmap + i + (j / 8) * w) & (1 << (j % 8))) {
 80006d2:	2416      	movs	r4, #22
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	2017      	movs	r0, #23
 80006da:	183b      	adds	r3, r7, r0
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	0019      	movs	r1, r3
 80006e4:	2320      	movs	r3, #32
 80006e6:	2508      	movs	r5, #8
 80006e8:	195b      	adds	r3, r3, r5
 80006ea:	19db      	adds	r3, r3, r7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	434b      	muls	r3, r1
 80006f0:	18d3      	adds	r3, r2, r3
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	18d3      	adds	r3, r2, r3
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	0019      	movs	r1, r3
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2207      	movs	r2, #7
 8000700:	4013      	ands	r3, r2
 8000702:	4119      	asrs	r1, r3
 8000704:	000b      	movs	r3, r1
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	d014      	beq.n	8000736 <st7565_drawbitmap+0x96>
				st7565_setpixel(buff, x + i, y + j, color);
 800070c:	230b      	movs	r3, #11
 800070e:	18fa      	adds	r2, r7, r3
 8000710:	193b      	adds	r3, r7, r4
 8000712:	7812      	ldrb	r2, [r2, #0]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	18d3      	adds	r3, r2, r3
 8000718:	b2d9      	uxtb	r1, r3
 800071a:	230a      	movs	r3, #10
 800071c:	18fa      	adds	r2, r7, r3
 800071e:	183b      	adds	r3, r7, r0
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	b2da      	uxtb	r2, r3
 8000728:	2328      	movs	r3, #40	; 0x28
 800072a:	195b      	adds	r3, r3, r5
 800072c:	19db      	adds	r3, r3, r7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ff4a 	bl	80005ca <st7565_setpixel>
		for (i = 0; i < w; i++) {
 8000736:	2116      	movs	r1, #22
 8000738:	187b      	adds	r3, r7, r1
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	187b      	adds	r3, r7, r1
 800073e:	3201      	adds	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	2316      	movs	r3, #22
 8000744:	18fa      	adds	r2, r7, r3
 8000746:	2320      	movs	r3, #32
 8000748:	2108      	movs	r1, #8
 800074a:	185b      	adds	r3, r3, r1
 800074c:	19db      	adds	r3, r3, r7
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	429a      	cmp	r2, r3
 8000754:	d3bd      	bcc.n	80006d2 <st7565_drawbitmap+0x32>
	for (j = 0; j < h; j++) {
 8000756:	2117      	movs	r1, #23
 8000758:	187b      	adds	r3, r7, r1
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	187b      	adds	r3, r7, r1
 800075e:	3201      	adds	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	2317      	movs	r3, #23
 8000764:	18fa      	adds	r2, r7, r3
 8000766:	2324      	movs	r3, #36	; 0x24
 8000768:	2108      	movs	r1, #8
 800076a:	185b      	adds	r3, r3, r1
 800076c:	19db      	adds	r3, r3, r7
 800076e:	7812      	ldrb	r2, [r2, #0]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d3a8      	bcc.n	80006c8 <st7565_drawbitmap+0x28>
			}
		}
	}
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b006      	add	sp, #24
 800077e:	bdb0      	pop	{r4, r5, r7, pc}

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fe94 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f828 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 fa14 	bl	8000bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000790:	f000 f9ec 	bl	8000b6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000794:	f000 f9ba 	bl	8000b0c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000798:	f000 f886 	bl	80008a8 <MX_ADC_Init>
  MX_TIM3_Init();
 800079c:	f000 f936 	bl	8000a0c <MX_TIM3_Init>
  MX_SPI1_Init();
 80007a0:	f000 f8f6 	bl	8000990 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Porneste PWM pe timer 3 canal 4 (pin PB1)
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <main+0x4c>)
 80007a6:	210c      	movs	r1, #12
 80007a8:	0018      	movs	r0, r3
 80007aa:	f003 f951 	bl	8003a50 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007ae:	f004 fb35 	bl	8004e1c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stergatoare */
  stergatoareHandle = osThreadNew(Stergatoare, NULL, &stergatoare_attributes);
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <main+0x50>)
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <main+0x54>)
 80007b6:	2100      	movs	r1, #0
 80007b8:	0018      	movs	r0, r3
 80007ba:	f004 fb89 	bl	8004ed0 <osThreadNew>
 80007be:	0002      	movs	r2, r0
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <main+0x58>)
 80007c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007c4:	f004 fb56 	bl	8004e74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x48>
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	20001d80 	.word	0x20001d80
 80007d0:	08007470 	.word	0x08007470
 80007d4:	08000cf1 	.word	0x08000cf1
 80007d8:	20001e90 	.word	0x20001e90

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b099      	sub	sp, #100	; 0x64
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	242c      	movs	r4, #44	; 0x2c
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	0018      	movs	r0, r3
 80007e8:	2334      	movs	r3, #52	; 0x34
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f006 fd3c 	bl	800726a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f2:	231c      	movs	r3, #28
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	2310      	movs	r3, #16
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f006 fd34 	bl	800726a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000802:	003b      	movs	r3, r7
 8000804:	0018      	movs	r0, r3
 8000806:	231c      	movs	r3, #28
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f006 fd2d 	bl	800726a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000810:	0021      	movs	r1, r4
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2211      	movs	r2, #17
 8000816:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2201      	movs	r2, #1
 800081c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2201      	movs	r2, #1
 8000822:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2210      	movs	r2, #16
 8000828:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2202      	movs	r2, #2
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0252      	lsls	r2, r2, #9
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	22a0      	movs	r2, #160	; 0xa0
 800083c:	0392      	lsls	r2, r2, #14
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2201      	movs	r2, #1
 8000844:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	187b      	adds	r3, r7, r1
 8000848:	0018      	movs	r0, r3
 800084a:	f001 fed3 	bl	80025f4 <HAL_RCC_OscConfig>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000852:	f000 fbe1 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	211c      	movs	r1, #28
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2207      	movs	r2, #7
 800085c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2202      	movs	r2, #2
 8000862:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2101      	movs	r1, #1
 8000874:	0018      	movs	r0, r3
 8000876:	f002 fa43 	bl	8002d00 <HAL_RCC_ClockConfig>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800087e:	f000 fbcb 	bl	8001018 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000882:	003b      	movs	r3, r7
 8000884:	2202      	movs	r2, #2
 8000886:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000888:	003b      	movs	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088e:	003b      	movs	r3, r7
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fbaf 	bl	8002ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800089a:	f000 fbbd 	bl	8001018 <Error_Handler>
  }
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b019      	add	sp, #100	; 0x64
 80008a4:	bd90      	pop	{r4, r7, pc}
	...

080008a8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	0018      	movs	r0, r3
 80008b2:	230c      	movs	r3, #12
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f006 fcd7 	bl	800726a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008bc:	4b32      	ldr	r3, [pc, #200]	; (8000988 <MX_ADC_Init+0xe0>)
 80008be:	4a33      	ldr	r2, [pc, #204]	; (800098c <MX_ADC_Init+0xe4>)
 80008c0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c2:	4b31      	ldr	r3, [pc, #196]	; (8000988 <MX_ADC_Init+0xe0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008c8:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <MX_ADC_Init+0xe0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <MX_ADC_Init+0xe0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008d4:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <MX_ADC_Init+0xe0>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_ADC_Init+0xe0>)
 80008dc:	2204      	movs	r2, #4
 80008de:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <MX_ADC_Init+0xe0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008e6:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_ADC_Init+0xe0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_ADC_Init+0xe0>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_ADC_Init+0xe0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <MX_ADC_Init+0xe0>)
 80008fa:	22c2      	movs	r2, #194	; 0xc2
 80008fc:	32ff      	adds	r2, #255	; 0xff
 80008fe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_ADC_Init+0xe0>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_ADC_Init+0xe0>)
 8000908:	2224      	movs	r2, #36	; 0x24
 800090a:	2101      	movs	r1, #1
 800090c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_ADC_Init+0xe0>)
 8000910:	2201      	movs	r2, #1
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_ADC_Init+0xe0>)
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fe52 	bl	80015c0 <HAL_ADC_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 fb7a 	bl	8001018 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	0152      	lsls	r2, r2, #5
 8000930:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2207      	movs	r2, #7
 8000936:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000938:	1d3a      	adds	r2, r7, #4
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_ADC_Init+0xe0>)
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f001 f818 	bl	8001974 <HAL_ADC_ConfigChannel>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000948:	f000 fb66 	bl	8001018 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	220d      	movs	r2, #13
 8000950:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_ADC_Init+0xe0>)
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f001 f80b 	bl	8001974 <HAL_ADC_ConfigChannel>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000962:	f000 fb59 	bl	8001018 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	220e      	movs	r2, #14
 800096a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800096c:	1d3a      	adds	r2, r7, #4
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_ADC_Init+0xe0>)
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fffe 	bl	8001974 <HAL_ADC_ConfigChannel>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800097c:	f000 fb4c 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b004      	add	sp, #16
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20001c98 	.word	0x20001c98
 800098c:	40012400 	.word	0x40012400

08000990 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_SPI1_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <MX_SPI1_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_SPI1_Init+0x74>)
 800099c:	2282      	movs	r2, #130	; 0x82
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009aa:	22e0      	movs	r2, #224	; 0xe0
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	0092      	lsls	r2, r2, #2
 80009c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009c6:	2230      	movs	r2, #48	; 0x30
 80009c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009de:	2207      	movs	r2, #7
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009ea:	2208      	movs	r2, #8
 80009ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MX_SPI1_Init+0x74>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 fbff 	bl	80031f4 <HAL_SPI_Init>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 fb0d 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20001d1c 	.word	0x20001d1c
 8000a08:	40013000 	.word	0x40013000

08000a0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08e      	sub	sp, #56	; 0x38
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a12:	2328      	movs	r3, #40	; 0x28
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	0018      	movs	r0, r3
 8000a18:	2310      	movs	r3, #16
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f006 fc24 	bl	800726a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a22:	2320      	movs	r3, #32
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	0018      	movs	r0, r3
 8000a28:	2308      	movs	r3, #8
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f006 fc1c 	bl	800726a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	0018      	movs	r0, r3
 8000a36:	231c      	movs	r3, #28
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f006 fc15 	bl	800726a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000a42:	4a30      	ldr	r2, [pc, #192]	; (8000b04 <MX_TIM3_Init+0xf8>)
 8000a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000a46:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000a48:	222f      	movs	r2, #47	; 0x2f
 8000a4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000a54:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <MX_TIM3_Init+0xfc>)
 8000a56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 ff4a 	bl	8003900 <HAL_TIM_Base_Init>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a70:	f000 fad2 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a74:	2128      	movs	r1, #40	; 0x28
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	0152      	lsls	r2, r2, #5
 8000a7c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a7e:	187a      	adds	r2, r7, r1
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f003 f961 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a8e:	f000 fac3 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 ff83 	bl	80039a0 <HAL_TIM_PWM_Init>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a9e:	f000 fabb 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab0:	187a      	adds	r2, r7, r1
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000ab4:	0011      	movs	r1, r2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f003 fd56 	bl	8004568 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000ac0:	f000 faaa 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2260      	movs	r2, #96	; 0x60
 8000ac8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000adc:	1d39      	adds	r1, r7, #4
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f003 f86c 	bl	8003bc0 <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000aec:	f000 fa94 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <MX_TIM3_Init+0xf4>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 fbf4 	bl	80012e0 <HAL_TIM_MspPostInit>

}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b00e      	add	sp, #56	; 0x38
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20001d80 	.word	0x20001d80
 8000b04:	40000400 	.word	0x40000400
 8000b08:	00004e1f 	.word	0x00004e1f

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART2_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b18:	22e1      	movs	r2, #225	; 0xe1
 8000b1a:	0252      	lsls	r2, r2, #9
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f003 fd67 	bl	8004624 <HAL_UART_Init>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 fa5d 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20001e0c 	.word	0x20001e0c
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_DMA_Init+0x48>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_DMA_Init+0x48>)
 8000b78:	2101      	movs	r1, #1
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <MX_DMA_Init+0x48>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	2201      	movs	r2, #1
 8000b84:	4013      	ands	r3, r2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2103      	movs	r1, #3
 8000b8e:	2009      	movs	r0, #9
 8000b90:	f001 f9b2 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000b94:	2009      	movs	r0, #9
 8000b96:	f001 f9c4 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f001 f9aa 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f001 f9bc 	bl	8001f22 <HAL_NVIC_EnableIRQ>

}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	2414      	movs	r4, #20
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	2314      	movs	r3, #20
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f006 fb4e 	bl	800726a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000bd0:	695a      	ldr	r2, [r3, #20]
 8000bd2:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0309      	lsls	r1, r1, #12
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	031b      	lsls	r3, r3, #12
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bea:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000bec:	695a      	ldr	r2, [r3, #20]
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	03c9      	lsls	r1, r1, #15
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	03db      	lsls	r3, r3, #15
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000c08:	695a      	ldr	r2, [r3, #20]
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	0289      	lsls	r1, r1, #10
 8000c10:	430a      	orrs	r2, r1
 8000c12:	615a      	str	r2, [r3, #20]
 8000c14:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	029b      	lsls	r3, r3, #10
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b30      	ldr	r3, [pc, #192]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	02c9      	lsls	r1, r1, #11
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	615a      	str	r2, [r3, #20]
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <MX_GPIO_Init+0x12c>)
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	02db      	lsls	r3, r3, #11
 8000c38:	4013      	ands	r3, r2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_SET);
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0x130>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 fcb7 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 8000c4a:	23c0      	movs	r3, #192	; 0xc0
 8000c4c:	0099      	lsls	r1, r3, #2
 8000c4e:	2390      	movs	r3, #144	; 0x90
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	2200      	movs	r2, #0
 8000c54:	0018      	movs	r0, r3
 8000c56:	f001 fcaf 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <MX_GPIO_Init+0x134>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 fca9 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2201      	movs	r2, #1
 8000c70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <MX_GPIO_Init+0x130>)
 8000c82:	0019      	movs	r1, r3
 8000c84:	0010      	movs	r0, r2
 8000c86:	f001 fb1f 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8000c8a:	0021      	movs	r1, r4
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	22c0      	movs	r2, #192	; 0xc0
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	000c      	movs	r4, r1
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	193a      	adds	r2, r7, r4
 8000caa:	2390      	movs	r3, #144	; 0x90
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f001 fb09 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 8000cb6:	0021      	movs	r1, r4
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2240      	movs	r2, #64	; 0x40
 8000cbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	4a06      	ldr	r2, [pc, #24]	; (8000cec <MX_GPIO_Init+0x134>)
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	0010      	movs	r0, r2
 8000cd8:	f001 faf6 	bl	80022c8 <HAL_GPIO_Init>

}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b00b      	add	sp, #44	; 0x2c
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000800 	.word	0x48000800
 8000cec:	48000400 	.word	0x48000400

08000cf0 <Stergatoare>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Stergatoare */
void Stergatoare(void *argument)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af04      	add	r7, sp, #16
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint32_t treaptaCurenta = 0; // Numar Treapta Viteza Curent
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

	// initializare LCD
	st7565_init();
 8000cfc:	f7ff fb1a 	bl	8000334 <st7565_init>
	st7565_backlight_enable();
 8000d00:	f7ff fbc6 	bl	8000490 <st7565_backlight_enable>
	uint32_t value[3]; 			//Joystick ADC Input
			  						    //value[0] - sus (X, default = 70-80, sus = 0, jos = 90-95)
			  						    //value[1] - dreapta (Y, default = 75-85, dreapta = 0, stanga = 90-95)
			  					        //value[2] - buton (SW, default = 1200+, apasat = 0)

	HAL_ADC_Start_DMA(&hadc, value, 3); // start adc in DMA mode
 8000d04:	2308      	movs	r3, #8
 8000d06:	18f9      	adds	r1, r7, r3
 8000d08:	4bb9      	ldr	r3, [pc, #740]	; (8000ff0 <Stergatoare+0x300>)
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 fd97 	bl	8001840 <HAL_ADC_Start_DMA>
		////////////////////////////////////  IMPLEMENTARE STERGATOARE  /////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////

		// STERGERE X1 - Joystick Sus

		if(value[0] == 0 && treaptaCurenta == 0){ // Joystick sus
 8000d12:	2308      	movs	r3, #8
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d144      	bne.n	8000da6 <Stergatoare+0xb6>
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d141      	bne.n	8000da6 <Stergatoare+0xb6>

			//AFISARE LCD

			st7565_drawbitmap(buffer, 0, 0, x1, 128, 64, 1); // copiaza poza in buffer
 8000d22:	4bb4      	ldr	r3, [pc, #720]	; (8000ff4 <Stergatoare+0x304>)
 8000d24:	48b4      	ldr	r0, [pc, #720]	; (8000ff8 <Stergatoare+0x308>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	9202      	str	r2, [sp, #8]
 8000d2a:	2240      	movs	r2, #64	; 0x40
 8000d2c:	9201      	str	r2, [sp, #4]
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	9200      	str	r2, [sp, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	f7ff fcb3 	bl	80006a0 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 8000d3a:	4baf      	ldr	r3, [pc, #700]	; (8000ff8 <Stergatoare+0x308>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fa6f 	bl	8000220 <st7565_write_buffer>

			//CONTROL SERVO

			TIM3 -> CCR4 = 500;   // 0%
 8000d42:	4bae      	ldr	r3, [pc, #696]	; (8000ffc <Stergatoare+0x30c>)
 8000d44:	22fa      	movs	r2, #250	; 0xfa
 8000d46:	0052      	lsls	r2, r2, #1
 8000d48:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000d4a:	20c8      	movs	r0, #200	; 0xc8
 8000d4c:	f000 fc14 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000d50:	4baa      	ldr	r3, [pc, #680]	; (8000ffc <Stergatoare+0x30c>)
 8000d52:	22fa      	movs	r2, #250	; 0xfa
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000d58:	20c8      	movs	r0, #200	; 0xc8
 8000d5a:	f000 fc0d 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000d5e:	4ba7      	ldr	r3, [pc, #668]	; (8000ffc <Stergatoare+0x30c>)
 8000d60:	4aa7      	ldr	r2, [pc, #668]	; (8001000 <Stergatoare+0x310>)
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000d64:	20c8      	movs	r0, #200	; 0xc8
 8000d66:	f000 fc07 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 8000d6a:	4ba4      	ldr	r3, [pc, #656]	; (8000ffc <Stergatoare+0x30c>)
 8000d6c:	22fa      	movs	r2, #250	; 0xfa
 8000d6e:	00d2      	lsls	r2, r2, #3
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000d72:	20c8      	movs	r0, #200	; 0xc8
 8000d74:	f000 fc00 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 8000d78:	4ba0      	ldr	r3, [pc, #640]	; (8000ffc <Stergatoare+0x30c>)
 8000d7a:	2296      	movs	r2, #150	; 0x96
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(250);
 8000d80:	20fa      	movs	r0, #250	; 0xfa
 8000d82:	f000 fbf9 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8000d86:	4b9d      	ldr	r3, [pc, #628]	; (8000ffc <Stergatoare+0x30c>)
 8000d88:	22fa      	movs	r2, #250	; 0xfa
 8000d8a:	0052      	lsls	r2, r2, #1
 8000d8c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000d8e:	20c8      	movs	r0, #200	; 0xc8
 8000d90:	f000 fbf2 	bl	8001578 <HAL_Delay>

			st7565_clear_buffer(buffer); 	// goleste buffer
 8000d94:	4b98      	ldr	r3, [pc, #608]	; (8000ff8 <Stergatoare+0x308>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff fc08 	bl	80005ac <st7565_clear_buffer>
			st7565_write_buffer(buffer);	// il scrie pe ecran (curata ecranul)
 8000d9c:	4b96      	ldr	r3, [pc, #600]	; (8000ff8 <Stergatoare+0x308>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff fa3e 	bl	8000220 <st7565_write_buffer>
 8000da4:	e00e      	b.n	8000dc4 <Stergatoare+0xd4>

		}
		else{
			TIM3 -> CCR4 = 500;   // 0%
 8000da6:	4b95      	ldr	r3, [pc, #596]	; (8000ffc <Stergatoare+0x30c>)
 8000da8:	22fa      	movs	r2, #250	; 0xfa
 8000daa:	0052      	lsls	r2, r2, #1
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8000dae:	2064      	movs	r0, #100	; 0x64
 8000db0:	f000 fbe2 	bl	8001578 <HAL_Delay>

			st7565_clear_buffer(buffer); 	// goleste buffer
 8000db4:	4b90      	ldr	r3, [pc, #576]	; (8000ff8 <Stergatoare+0x308>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff fbf8 	bl	80005ac <st7565_clear_buffer>
			st7565_write_buffer(buffer);	// il scrie pe ecran (curata ecranul)
 8000dbc:	4b8e      	ldr	r3, [pc, #568]	; (8000ff8 <Stergatoare+0x308>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff fa2e 	bl	8000220 <st7565_write_buffer>
		}

		// Setare treapta de viteza, maxim 3 trepte
		if (value[0] >= 85 && treaptaCurenta <= 2){ //Joystick jos
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b54      	cmp	r3, #84	; 0x54
 8000dcc:	d905      	bls.n	8000dda <Stergatoare+0xea>
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d802      	bhi.n	8000dda <Stergatoare+0xea>
			treaptaCurenta++;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
		}

		// Joystick sus, micsorare treapta viteza
		if(value[0] == 0 && treaptaCurenta > 0){
 8000dda:	2308      	movs	r3, #8
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d105      	bne.n	8000df0 <Stergatoare+0x100>
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <Stergatoare+0x100>
			treaptaCurenta--;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
		}

		// TREAPTA 1

		if(treaptaCurenta == 1)	{
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d138      	bne.n	8000e68 <Stergatoare+0x178>

			//AFISARE LCD

			st7565_drawbitmap(buffer, 0, 0, treapta1, 128, 64, 1); // copiaza poza in buffer
 8000df6:	4b83      	ldr	r3, [pc, #524]	; (8001004 <Stergatoare+0x314>)
 8000df8:	487f      	ldr	r0, [pc, #508]	; (8000ff8 <Stergatoare+0x308>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	9202      	str	r2, [sp, #8]
 8000dfe:	2240      	movs	r2, #64	; 0x40
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	9200      	str	r2, [sp, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f7ff fc49 	bl	80006a0 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 8000e0e:	4b7a      	ldr	r3, [pc, #488]	; (8000ff8 <Stergatoare+0x308>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff fa05 	bl	8000220 <st7565_write_buffer>

			//CONTROL SERVO

			TIM3 -> CCR4 = 500;   // 0%
 8000e16:	4b79      	ldr	r3, [pc, #484]	; (8000ffc <Stergatoare+0x30c>)
 8000e18:	22fa      	movs	r2, #250	; 0xfa
 8000e1a:	0052      	lsls	r2, r2, #1
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000e1e:	2096      	movs	r0, #150	; 0x96
 8000e20:	f000 fbaa 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000e24:	4b75      	ldr	r3, [pc, #468]	; (8000ffc <Stergatoare+0x30c>)
 8000e26:	22fa      	movs	r2, #250	; 0xfa
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000e2c:	2096      	movs	r0, #150	; 0x96
 8000e2e:	f000 fba3 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000e32:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <Stergatoare+0x30c>)
 8000e34:	4a72      	ldr	r2, [pc, #456]	; (8001000 <Stergatoare+0x310>)
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000e38:	2096      	movs	r0, #150	; 0x96
 8000e3a:	f000 fb9d 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 8000e3e:	4b6f      	ldr	r3, [pc, #444]	; (8000ffc <Stergatoare+0x30c>)
 8000e40:	22fa      	movs	r2, #250	; 0xfa
 8000e42:	00d2      	lsls	r2, r2, #3
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000e46:	2096      	movs	r0, #150	; 0x96
 8000e48:	f000 fb96 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 8000e4c:	4b6b      	ldr	r3, [pc, #428]	; (8000ffc <Stergatoare+0x30c>)
 8000e4e:	2296      	movs	r2, #150	; 0x96
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(150);
 8000e54:	2096      	movs	r0, #150	; 0x96
 8000e56:	f000 fb8f 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8000e5a:	4b68      	ldr	r3, [pc, #416]	; (8000ffc <Stergatoare+0x30c>)
 8000e5c:	22fa      	movs	r2, #250	; 0xfa
 8000e5e:	0052      	lsls	r2, r2, #1
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000e62:	20c8      	movs	r0, #200	; 0xc8
 8000e64:	f000 fb88 	bl	8001578 <HAL_Delay>
		}

		// TREAPTA 2

		if(treaptaCurenta == 2)	{
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d138      	bne.n	8000ee0 <Stergatoare+0x1f0>

			//AFISARE LCD

			st7565_drawbitmap(buffer, 0, 0, treapta2, 128, 64, 1); // copiaza poza in buffer
 8000e6e:	4b66      	ldr	r3, [pc, #408]	; (8001008 <Stergatoare+0x318>)
 8000e70:	4861      	ldr	r0, [pc, #388]	; (8000ff8 <Stergatoare+0x308>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	9202      	str	r2, [sp, #8]
 8000e76:	2240      	movs	r2, #64	; 0x40
 8000e78:	9201      	str	r2, [sp, #4]
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	9200      	str	r2, [sp, #0]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	f7ff fc0d 	bl	80006a0 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 8000e86:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <Stergatoare+0x308>)
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff f9c9 	bl	8000220 <st7565_write_buffer>

			//CONTROL SERVO

			TIM3 -> CCR4 = 500;   // 0%
 8000e8e:	4b5b      	ldr	r3, [pc, #364]	; (8000ffc <Stergatoare+0x30c>)
 8000e90:	22fa      	movs	r2, #250	; 0xfa
 8000e92:	0052      	lsls	r2, r2, #1
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8000e96:	2064      	movs	r0, #100	; 0x64
 8000e98:	f000 fb6e 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000e9c:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <Stergatoare+0x30c>)
 8000e9e:	22fa      	movs	r2, #250	; 0xfa
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8000ea4:	2064      	movs	r0, #100	; 0x64
 8000ea6:	f000 fb67 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000eaa:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <Stergatoare+0x30c>)
 8000eac:	4a54      	ldr	r2, [pc, #336]	; (8001000 <Stergatoare+0x310>)
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8000eb0:	2064      	movs	r0, #100	; 0x64
 8000eb2:	f000 fb61 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 8000eb6:	4b51      	ldr	r3, [pc, #324]	; (8000ffc <Stergatoare+0x30c>)
 8000eb8:	22fa      	movs	r2, #250	; 0xfa
 8000eba:	00d2      	lsls	r2, r2, #3
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8000ebe:	2064      	movs	r0, #100	; 0x64
 8000ec0:	f000 fb5a 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 8000ec4:	4b4d      	ldr	r3, [pc, #308]	; (8000ffc <Stergatoare+0x30c>)
 8000ec6:	2296      	movs	r2, #150	; 0x96
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8000ecc:	2064      	movs	r0, #100	; 0x64
 8000ece:	f000 fb53 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8000ed2:	4b4a      	ldr	r3, [pc, #296]	; (8000ffc <Stergatoare+0x30c>)
 8000ed4:	22fa      	movs	r2, #250	; 0xfa
 8000ed6:	0052      	lsls	r2, r2, #1
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000eda:	20c8      	movs	r0, #200	; 0xc8
 8000edc:	f000 fb4c 	bl	8001578 <HAL_Delay>
		}

		// TREAPTA 3

		if (treaptaCurenta == 3) {
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d138      	bne.n	8000f58 <Stergatoare+0x268>

			//AFISARE LCD

			st7565_drawbitmap(buffer, 0, 0, treapta3, 128, 64, 1); // copiaza poza in buffer
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <Stergatoare+0x31c>)
 8000ee8:	4843      	ldr	r0, [pc, #268]	; (8000ff8 <Stergatoare+0x308>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	9202      	str	r2, [sp, #8]
 8000eee:	2240      	movs	r2, #64	; 0x40
 8000ef0:	9201      	str	r2, [sp, #4]
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	9200      	str	r2, [sp, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f7ff fbd1 	bl	80006a0 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 8000efe:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <Stergatoare+0x308>)
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff f98d 	bl	8000220 <st7565_write_buffer>

			//CONTROL SERVO

			TIM3 -> CCR4 = 500;   // 0%
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <Stergatoare+0x30c>)
 8000f08:	22fa      	movs	r2, #250	; 0xfa
 8000f0a:	0052      	lsls	r2, r2, #1
 8000f0c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 8000f0e:	204b      	movs	r0, #75	; 0x4b
 8000f10:	f000 fb32 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 1000; // 25%
 8000f14:	4b39      	ldr	r3, [pc, #228]	; (8000ffc <Stergatoare+0x30c>)
 8000f16:	22fa      	movs	r2, #250	; 0xfa
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 8000f1c:	204b      	movs	r0, #75	; 0x4b
 8000f1e:	f000 fb2b 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 1450; // 55%
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <Stergatoare+0x30c>)
 8000f24:	4a36      	ldr	r2, [pc, #216]	; (8001000 <Stergatoare+0x310>)
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 8000f28:	204b      	movs	r0, #75	; 0x4b
 8000f2a:	f000 fb25 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 2000; // 85%
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <Stergatoare+0x30c>)
 8000f30:	22fa      	movs	r2, #250	; 0xfa
 8000f32:	00d2      	lsls	r2, r2, #3
 8000f34:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 8000f36:	204b      	movs	r0, #75	; 0x4b
 8000f38:	f000 fb1e 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 2400; // 100%
 8000f3c:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <Stergatoare+0x30c>)
 8000f3e:	2296      	movs	r2, #150	; 0x96
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(75);
 8000f44:	204b      	movs	r0, #75	; 0x4b
 8000f46:	f000 fb17 	bl	8001578 <HAL_Delay>

			TIM3 -> CCR4 = 500;   // 0%
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <Stergatoare+0x30c>)
 8000f4c:	22fa      	movs	r2, #250	; 0xfa
 8000f4e:	0052      	lsls	r2, r2, #1
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(200);
 8000f52:	20c8      	movs	r0, #200	; 0xc8
 8000f54:	f000 fb10 	bl	8001578 <HAL_Delay>
		}

		// RESETARE - Apasare Buton

		if (value[2] == 0){ // Buton apasat
 8000f58:	2308      	movs	r3, #8
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d110      	bne.n	8000f84 <Stergatoare+0x294>
			TIM3 -> CCR4 = 500; //Motor reset
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <Stergatoare+0x30c>)
 8000f64:	22fa      	movs	r2, #250	; 0xfa
 8000f66:	0052      	lsls	r2, r2, #1
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
			treaptaCurenta = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
			HAL_Delay(200);
 8000f6e:	20c8      	movs	r0, #200	; 0xc8
 8000f70:	f000 fb02 	bl	8001578 <HAL_Delay>

			st7565_clear_buffer(buffer); 	// goleste buffer
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <Stergatoare+0x308>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff fb18 	bl	80005ac <st7565_clear_buffer>
			st7565_write_buffer(buffer);	// il scrie pe ecran (curata ecranul)
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <Stergatoare+0x308>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff f94e 	bl	8000220 <st7565_write_buffer>

		}

		// STROPIRE PARBRIZ

		if (value[1] == 0) { //Joystick dreapta
 8000f84:	2308      	movs	r3, #8
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d114      	bne.n	8000fb8 <Stergatoare+0x2c8>
			st7565_drawbitmap(buffer, 0, 0, parbriz, 128, 64, 1); // copiaza poza in buffer
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <Stergatoare+0x320>)
 8000f90:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <Stergatoare+0x308>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	2240      	movs	r2, #64	; 0x40
 8000f98:	9201      	str	r2, [sp, #4]
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	9200      	str	r2, [sp, #0]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f7ff fb7d 	bl	80006a0 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <Stergatoare+0x308>)
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff f939 	bl	8000220 <st7565_write_buffer>
			HAL_Delay(2000);
 8000fae:	23fa      	movs	r3, #250	; 0xfa
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fae0 	bl	8001578 <HAL_Delay>
		}

		// STROPIRE LUNETA

		if(value[1] >= 85){ //Stanga !!!
 8000fb8:	2308      	movs	r3, #8
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b54      	cmp	r3, #84	; 0x54
 8000fc0:	d800      	bhi.n	8000fc4 <Stergatoare+0x2d4>
 8000fc2:	e6a6      	b.n	8000d12 <Stergatoare+0x22>
			st7565_drawbitmap(buffer, 0, 0, luneta, 128, 64, 1); // copiaza poza in buffer
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <Stergatoare+0x324>)
 8000fc6:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <Stergatoare+0x308>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	9202      	str	r2, [sp, #8]
 8000fcc:	2240      	movs	r2, #64	; 0x40
 8000fce:	9201      	str	r2, [sp, #4]
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	9200      	str	r2, [sp, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f7ff fb62 	bl	80006a0 <st7565_drawbitmap>
			st7565_write_buffer(buffer);	//o scrie pe ecran
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <Stergatoare+0x308>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff f91e 	bl	8000220 <st7565_write_buffer>
			HAL_Delay(2000);
 8000fe4:	23fa      	movs	r3, #250	; 0xfa
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f000 fac5 	bl	8001578 <HAL_Delay>
		if(value[0] == 0 && treaptaCurenta == 0){ // Joystick sus
 8000fee:	e690      	b.n	8000d12 <Stergatoare+0x22>
 8000ff0:	20001c98 	.word	0x20001c98
 8000ff4:	20000408 	.word	0x20000408
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	40000400 	.word	0x40000400
 8001000:	000005aa 	.word	0x000005aa
 8001004:	20000808 	.word	0x20000808
 8001008:	20000c08 	.word	0x20000c08
 800100c:	20001008 	.word	0x20001008
 8001010:	20001408 	.word	0x20001408
 8001014:	20001808 	.word	0x20001808

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_MspInit+0x50>)
 800102c:	699a      	ldr	r2, [r3, #24]
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_MspInit+0x50>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	619a      	str	r2, [r3, #24]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_MspInit+0x50>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	2201      	movs	r2, #1
 800103c:	4013      	ands	r3, r2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_MspInit+0x50>)
 8001044:	69da      	ldr	r2, [r3, #28]
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_MspInit+0x50>)
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	0549      	lsls	r1, r1, #21
 800104c:	430a      	orrs	r2, r1
 800104e:	61da      	str	r2, [r3, #28]
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_MspInit+0x50>)
 8001052:	69da      	ldr	r2, [r3, #28]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	055b      	lsls	r3, r3, #21
 8001058:	4013      	ands	r3, r2
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800105e:	2302      	movs	r3, #2
 8001060:	425b      	negs	r3, r3
 8001062:	2200      	movs	r2, #0
 8001064:	2103      	movs	r1, #3
 8001066:	0018      	movs	r0, r3
 8001068:	f000 ff46 	bl	8001ef8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	2414      	movs	r4, #20
 8001082:	193b      	adds	r3, r7, r4
 8001084:	0018      	movs	r0, r3
 8001086:	2314      	movs	r3, #20
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f006 f8ed 	bl	800726a <memset>
  if(hadc->Instance==ADC1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a35      	ldr	r2, [pc, #212]	; (800116c <HAL_ADC_MspInit+0xf4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d163      	bne.n	8001162 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109a:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_ADC_MspInit+0xf8>)
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <HAL_ADC_MspInit+0xf8>)
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	0089      	lsls	r1, r1, #2
 80010a4:	430a      	orrs	r2, r1
 80010a6:	619a      	str	r2, [r3, #24]
 80010a8:	4b31      	ldr	r3, [pc, #196]	; (8001170 <HAL_ADC_MspInit+0xf8>)
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <HAL_ADC_MspInit+0xf8>)
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_ADC_MspInit+0xf8>)
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	0309      	lsls	r1, r1, #12
 80010c0:	430a      	orrs	r2, r1
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_ADC_MspInit+0xf8>)
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	031b      	lsls	r3, r3, #12
 80010cc:	4013      	ands	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	221c      	movs	r2, #28
 80010d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	2203      	movs	r2, #3
 80010dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	4a23      	ldr	r2, [pc, #140]	; (8001174 <HAL_ADC_MspInit+0xfc>)
 80010e8:	0019      	movs	r1, r3
 80010ea:	0010      	movs	r0, r2
 80010ec:	f001 f8ec 	bl	80022c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_ADC_MspInit+0x100>)
 80010f2:	4a22      	ldr	r2, [pc, #136]	; (800117c <HAL_ADC_MspInit+0x104>)
 80010f4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HAL_ADC_MspInit+0x100>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_ADC_MspInit+0x100>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_ADC_MspInit+0x100>)
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_ADC_MspInit+0x100>)
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_ADC_MspInit+0x100>)
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_ADC_MspInit+0x100>)
 800111a:	2220      	movs	r2, #32
 800111c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_ADC_MspInit+0x100>)
 8001120:	22c0      	movs	r2, #192	; 0xc0
 8001122:	0192      	lsls	r2, r2, #6
 8001124:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_ADC_MspInit+0x100>)
 8001128:	0018      	movs	r0, r3
 800112a:	f000 ff17 	bl	8001f5c <HAL_DMA_Init>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001132:	f7ff ff71 	bl	8001018 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <HAL_ADC_MspInit+0x108>)
 8001138:	23a8      	movs	r3, #168	; 0xa8
 800113a:	58d3      	ldr	r3, [r2, r3]
 800113c:	4910      	ldr	r1, [pc, #64]	; (8001180 <HAL_ADC_MspInit+0x108>)
 800113e:	220f      	movs	r2, #15
 8001140:	4393      	bics	r3, r2
 8001142:	22a8      	movs	r2, #168	; 0xa8
 8001144:	508b      	str	r3, [r1, r2]
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_ADC_MspInit+0x108>)
 8001148:	23a8      	movs	r3, #168	; 0xa8
 800114a:	58d3      	ldr	r3, [r2, r3]
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <HAL_ADC_MspInit+0x108>)
 800114e:	2201      	movs	r2, #1
 8001150:	4313      	orrs	r3, r2
 8001152:	22a8      	movs	r2, #168	; 0xa8
 8001154:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_ADC_MspInit+0x100>)
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_ADC_MspInit+0x100>)
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b00b      	add	sp, #44	; 0x2c
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	40012400 	.word	0x40012400
 8001170:	40021000 	.word	0x40021000
 8001174:	48000800 	.word	0x48000800
 8001178:	20001cd8 	.word	0x20001cd8
 800117c:	40020008 	.word	0x40020008
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b08b      	sub	sp, #44	; 0x2c
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	2414      	movs	r4, #20
 800118e:	193b      	adds	r3, r7, r4
 8001190:	0018      	movs	r0, r3
 8001192:	2314      	movs	r3, #20
 8001194:	001a      	movs	r2, r3
 8001196:	2100      	movs	r1, #0
 8001198:	f006 f867 	bl	800726a <memset>
  if(hspi->Instance==SPI1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <HAL_SPI_MspInit+0x90>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d132      	bne.n	800120c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_SPI_MspInit+0x94>)
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_SPI_MspInit+0x94>)
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	0149      	lsls	r1, r1, #5
 80011b0:	430a      	orrs	r2, r1
 80011b2:	619a      	str	r2, [r3, #24]
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_SPI_MspInit+0x94>)
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	015b      	lsls	r3, r3, #5
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_SPI_MspInit+0x94>)
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_SPI_MspInit+0x94>)
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	0289      	lsls	r1, r1, #10
 80011cc:	430a      	orrs	r2, r1
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_SPI_MspInit+0x94>)
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	029b      	lsls	r3, r3, #10
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011de:	0021      	movs	r1, r4
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	22a0      	movs	r2, #160	; 0xa0
 80011e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2202      	movs	r2, #2
 80011ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2203      	movs	r2, #3
 80011f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	187a      	adds	r2, r7, r1
 8001200:	2390      	movs	r3, #144	; 0x90
 8001202:	05db      	lsls	r3, r3, #23
 8001204:	0011      	movs	r1, r2
 8001206:	0018      	movs	r0, r3
 8001208:	f001 f85e 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b00b      	add	sp, #44	; 0x2c
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	40013000 	.word	0x40013000
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <HAL_TIM_Base_MspInit+0xac>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d147      	bne.n	80012be <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_TIM_Base_MspInit+0xb0>)
 8001230:	69da      	ldr	r2, [r3, #28]
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_TIM_Base_MspInit+0xb0>)
 8001234:	2102      	movs	r1, #2
 8001236:	430a      	orrs	r2, r1
 8001238:	61da      	str	r2, [r3, #28]
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_TIM_Base_MspInit+0xb0>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 8001248:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <HAL_TIM_Base_MspInit+0xb8>)
 800124a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 800124e:	2210      	movs	r2, #16
 8001250:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	00d2      	lsls	r2, r2, #3
 800126c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 800127c:	0018      	movs	r0, r3
 800127e:	f000 fe6d 	bl	8001f5c <HAL_DMA_Init>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d001      	beq.n	800128a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001286:	f7ff fec7 	bl	8001018 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_DEFAULT);
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_TIM_Base_MspInit+0xbc>)
 800128c:	23a8      	movs	r3, #168	; 0xa8
 800128e:	58d3      	ldr	r3, [r2, r3]
 8001290:	4911      	ldr	r1, [pc, #68]	; (80012d8 <HAL_TIM_Base_MspInit+0xbc>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_TIM_Base_MspInit+0xc0>)
 8001294:	4013      	ands	r3, r2
 8001296:	22a8      	movs	r2, #168	; 0xa8
 8001298:	508b      	str	r3, [r1, r2]
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_TIM_Base_MspInit+0xbc>)
 800129c:	490e      	ldr	r1, [pc, #56]	; (80012d8 <HAL_TIM_Base_MspInit+0xbc>)
 800129e:	23a8      	movs	r3, #168	; 0xa8
 80012a0:	58d3      	ldr	r3, [r2, r3]
 80012a2:	22a8      	movs	r2, #168	; 0xa8
 80012a4:	508b      	str	r3, [r1, r2]

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 80012b6:	621a      	str	r2, [r3, #32]
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_TIM_Base_MspInit+0xb4>)
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b004      	add	sp, #16
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	40000400 	.word	0x40000400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	20001dc8 	.word	0x20001dc8
 80012d4:	40020030 	.word	0x40020030
 80012d8:	40020000 	.word	0x40020000
 80012dc:	fffff0ff 	.word	0xfffff0ff

080012e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	240c      	movs	r4, #12
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	0018      	movs	r0, r3
 80012ee:	2314      	movs	r3, #20
 80012f0:	001a      	movs	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	f005 ffb9 	bl	800726a <memset>
  if(htim->Instance==TIM3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <HAL_TIM_MspPostInit+0x74>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d123      	bne.n	800134a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_TIM_MspPostInit+0x78>)
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_TIM_MspPostInit+0x78>)
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	02c9      	lsls	r1, r1, #11
 800130c:	430a      	orrs	r2, r1
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_TIM_MspPostInit+0x78>)
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	02db      	lsls	r3, r3, #11
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800131e:	0021      	movs	r1, r4
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2202      	movs	r2, #2
 8001324:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2202      	movs	r2, #2
 800132a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2201      	movs	r2, #1
 800133c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	187b      	adds	r3, r7, r1
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_TIM_MspPostInit+0x7c>)
 8001342:	0019      	movs	r1, r3
 8001344:	0010      	movs	r0, r2
 8001346:	f000 ffbf 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b009      	add	sp, #36	; 0x24
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	40000400 	.word	0x40000400
 8001358:	40021000 	.word	0x40021000
 800135c:	48000400 	.word	0x48000400

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	2414      	movs	r4, #20
 800136a:	193b      	adds	r3, r7, r4
 800136c:	0018      	movs	r0, r3
 800136e:	2314      	movs	r3, #20
 8001370:	001a      	movs	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	f005 ff79 	bl	800726a <memset>
  if(huart->Instance==USART2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <HAL_UART_MspInit+0x90>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d132      	bne.n	80013e8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_UART_MspInit+0x94>)
 8001384:	69da      	ldr	r2, [r3, #28]
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_UART_MspInit+0x94>)
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	0289      	lsls	r1, r1, #10
 800138c:	430a      	orrs	r2, r1
 800138e:	61da      	str	r2, [r3, #28]
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_UART_MspInit+0x94>)
 8001392:	69da      	ldr	r2, [r3, #28]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	029b      	lsls	r3, r3, #10
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_UART_MspInit+0x94>)
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_UART_MspInit+0x94>)
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	0289      	lsls	r1, r1, #10
 80013a8:	430a      	orrs	r2, r1
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_UART_MspInit+0x94>)
 80013ae:	695a      	ldr	r2, [r3, #20]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	029b      	lsls	r3, r3, #10
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ba:	0021      	movs	r1, r4
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	220c      	movs	r2, #12
 80013c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2202      	movs	r2, #2
 80013c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2201      	movs	r2, #1
 80013d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	187a      	adds	r2, r7, r1
 80013dc:	2390      	movs	r3, #144	; 0x90
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	0011      	movs	r1, r2
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 ff70 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b00b      	add	sp, #44	; 0x2c
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	40004400 	.word	0x40004400
 80013f4:	40021000 	.word	0x40021000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f89a 	bl	8001540 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800140c:	f005 f88c 	bl	8006528 <xTaskGetSchedulerState>
 8001410:	0003      	movs	r3, r0
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001416:	f005 fd17 	bl	8006e48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <DMA1_Ch1_IRQHandler+0x14>)
 8001426:	0018      	movs	r0, r3
 8001428:	f000 fe46 	bl	80020b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	20001cd8 	.word	0x20001cd8

08001438 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 800143e:	0018      	movs	r0, r3
 8001440:	f000 fe3a 	bl	80020b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	20001dc8 	.word	0x20001dc8

08001450 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800145e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <LoopForever+0x6>)
  ldr r1, =_edata
 8001462:	490e      	ldr	r1, [pc, #56]	; (800149c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <LoopForever+0xe>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001478:	4c0b      	ldr	r4, [pc, #44]	; (80014a8 <LoopForever+0x16>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001486:	f7ff ffe3 	bl	8001450 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800148a:	f005 febf 	bl	800720c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148e:	f7ff f977 	bl	8000780 <main>

08001492 <LoopForever>:

LoopForever:
    b LoopForever
 8001492:	e7fe      	b.n	8001492 <LoopForever>
  ldr   r0, =_estack
 8001494:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20001c7c 	.word	0x20001c7c
  ldr r2, =_sidata
 80014a0:	0800753c 	.word	0x0800753c
  ldr r2, =_sbss
 80014a4:	20001c7c 	.word	0x20001c7c
  ldr r4, =_ebss
 80014a8:	200038a0 	.word	0x200038a0

080014ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_COMP_IRQHandler>
	...

080014b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_Init+0x24>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_Init+0x24>)
 80014ba:	2110      	movs	r1, #16
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f809 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c6:	f7ff fdad 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	40022000 	.word	0x40022000

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_InitTick+0x5c>)
 80014e2:	681c      	ldr	r4, [r3, #0]
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_InitTick+0x60>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	0019      	movs	r1, r3
 80014ea:	23fa      	movs	r3, #250	; 0xfa
 80014ec:	0098      	lsls	r0, r3, #2
 80014ee:	f7fe fe0b 	bl	8000108 <__udivsi3>
 80014f2:	0003      	movs	r3, r0
 80014f4:	0019      	movs	r1, r3
 80014f6:	0020      	movs	r0, r4
 80014f8:	f7fe fe06 	bl	8000108 <__udivsi3>
 80014fc:	0003      	movs	r3, r0
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 fd1f 	bl	8001f42 <HAL_SYSTICK_Config>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d001      	beq.n	800150c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e00f      	b.n	800152c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d80b      	bhi.n	800152a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	2301      	movs	r3, #1
 8001516:	425b      	negs	r3, r3
 8001518:	2200      	movs	r2, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f000 fcec 	bl	8001ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_InitTick+0x64>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b003      	add	sp, #12
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20001c08 	.word	0x20001c08
 8001538:	20001c10 	.word	0x20001c10
 800153c:	20001c0c 	.word	0x20001c0c

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x1c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	001a      	movs	r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x20>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	18d2      	adds	r2, r2, r3
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_IncTick+0x20>)
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	20001c10 	.word	0x20001c10
 8001560:	20001e94 	.word	0x20001e94

08001564 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HAL_GetTick+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	20001e94 	.word	0x20001e94

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff fff0 	bl	8001564 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	001a      	movs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	189b      	adds	r3, r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	f7ff ffe0 	bl	8001564 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	20001c10 	.word	0x20001c10

080015c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c8:	230f      	movs	r3, #15
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e125      	b.n	800182a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10a      	bne.n	80015fc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2234      	movs	r2, #52	; 0x34
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff fd3e 	bl	8001078 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	2210      	movs	r2, #16
 8001602:	4013      	ands	r3, r2
 8001604:	d000      	beq.n	8001608 <HAL_ADC_Init+0x48>
 8001606:	e103      	b.n	8001810 <HAL_ADC_Init+0x250>
 8001608:	230f      	movs	r3, #15
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d000      	beq.n	8001614 <HAL_ADC_Init+0x54>
 8001612:	e0fd      	b.n	8001810 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2204      	movs	r2, #4
 800161c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800161e:	d000      	beq.n	8001622 <HAL_ADC_Init+0x62>
 8001620:	e0f6      	b.n	8001810 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001626:	4a83      	ldr	r2, [pc, #524]	; (8001834 <HAL_ADC_Init+0x274>)
 8001628:	4013      	ands	r3, r2
 800162a:	2202      	movs	r2, #2
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2203      	movs	r2, #3
 800163a:	4013      	ands	r3, r2
 800163c:	2b01      	cmp	r3, #1
 800163e:	d112      	bne.n	8001666 <HAL_ADC_Init+0xa6>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4013      	ands	r3, r2
 800164a:	2b01      	cmp	r3, #1
 800164c:	d009      	beq.n	8001662 <HAL_ADC_Init+0xa2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	401a      	ands	r2, r3
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	429a      	cmp	r2, r3
 8001660:	d101      	bne.n	8001666 <HAL_ADC_Init+0xa6>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_ADC_Init+0xa8>
 8001666:	2300      	movs	r3, #0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d116      	bne.n	800169a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2218      	movs	r2, #24
 8001674:	4393      	bics	r3, r2
 8001676:	0019      	movs	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	0899      	lsrs	r1, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4964      	ldr	r1, [pc, #400]	; (8001838 <HAL_ADC_Init+0x278>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7e1b      	ldrb	r3, [r3, #24]
 80016ae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7e5b      	ldrb	r3, [r3, #25]
 80016b4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7e9b      	ldrb	r3, [r3, #26]
 80016bc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016be:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d002      	beq.n	80016ce <HAL_ADC_Init+0x10e>
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	e000      	b.n	80016d0 <HAL_ADC_Init+0x110>
 80016ce:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016d0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80016d6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_Init+0x124>
 80016e0:	2304      	movs	r3, #4
 80016e2:	e000      	b.n	80016e6 <HAL_ADC_Init+0x126>
 80016e4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80016e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2124      	movs	r1, #36	; 0x24
 80016ec:	5c5b      	ldrb	r3, [r3, r1]
 80016ee:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016f0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7edb      	ldrb	r3, [r3, #27]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d115      	bne.n	800172c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7e9b      	ldrb	r3, [r3, #26]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	0252      	lsls	r2, r2, #9
 800170e:	4313      	orrs	r3, r2
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	e00b      	b.n	800172c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001718:	2220      	movs	r2, #32
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001724:	2201      	movs	r2, #1
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	23c2      	movs	r3, #194	; 0xc2
 8001732:	33ff      	adds	r3, #255	; 0xff
 8001734:	429a      	cmp	r2, r3
 8001736:	d007      	beq.n	8001748 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001740:	4313      	orrs	r3, r2
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	4313      	orrs	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68d9      	ldr	r1, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	430a      	orrs	r2, r1
 8001756:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	055b      	lsls	r3, r3, #21
 8001760:	429a      	cmp	r2, r3
 8001762:	d01b      	beq.n	800179c <HAL_ADC_Init+0x1dc>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	2b01      	cmp	r3, #1
 800176a:	d017      	beq.n	800179c <HAL_ADC_Init+0x1dc>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	2b02      	cmp	r3, #2
 8001772:	d013      	beq.n	800179c <HAL_ADC_Init+0x1dc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	2b03      	cmp	r3, #3
 800177a:	d00f      	beq.n	800179c <HAL_ADC_Init+0x1dc>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b04      	cmp	r3, #4
 8001782:	d00b      	beq.n	800179c <HAL_ADC_Init+0x1dc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	2b05      	cmp	r3, #5
 800178a:	d007      	beq.n	800179c <HAL_ADC_Init+0x1dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	2b06      	cmp	r3, #6
 8001792:	d003      	beq.n	800179c <HAL_ADC_Init+0x1dc>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	2b07      	cmp	r3, #7
 800179a:	d112      	bne.n	80017c2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2107      	movs	r1, #7
 80017a8:	438a      	bics	r2, r1
 80017aa:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6959      	ldr	r1, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	2207      	movs	r2, #7
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4a1c      	ldr	r2, [pc, #112]	; (800183c <HAL_ADC_Init+0x27c>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d10b      	bne.n	80017ea <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	2203      	movs	r2, #3
 80017de:	4393      	bics	r3, r2
 80017e0:	2201      	movs	r2, #1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017e8:	e01c      	b.n	8001824 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ee:	2212      	movs	r2, #18
 80017f0:	4393      	bics	r3, r2
 80017f2:	2210      	movs	r2, #16
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	2201      	movs	r2, #1
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001806:	230f      	movs	r3, #15
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800180e:	e009      	b.n	8001824 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	2210      	movs	r2, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800181c:	230f      	movs	r3, #15
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001824:	230f      	movs	r3, #15
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	781b      	ldrb	r3, [r3, #0]
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	fffffefd 	.word	0xfffffefd
 8001838:	fffe0219 	.word	0xfffe0219
 800183c:	833fffe7 	.word	0x833fffe7

08001840 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2317      	movs	r3, #23
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2204      	movs	r2, #4
 800185c:	4013      	ands	r3, r2
 800185e:	d15e      	bne.n	800191e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2234      	movs	r2, #52	; 0x34
 8001864:	5c9b      	ldrb	r3, [r3, r2]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_ADC_Start_DMA+0x2e>
 800186a:	2302      	movs	r3, #2
 800186c:	e05e      	b.n	800192c <HAL_ADC_Start_DMA+0xec>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2234      	movs	r2, #52	; 0x34
 8001872:	2101      	movs	r1, #1
 8001874:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	7e5b      	ldrb	r3, [r3, #25]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d007      	beq.n	800188e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800187e:	2317      	movs	r3, #23
 8001880:	18fc      	adds	r4, r7, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	0018      	movs	r0, r3
 8001886:	f000 f983 	bl	8001b90 <ADC_Enable>
 800188a:	0003      	movs	r3, r0
 800188c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800188e:	2317      	movs	r3, #23
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d146      	bne.n	8001926 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189c:	4a25      	ldr	r2, [pc, #148]	; (8001934 <HAL_ADC_Start_DMA+0xf4>)
 800189e:	4013      	ands	r3, r2
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	0052      	lsls	r2, r2, #1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2234      	movs	r2, #52	; 0x34
 80018b4:	2100      	movs	r1, #0
 80018b6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_ADC_Start_DMA+0xf8>)
 80018be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_ADC_Start_DMA+0xfc>)
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_ADC_Start_DMA+0x100>)
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	221c      	movs	r2, #28
 80018d6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2110      	movs	r1, #16
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3340      	adds	r3, #64	; 0x40
 8001902:	0019      	movs	r1, r3
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f000 fb70 	bl	8001fec <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2104      	movs	r1, #4
 8001918:	430a      	orrs	r2, r1
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	e003      	b.n	8001926 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800191e:	2317      	movs	r3, #23
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	2202      	movs	r2, #2
 8001924:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001926:	2317      	movs	r3, #23
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	781b      	ldrb	r3, [r3, #0]
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b007      	add	sp, #28
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	fffff0fe 	.word	0xfffff0fe
 8001938:	08001c99 	.word	0x08001c99
 800193c:	08001d4d 	.word	0x08001d4d
 8001940:	08001d6b 	.word	0x08001d6b

08001944 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197e:	230f      	movs	r3, #15
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	055b      	lsls	r3, r3, #21
 8001992:	429a      	cmp	r2, r3
 8001994:	d011      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x46>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	2b01      	cmp	r3, #1
 800199c:	d00d      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x46>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d009      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x46>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d005      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x46>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d001      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x46>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2234      	movs	r2, #52	; 0x34
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x54>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e0d0      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x1f6>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2234      	movs	r2, #52	; 0x34
 80019cc:	2101      	movs	r1, #1
 80019ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2204      	movs	r2, #4
 80019d8:	4013      	ands	r3, r2
 80019da:	d000      	beq.n	80019de <HAL_ADC_ConfigChannel+0x6a>
 80019dc:	e0b4      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a64      	ldr	r2, [pc, #400]	; (8001b74 <HAL_ADC_ConfigChannel+0x200>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x76>
 80019e8:	e082      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d037      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x108>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d033      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x108>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d02f      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x108>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d02b      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x108>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d027      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x108>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d023      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x108>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	2b06      	cmp	r3, #6
 8001a3a:	d01f      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x108>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d01b      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2107      	movs	r1, #7
 8001a50:	400b      	ands	r3, r1
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d012      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2107      	movs	r1, #7
 8001a62:	438a      	bics	r2, r1
 8001a64:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6959      	ldr	r1, [r3, #20]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2207      	movs	r2, #7
 8001a72:	401a      	ands	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d007      	beq.n	8001a94 <HAL_ADC_ConfigChannel+0x120>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b11      	cmp	r3, #17
 8001a8a:	d003      	beq.n	8001a94 <HAL_ADC_ConfigChannel+0x120>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b12      	cmp	r3, #18
 8001a92:	d163      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <HAL_ADC_ConfigChannel+0x204>)
 8001a96:	6819      	ldr	r1, [r3, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b10      	cmp	r3, #16
 8001a9e:	d009      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0x140>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b11      	cmp	r3, #17
 8001aa6:	d102      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x13a>
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	03db      	lsls	r3, r3, #15
 8001aac:	e004      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x144>
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	045b      	lsls	r3, r3, #17
 8001ab2:	e001      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x144>
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <HAL_ADC_ConfigChannel+0x204>)
 8001aba:	430b      	orrs	r3, r1
 8001abc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d14a      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_ADC_ConfigChannel+0x208>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	492d      	ldr	r1, [pc, #180]	; (8001b80 <HAL_ADC_ConfigChannel+0x20c>)
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7fe fb1b 	bl	8000108 <__udivsi3>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	189b      	adds	r3, r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae0:	e002      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f9      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x16e>
 8001aee:	e035      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2101      	movs	r1, #1
 8001afc:	4099      	lsls	r1, r3
 8001afe:	000b      	movs	r3, r1
 8001b00:	43d9      	mvns	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	400a      	ands	r2, r1
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d007      	beq.n	8001b22 <HAL_ADC_ConfigChannel+0x1ae>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b11      	cmp	r3, #17
 8001b18:	d003      	beq.n	8001b22 <HAL_ADC_ConfigChannel+0x1ae>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b12      	cmp	r3, #18
 8001b20:	d11c      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_ADC_ConfigChannel+0x204>)
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d007      	beq.n	8001b3e <HAL_ADC_ConfigChannel+0x1ca>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b11      	cmp	r3, #17
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x1c6>
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_ADC_ConfigChannel+0x210>)
 8001b38:	e002      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x1cc>
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_ADC_ConfigChannel+0x214>)
 8001b3c:	e000      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x1cc>
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_ADC_ConfigChannel+0x218>)
 8001b40:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <HAL_ADC_ConfigChannel+0x204>)
 8001b42:	400b      	ands	r3, r1
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e009      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001b54:	230f      	movs	r3, #15
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2234      	movs	r2, #52	; 0x34
 8001b60:	2100      	movs	r1, #0
 8001b62:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b64:	230f      	movs	r3, #15
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	781b      	ldrb	r3, [r3, #0]
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b004      	add	sp, #16
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	00001001 	.word	0x00001001
 8001b78:	40012708 	.word	0x40012708
 8001b7c:	20001c08 	.word	0x20001c08
 8001b80:	000f4240 	.word	0x000f4240
 8001b84:	ffbfffff 	.word	0xffbfffff
 8001b88:	feffffff 	.word	0xfeffffff
 8001b8c:	ff7fffff 	.word	0xff7fffff

08001b90 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d112      	bne.n	8001bd4 <ADC_Enable+0x44>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d009      	beq.n	8001bd0 <ADC_Enable+0x40>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d101      	bne.n	8001bd4 <ADC_Enable+0x44>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <ADC_Enable+0x46>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d152      	bne.n	8001c80 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <ADC_Enable+0xfc>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	d00d      	beq.n	8001c02 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	2210      	movs	r2, #16
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e03f      	b.n	8001c82 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <ADC_Enable+0x100>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	491f      	ldr	r1, [pc, #124]	; (8001c94 <ADC_Enable+0x104>)
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7fe fa75 	bl	8000108 <__udivsi3>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c22:	e002      	b.n	8001c2a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f9      	bne.n	8001c24 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c30:	f7ff fc98 	bl	8001564 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c38:	e01b      	b.n	8001c72 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c3a:	f7ff fc93 	bl	8001564 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d914      	bls.n	8001c72 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d00d      	beq.n	8001c72 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c66:	2201      	movs	r2, #1
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e007      	b.n	8001c82 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d1dc      	bne.n	8001c3a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b004      	add	sp, #16
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	80000017 	.word	0x80000017
 8001c90:	20001c08 	.word	0x20001c08
 8001c94:	000f4240 	.word	0x000f4240

08001c98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	2250      	movs	r2, #80	; 0x50
 8001cac:	4013      	ands	r3, r2
 8001cae:	d140      	bne.n	8001d32 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	23c0      	movs	r3, #192	; 0xc0
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d12d      	bne.n	8001d28 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d129      	bne.n	8001d28 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2208      	movs	r2, #8
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d122      	bne.n	8001d28 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	4013      	ands	r3, r2
 8001cec:	d110      	bne.n	8001d10 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	210c      	movs	r1, #12
 8001cfa:	438a      	bics	r2, r1
 8001cfc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <ADC_DMAConvCplt+0xb0>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	2201      	movs	r2, #1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d0e:	e00b      	b.n	8001d28 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	2220      	movs	r2, #32
 8001d16:	431a      	orrs	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	2201      	movs	r2, #1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7ff fe0a 	bl	8001944 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001d30:	e005      	b.n	8001d3e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	0010      	movs	r0, r2
 8001d3c:	4798      	blx	r3
}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b004      	add	sp, #16
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	fffffefe 	.word	0xfffffefe

08001d4c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7ff fdf9 	bl	8001954 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	2240      	movs	r2, #64	; 0x40
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d88:	2204      	movs	r2, #4
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff fde6 	bl	8001964 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b004      	add	sp, #16
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	0002      	movs	r2, r0
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b7f      	cmp	r3, #127	; 0x7f
 8001db2:	d809      	bhi.n	8001dc8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	001a      	movs	r2, r3
 8001dba:	231f      	movs	r3, #31
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <__NVIC_EnableIRQ+0x30>)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4091      	lsls	r1, r2
 8001dc4:	000a      	movs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
  }
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	0002      	movs	r2, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b7f      	cmp	r3, #127	; 0x7f
 8001de8:	d828      	bhi.n	8001e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	33c0      	adds	r3, #192	; 0xc0
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	589b      	ldr	r3, [r3, r2]
 8001dfa:	1dfa      	adds	r2, r7, #7
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	0011      	movs	r1, r2
 8001e00:	2203      	movs	r2, #3
 8001e02:	400a      	ands	r2, r1
 8001e04:	00d2      	lsls	r2, r2, #3
 8001e06:	21ff      	movs	r1, #255	; 0xff
 8001e08:	4091      	lsls	r1, r2
 8001e0a:	000a      	movs	r2, r1
 8001e0c:	43d2      	mvns	r2, r2
 8001e0e:	401a      	ands	r2, r3
 8001e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	401a      	ands	r2, r3
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	2303      	movs	r3, #3
 8001e22:	4003      	ands	r3, r0
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e28:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	430a      	orrs	r2, r1
 8001e34:	33c0      	adds	r3, #192	; 0xc0
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e3a:	e031      	b.n	8001ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <__NVIC_SetPriority+0xd8>)
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	0019      	movs	r1, r3
 8001e44:	230f      	movs	r3, #15
 8001e46:	400b      	ands	r3, r1
 8001e48:	3b08      	subs	r3, #8
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3306      	adds	r3, #6
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	3304      	adds	r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1dfa      	adds	r2, r7, #7
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	400a      	ands	r2, r1
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	21ff      	movs	r1, #255	; 0xff
 8001e64:	4091      	lsls	r1, r2
 8001e66:	000a      	movs	r2, r1
 8001e68:	43d2      	mvns	r2, r2
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	401a      	ands	r2, r3
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	4003      	ands	r3, r0
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <__NVIC_SetPriority+0xd8>)
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	001c      	movs	r4, r3
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	4023      	ands	r3, r4
 8001e90:	3b08      	subs	r3, #8
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	430a      	orrs	r2, r1
 8001e96:	3306      	adds	r3, #6
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	18c3      	adds	r3, r0, r3
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1e5a      	subs	r2, r3, #1
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	045b      	lsls	r3, r3, #17
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d301      	bcc.n	8001ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e010      	b.n	8001eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <SysTick_Config+0x44>)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff ff7c 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SysTick_Config+0x44>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x44>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	210f      	movs	r1, #15
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	1c02      	adds	r2, r0, #0
 8001f08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	0002      	movs	r2, r0
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff ff33 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff ffaf 	bl	8001eb0 <SysTick_Config>
 8001f52:	0003      	movs	r3, r0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e036      	b.n	8001fe0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2221      	movs	r2, #33	; 0x21
 8001f76:	2102      	movs	r1, #2
 8001f78:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <HAL_DMA_Init+0x8c>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 f946 	bl	8002254 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2221      	movs	r2, #33	; 0x21
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}  
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b004      	add	sp, #16
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	ffffc00f 	.word	0xffffc00f

08001fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ffa:	2317      	movs	r3, #23
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2220      	movs	r2, #32
 8002006:	5c9b      	ldrb	r3, [r3, r2]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_DMA_Start_IT+0x24>
 800200c:	2302      	movs	r3, #2
 800200e:	e04f      	b.n	80020b0 <HAL_DMA_Start_IT+0xc4>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	2101      	movs	r1, #1
 8002016:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2221      	movs	r2, #33	; 0x21
 800201c:	5c9b      	ldrb	r3, [r3, r2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d13a      	bne.n	800209a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2221      	movs	r2, #33	; 0x21
 8002028:	2102      	movs	r1, #2
 800202a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	438a      	bics	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f8d7 	bl	80021fc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	210e      	movs	r1, #14
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e00f      	b.n	8002088 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	210a      	movs	r1, #10
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2104      	movs	r1, #4
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e007      	b.n	80020aa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	2100      	movs	r1, #0
 80020a0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80020a2:	2317      	movs	r3, #23
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2202      	movs	r2, #2
 80020a8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80020aa:	2317      	movs	r3, #23
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
} 
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b006      	add	sp, #24
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	2204      	movs	r2, #4
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	d024      	beq.n	800212a <HAL_DMA_IRQHandler+0x72>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	d020      	beq.n	800212a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2220      	movs	r2, #32
 80020f0:	4013      	ands	r3, r2
 80020f2:	d107      	bne.n	8002104 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2104      	movs	r1, #4
 8002100:	438a      	bics	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	2104      	movs	r1, #4
 800210e:	4091      	lsls	r1, r2
 8002110:	000a      	movs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d100      	bne.n	800211e <HAL_DMA_IRQHandler+0x66>
 800211c:	e06a      	b.n	80021f4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	0010      	movs	r0, r2
 8002126:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002128:	e064      	b.n	80021f4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2202      	movs	r2, #2
 8002130:	409a      	lsls	r2, r3
 8002132:	0013      	movs	r3, r2
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	d02b      	beq.n	8002192 <HAL_DMA_IRQHandler+0xda>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	d027      	beq.n	8002192 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2220      	movs	r2, #32
 800214a:	4013      	ands	r3, r2
 800214c:	d10b      	bne.n	8002166 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	210a      	movs	r1, #10
 800215a:	438a      	bics	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2221      	movs	r2, #33	; 0x21
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	2102      	movs	r1, #2
 8002170:	4091      	lsls	r1, r2
 8002172:	000a      	movs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2220      	movs	r2, #32
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d036      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	0010      	movs	r0, r2
 800218e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002190:	e030      	b.n	80021f4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2208      	movs	r2, #8
 8002198:	409a      	lsls	r2, r3
 800219a:	0013      	movs	r3, r2
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4013      	ands	r3, r2
 80021a0:	d028      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x13c>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2208      	movs	r2, #8
 80021a6:	4013      	ands	r3, r2
 80021a8:	d024      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	210e      	movs	r1, #14
 80021b6:	438a      	bics	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	2101      	movs	r1, #1
 80021c4:	4091      	lsls	r1, r2
 80021c6:	000a      	movs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2221      	movs	r2, #33	; 0x21
 80021d4:	2101      	movs	r1, #1
 80021d6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	0010      	movs	r0, r2
 80021f0:	4798      	blx	r3
    }
   }
}  
 80021f2:	e7ff      	b.n	80021f4 <HAL_DMA_IRQHandler+0x13c>
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b004      	add	sp, #16
 80021fa:	bd80      	pop	{r7, pc}

080021fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	2101      	movs	r1, #1
 8002214:	4091      	lsls	r1, r2
 8002216:	000a      	movs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b10      	cmp	r3, #16
 8002228:	d108      	bne.n	800223c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800223a:	e007      	b.n	800224c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b004      	add	sp, #16
 8002252:	bd80      	pop	{r7, pc}

08002254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	001a      	movs	r2, r3
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <DMA_CalcBaseAndBitshift+0x60>)
 8002264:	429a      	cmp	r2, r3
 8002266:	d810      	bhi.n	800228a <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <DMA_CalcBaseAndBitshift+0x64>)
 800226e:	4694      	mov	ip, r2
 8002270:	4463      	add	r3, ip
 8002272:	2114      	movs	r1, #20
 8002274:	0018      	movs	r0, r3
 8002276:	f7fd ff47 	bl	8000108 <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	009a      	lsls	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <DMA_CalcBaseAndBitshift+0x68>)
 8002286:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002288:	e00f      	b.n	80022aa <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <DMA_CalcBaseAndBitshift+0x6c>)
 8002290:	4694      	mov	ip, r2
 8002292:	4463      	add	r3, ip
 8002294:	2114      	movs	r1, #20
 8002296:	0018      	movs	r0, r3
 8002298:	f7fd ff36 	bl	8000108 <__udivsi3>
 800229c:	0003      	movs	r3, r0
 800229e:	009a      	lsls	r2, r3, #2
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <DMA_CalcBaseAndBitshift+0x70>)
 80022a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40020407 	.word	0x40020407
 80022b8:	bffdfff8 	.word	0xbffdfff8
 80022bc:	40020000 	.word	0x40020000
 80022c0:	bffdfbf8 	.word	0xbffdfbf8
 80022c4:	40020400 	.word	0x40020400

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d6:	e155      	b.n	8002584 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2101      	movs	r1, #1
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4091      	lsls	r1, r2
 80022e2:	000a      	movs	r2, r1
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d100      	bne.n	80022f0 <HAL_GPIO_Init+0x28>
 80022ee:	e146      	b.n	800257e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2203      	movs	r2, #3
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d005      	beq.n	8002308 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2203      	movs	r2, #3
 8002302:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002304:	2b02      	cmp	r3, #2
 8002306:	d130      	bne.n	800236a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	409a      	lsls	r2, r3
 8002316:	0013      	movs	r3, r2
 8002318:	43da      	mvns	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	409a      	lsls	r2, r3
 800232a:	0013      	movs	r3, r2
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800233e:	2201      	movs	r2, #1
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
 8002344:	0013      	movs	r3, r2
 8002346:	43da      	mvns	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	2201      	movs	r2, #1
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
 800235c:	0013      	movs	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2203      	movs	r2, #3
 8002370:	4013      	ands	r3, r2
 8002372:	2b03      	cmp	r3, #3
 8002374:	d017      	beq.n	80023a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	43da      	mvns	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	409a      	lsls	r2, r3
 8002398:	0013      	movs	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2203      	movs	r2, #3
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d123      	bne.n	80023fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	08da      	lsrs	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3208      	adds	r2, #8
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	58d3      	ldr	r3, [r2, r3]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2207      	movs	r2, #7
 80023c4:	4013      	ands	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	43da      	mvns	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2107      	movs	r1, #7
 80023de:	400b      	ands	r3, r1
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	6939      	ldr	r1, [r7, #16]
 80023f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	409a      	lsls	r2, r3
 8002408:	0013      	movs	r3, r2
 800240a:	43da      	mvns	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2203      	movs	r2, #3
 8002418:	401a      	ands	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	409a      	lsls	r2, r3
 8002420:	0013      	movs	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	23c0      	movs	r3, #192	; 0xc0
 8002434:	029b      	lsls	r3, r3, #10
 8002436:	4013      	ands	r3, r2
 8002438:	d100      	bne.n	800243c <HAL_GPIO_Init+0x174>
 800243a:	e0a0      	b.n	800257e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <HAL_GPIO_Init+0x2d4>)
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	4b56      	ldr	r3, [pc, #344]	; (800259c <HAL_GPIO_Init+0x2d4>)
 8002442:	2101      	movs	r1, #1
 8002444:	430a      	orrs	r2, r1
 8002446:	619a      	str	r2, [r3, #24]
 8002448:	4b54      	ldr	r3, [pc, #336]	; (800259c <HAL_GPIO_Init+0x2d4>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_GPIO_Init+0x2d8>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	589b      	ldr	r3, [r3, r2]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2203      	movs	r2, #3
 8002466:	4013      	ands	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	409a      	lsls	r2, r3
 800246e:	0013      	movs	r3, r2
 8002470:	43da      	mvns	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	2390      	movs	r3, #144	; 0x90
 800247c:	05db      	lsls	r3, r3, #23
 800247e:	429a      	cmp	r2, r3
 8002480:	d019      	beq.n	80024b6 <HAL_GPIO_Init+0x1ee>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a47      	ldr	r2, [pc, #284]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_GPIO_Init+0x1ea>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a46      	ldr	r2, [pc, #280]	; (80025a8 <HAL_GPIO_Init+0x2e0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00d      	beq.n	80024ae <HAL_GPIO_Init+0x1e6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a45      	ldr	r2, [pc, #276]	; (80025ac <HAL_GPIO_Init+0x2e4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <HAL_GPIO_Init+0x1e2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a44      	ldr	r2, [pc, #272]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_GPIO_Init+0x1de>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x1f0>
 80024a6:	2305      	movs	r3, #5
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x1f0>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x1f0>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x1f0>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x1f0>
 80024b6:	2300      	movs	r3, #0
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	2103      	movs	r1, #3
 80024bc:	400a      	ands	r2, r1
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	; (80025a0 <HAL_GPIO_Init+0x2d8>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43da      	mvns	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	025b      	lsls	r3, r3, #9
 80024ee:	4013      	ands	r3, r2
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43da      	mvns	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	029b      	lsls	r3, r3, #10
 8002518:	4013      	ands	r3, r2
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43da      	mvns	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	035b      	lsls	r3, r3, #13
 8002542:	4013      	ands	r3, r2
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43da      	mvns	r2, r3
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	039b      	lsls	r3, r3, #14
 800256c:	4013      	ands	r3, r2
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	40da      	lsrs	r2, r3
 800258c:	1e13      	subs	r3, r2, #0
 800258e:	d000      	beq.n	8002592 <HAL_GPIO_Init+0x2ca>
 8002590:	e6a2      	b.n	80022d8 <HAL_GPIO_Init+0x10>
  } 
}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b006      	add	sp, #24
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	48000400 	.word	0x48000400
 80025a8:	48000800 	.word	0x48000800
 80025ac:	48000c00 	.word	0x48000c00
 80025b0:	48001000 	.word	0x48001000
 80025b4:	40010400 	.word	0x40010400

080025b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	0008      	movs	r0, r1
 80025c2:	0011      	movs	r1, r2
 80025c4:	1cbb      	adds	r3, r7, #2
 80025c6:	1c02      	adds	r2, r0, #0
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	1c7b      	adds	r3, r7, #1
 80025cc:	1c0a      	adds	r2, r1, #0
 80025ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d0:	1c7b      	adds	r3, r7, #1
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d8:	1cbb      	adds	r3, r7, #2
 80025da:	881a      	ldrh	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e2:	1cbb      	adds	r3, r7, #2
 80025e4:	881a      	ldrh	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b002      	add	sp, #8
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	f000 fb76 	bl	8002cf4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	d100      	bne.n	8002614 <HAL_RCC_OscConfig+0x20>
 8002612:	e08e      	b.n	8002732 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002614:	4bc5      	ldr	r3, [pc, #788]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	220c      	movs	r2, #12
 800261a:	4013      	ands	r3, r2
 800261c:	2b04      	cmp	r3, #4
 800261e:	d00e      	beq.n	800263e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002620:	4bc2      	ldr	r3, [pc, #776]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
 8002628:	2b08      	cmp	r3, #8
 800262a:	d117      	bne.n	800265c <HAL_RCC_OscConfig+0x68>
 800262c:	4bbf      	ldr	r3, [pc, #764]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	23c0      	movs	r3, #192	; 0xc0
 8002632:	025b      	lsls	r3, r3, #9
 8002634:	401a      	ands	r2, r3
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	025b      	lsls	r3, r3, #9
 800263a:	429a      	cmp	r2, r3
 800263c:	d10e      	bne.n	800265c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263e:	4bbb      	ldr	r3, [pc, #748]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	4013      	ands	r3, r2
 8002648:	d100      	bne.n	800264c <HAL_RCC_OscConfig+0x58>
 800264a:	e071      	b.n	8002730 <HAL_RCC_OscConfig+0x13c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d000      	beq.n	8002656 <HAL_RCC_OscConfig+0x62>
 8002654:	e06c      	b.n	8002730 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	f000 fb4c 	bl	8002cf4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x80>
 8002664:	4bb1      	ldr	r3, [pc, #708]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4bb0      	ldr	r3, [pc, #704]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	0249      	lsls	r1, r1, #9
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e02f      	b.n	80026d4 <HAL_RCC_OscConfig+0xe0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10c      	bne.n	8002696 <HAL_RCC_OscConfig+0xa2>
 800267c:	4bab      	ldr	r3, [pc, #684]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4baa      	ldr	r3, [pc, #680]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002682:	49ab      	ldr	r1, [pc, #684]	; (8002930 <HAL_RCC_OscConfig+0x33c>)
 8002684:	400a      	ands	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4ba8      	ldr	r3, [pc, #672]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4ba7      	ldr	r3, [pc, #668]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800268e:	49a9      	ldr	r1, [pc, #676]	; (8002934 <HAL_RCC_OscConfig+0x340>)
 8002690:	400a      	ands	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e01e      	b.n	80026d4 <HAL_RCC_OscConfig+0xe0>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d10e      	bne.n	80026bc <HAL_RCC_OscConfig+0xc8>
 800269e:	4ba3      	ldr	r3, [pc, #652]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4ba2      	ldr	r3, [pc, #648]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	02c9      	lsls	r1, r1, #11
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	4b9f      	ldr	r3, [pc, #636]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b9e      	ldr	r3, [pc, #632]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0249      	lsls	r1, r1, #9
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0xe0>
 80026bc:	4b9b      	ldr	r3, [pc, #620]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b9a      	ldr	r3, [pc, #616]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80026c2:	499b      	ldr	r1, [pc, #620]	; (8002930 <HAL_RCC_OscConfig+0x33c>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	4b98      	ldr	r3, [pc, #608]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b97      	ldr	r3, [pc, #604]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80026ce:	4999      	ldr	r1, [pc, #612]	; (8002934 <HAL_RCC_OscConfig+0x340>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d014      	beq.n	8002706 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff42 	bl	8001564 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e6:	f7fe ff3d 	bl	8001564 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b64      	cmp	r3, #100	; 0x64
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e2fd      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f8:	4b8c      	ldr	r3, [pc, #560]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	4013      	ands	r3, r2
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0xf2>
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe ff2d 	bl	8001564 <HAL_GetTick>
 800270a:	0003      	movs	r3, r0
 800270c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe ff28 	bl	8001564 <HAL_GetTick>
 8002714:	0002      	movs	r2, r0
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e2e8      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b82      	ldr	r3, [pc, #520]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	029b      	lsls	r3, r3, #10
 800272a:	4013      	ands	r3, r2
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x11c>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2202      	movs	r2, #2
 8002738:	4013      	ands	r3, r2
 800273a:	d100      	bne.n	800273e <HAL_RCC_OscConfig+0x14a>
 800273c:	e06c      	b.n	8002818 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800273e:	4b7b      	ldr	r3, [pc, #492]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	220c      	movs	r2, #12
 8002744:	4013      	ands	r3, r2
 8002746:	d00e      	beq.n	8002766 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002748:	4b78      	ldr	r3, [pc, #480]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	220c      	movs	r2, #12
 800274e:	4013      	ands	r3, r2
 8002750:	2b08      	cmp	r3, #8
 8002752:	d11f      	bne.n	8002794 <HAL_RCC_OscConfig+0x1a0>
 8002754:	4b75      	ldr	r3, [pc, #468]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	23c0      	movs	r3, #192	; 0xc0
 800275a:	025b      	lsls	r3, r3, #9
 800275c:	401a      	ands	r2, r3
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	429a      	cmp	r2, r3
 8002764:	d116      	bne.n	8002794 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	4b71      	ldr	r3, [pc, #452]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2202      	movs	r2, #2
 800276c:	4013      	ands	r3, r2
 800276e:	d005      	beq.n	800277c <HAL_RCC_OscConfig+0x188>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d001      	beq.n	800277c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e2bb      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b6b      	ldr	r3, [pc, #428]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	22f8      	movs	r2, #248	; 0xf8
 8002782:	4393      	bics	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00da      	lsls	r2, r3, #3
 800278c:	4b67      	ldr	r3, [pc, #412]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e041      	b.n	8002818 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d024      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279c:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b62      	ldr	r3, [pc, #392]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fedc 	bl	8001564 <HAL_GetTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b2:	f7fe fed7 	bl	8001564 <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e297      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2202      	movs	r2, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	d0f1      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b57      	ldr	r3, [pc, #348]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	22f8      	movs	r2, #248	; 0xf8
 80027d4:	4393      	bics	r3, r2
 80027d6:	0019      	movs	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	00da      	lsls	r2, r3, #3
 80027de:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e018      	b.n	8002818 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e6:	4b51      	ldr	r3, [pc, #324]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b50      	ldr	r3, [pc, #320]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80027ec:	2101      	movs	r1, #1
 80027ee:	438a      	bics	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe feb7 	bl	8001564 <HAL_GetTick>
 80027f6:	0003      	movs	r3, r0
 80027f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fc:	f7fe feb2 	bl	8001564 <HAL_GetTick>
 8002800:	0002      	movs	r2, r0
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e272      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2202      	movs	r2, #2
 8002814:	4013      	ands	r3, r2
 8002816:	d1f1      	bne.n	80027fc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2208      	movs	r2, #8
 800281e:	4013      	ands	r3, r2
 8002820:	d036      	beq.n	8002890 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d019      	beq.n	800285e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282a:	4b40      	ldr	r3, [pc, #256]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800282c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282e:	4b3f      	ldr	r3, [pc, #252]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002830:	2101      	movs	r1, #1
 8002832:	430a      	orrs	r2, r1
 8002834:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe fe95 	bl	8001564 <HAL_GetTick>
 800283a:	0003      	movs	r3, r0
 800283c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe fe90 	bl	8001564 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e250      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	2202      	movs	r2, #2
 8002858:	4013      	ands	r3, r2
 800285a:	d0f1      	beq.n	8002840 <HAL_RCC_OscConfig+0x24c>
 800285c:	e018      	b.n	8002890 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002864:	2101      	movs	r1, #1
 8002866:	438a      	bics	r2, r1
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7fe fe7b 	bl	8001564 <HAL_GetTick>
 800286e:	0003      	movs	r3, r0
 8002870:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002874:	f7fe fe76 	bl	8001564 <HAL_GetTick>
 8002878:	0002      	movs	r2, r0
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e236      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002886:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2202      	movs	r2, #2
 800288c:	4013      	ands	r3, r2
 800288e:	d1f1      	bne.n	8002874 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2204      	movs	r2, #4
 8002896:	4013      	ands	r3, r2
 8002898:	d100      	bne.n	800289c <HAL_RCC_OscConfig+0x2a8>
 800289a:	e0b5      	b.n	8002a08 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289c:	201f      	movs	r0, #31
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	055b      	lsls	r3, r3, #21
 80028ac:	4013      	ands	r3, r2
 80028ae:	d110      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	0549      	lsls	r1, r1, #21
 80028ba:	430a      	orrs	r2, r1
 80028bc:	61da      	str	r2, [r3, #28]
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x338>)
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	055b      	lsls	r3, r3, #21
 80028c6:	4013      	ands	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028cc:	183b      	adds	r3, r7, r0
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_OscConfig+0x344>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4013      	ands	r3, r2
 80028dc:	d11a      	bne.n	8002914 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_RCC_OscConfig+0x344>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_RCC_OscConfig+0x344>)
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	0049      	lsls	r1, r1, #1
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ec:	f7fe fe3a 	bl	8001564 <HAL_GetTick>
 80028f0:	0003      	movs	r3, r0
 80028f2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe fe35 	bl	8001564 <HAL_GetTick>
 80028fa:	0002      	movs	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e1f5      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_OscConfig+0x344>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4013      	ands	r3, r2
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10f      	bne.n	800293c <HAL_RCC_OscConfig+0x348>
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_RCC_OscConfig+0x338>)
 800291e:	6a1a      	ldr	r2, [r3, #32]
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <HAL_RCC_OscConfig+0x338>)
 8002922:	2101      	movs	r1, #1
 8002924:	430a      	orrs	r2, r1
 8002926:	621a      	str	r2, [r3, #32]
 8002928:	e036      	b.n	8002998 <HAL_RCC_OscConfig+0x3a4>
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	40021000 	.word	0x40021000
 8002930:	fffeffff 	.word	0xfffeffff
 8002934:	fffbffff 	.word	0xfffbffff
 8002938:	40007000 	.word	0x40007000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10c      	bne.n	800295e <HAL_RCC_OscConfig+0x36a>
 8002944:	4bca      	ldr	r3, [pc, #808]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	4bc9      	ldr	r3, [pc, #804]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 800294a:	2101      	movs	r1, #1
 800294c:	438a      	bics	r2, r1
 800294e:	621a      	str	r2, [r3, #32]
 8002950:	4bc7      	ldr	r3, [pc, #796]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002952:	6a1a      	ldr	r2, [r3, #32]
 8002954:	4bc6      	ldr	r3, [pc, #792]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002956:	2104      	movs	r1, #4
 8002958:	438a      	bics	r2, r1
 800295a:	621a      	str	r2, [r3, #32]
 800295c:	e01c      	b.n	8002998 <HAL_RCC_OscConfig+0x3a4>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x38c>
 8002966:	4bc2      	ldr	r3, [pc, #776]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	4bc1      	ldr	r3, [pc, #772]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 800296c:	2104      	movs	r1, #4
 800296e:	430a      	orrs	r2, r1
 8002970:	621a      	str	r2, [r3, #32]
 8002972:	4bbf      	ldr	r3, [pc, #764]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002974:	6a1a      	ldr	r2, [r3, #32]
 8002976:	4bbe      	ldr	r3, [pc, #760]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002978:	2101      	movs	r1, #1
 800297a:	430a      	orrs	r2, r1
 800297c:	621a      	str	r2, [r3, #32]
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0x3a4>
 8002980:	4bbb      	ldr	r3, [pc, #748]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002982:	6a1a      	ldr	r2, [r3, #32]
 8002984:	4bba      	ldr	r3, [pc, #744]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002986:	2101      	movs	r1, #1
 8002988:	438a      	bics	r2, r1
 800298a:	621a      	str	r2, [r3, #32]
 800298c:	4bb8      	ldr	r3, [pc, #736]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	4bb7      	ldr	r3, [pc, #732]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002992:	2104      	movs	r1, #4
 8002994:	438a      	bics	r2, r1
 8002996:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d014      	beq.n	80029ca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fde0 	bl	8001564 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	e009      	b.n	80029be <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fddb 	bl	8001564 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	4aaf      	ldr	r2, [pc, #700]	; (8002c74 <HAL_RCC_OscConfig+0x680>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e19a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	4bac      	ldr	r3, [pc, #688]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x3b6>
 80029c8:	e013      	b.n	80029f2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fdcb 	bl	8001564 <HAL_GetTick>
 80029ce:	0003      	movs	r3, r0
 80029d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	e009      	b.n	80029e8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe fdc6 	bl	8001564 <HAL_GetTick>
 80029d8:	0002      	movs	r2, r0
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	4aa5      	ldr	r2, [pc, #660]	; (8002c74 <HAL_RCC_OscConfig+0x680>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e185      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	4ba1      	ldr	r3, [pc, #644]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	2202      	movs	r2, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029f2:	231f      	movs	r3, #31
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d105      	bne.n	8002a08 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fc:	4b9c      	ldr	r3, [pc, #624]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	4b9b      	ldr	r3, [pc, #620]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a02:	499d      	ldr	r1, [pc, #628]	; (8002c78 <HAL_RCC_OscConfig+0x684>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d063      	beq.n	8002ada <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d12a      	bne.n	8002a70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a1a:	4b95      	ldr	r3, [pc, #596]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1e:	4b94      	ldr	r3, [pc, #592]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a20:	2104      	movs	r1, #4
 8002a22:	430a      	orrs	r2, r1
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a26:	4b92      	ldr	r3, [pc, #584]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2a:	4b91      	ldr	r3, [pc, #580]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7fe fd97 	bl	8001564 <HAL_GetTick>
 8002a36:	0003      	movs	r3, r0
 8002a38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a3c:	f7fe fd92 	bl	8001564 <HAL_GetTick>
 8002a40:	0002      	movs	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e152      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a4e:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	d0f1      	beq.n	8002a3c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a58:	4b85      	ldr	r3, [pc, #532]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5c:	22f8      	movs	r2, #248	; 0xf8
 8002a5e:	4393      	bics	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	00da      	lsls	r2, r3, #3
 8002a68:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6e:	e034      	b.n	8002ada <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	3305      	adds	r3, #5
 8002a76:	d111      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a78:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7c:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a7e:	2104      	movs	r1, #4
 8002a80:	438a      	bics	r2, r1
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a84:	4b7a      	ldr	r3, [pc, #488]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	22f8      	movs	r2, #248	; 0xf8
 8002a8a:	4393      	bics	r3, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	00da      	lsls	r2, r3, #3
 8002a94:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9a:	e01e      	b.n	8002ada <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a9c:	4b74      	ldr	r3, [pc, #464]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa0:	4b73      	ldr	r3, [pc, #460]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002aa8:	4b71      	ldr	r3, [pc, #452]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aac:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fd56 	bl	8001564 <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002abe:	f7fe fd51 	bl	8001564 <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e111      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ad0:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d1f1      	bne.n	8002abe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d05c      	beq.n	8002b9e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ae4:	4b62      	ldr	r3, [pc, #392]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	220c      	movs	r2, #12
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b0c      	cmp	r3, #12
 8002aee:	d00e      	beq.n	8002b0e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002af0:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	220c      	movs	r2, #12
 8002af6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d114      	bne.n	8002b26 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002afc:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	23c0      	movs	r3, #192	; 0xc0
 8002b02:	025b      	lsls	r3, r3, #9
 8002b04:	401a      	ands	r2, r3
 8002b06:	23c0      	movs	r3, #192	; 0xc0
 8002b08:	025b      	lsls	r3, r3, #9
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	025b      	lsls	r3, r3, #9
 8002b16:	4013      	ands	r3, r2
 8002b18:	d040      	beq.n	8002b9c <HAL_RCC_OscConfig+0x5a8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d03c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0e6      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b2e:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b32:	4b4f      	ldr	r3, [pc, #316]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	0249      	lsls	r1, r1, #9
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fd12 	bl	8001564 <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b46:	f7fe fd0d 	bl	8001564 <HAL_GetTick>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0cd      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b58:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	025b      	lsls	r3, r3, #9
 8002b60:	4013      	ands	r3, r2
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x552>
 8002b64:	e01b      	b.n	8002b9e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002b66:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002b6c:	4943      	ldr	r1, [pc, #268]	; (8002c7c <HAL_RCC_OscConfig+0x688>)
 8002b6e:	400a      	ands	r2, r1
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fcf7 	bl	8001564 <HAL_GetTick>
 8002b76:	0003      	movs	r3, r0
 8002b78:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b7c:	f7fe fcf2 	bl	8001564 <HAL_GetTick>
 8002b80:	0002      	movs	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e0b2      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002b8e:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	025b      	lsls	r3, r3, #9
 8002b96:	4013      	ands	r3, r2
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x588>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b9c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d100      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x5b4>
 8002ba6:	e0a4      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	220c      	movs	r2, #12
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d100      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x5c2>
 8002bb4:	e078      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d14c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002bc4:	492e      	ldr	r1, [pc, #184]	; (8002c80 <HAL_RCC_OscConfig+0x68c>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe fccb 	bl	8001564 <HAL_GetTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe fcc6 	bl	8001564 <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e086      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	049b      	lsls	r3, r3, #18
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <HAL_RCC_OscConfig+0x690>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	0449      	lsls	r1, r1, #17
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe fc99 	bl	8001564 <HAL_GetTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fc94 	bl	8001564 <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e054      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	049b      	lsls	r3, r3, #18
 8002c52:	4013      	ands	r3, r2
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x644>
 8002c56:	e04c      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <HAL_RCC_OscConfig+0x67c>)
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <HAL_RCC_OscConfig+0x68c>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fc7e 	bl	8001564 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6c:	e015      	b.n	8002c9a <HAL_RCC_OscConfig+0x6a6>
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	40021000 	.word	0x40021000
 8002c74:	00001388 	.word	0x00001388
 8002c78:	efffffff 	.word	0xefffffff
 8002c7c:	fffeffff 	.word	0xfffeffff
 8002c80:	feffffff 	.word	0xfeffffff
 8002c84:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fc6c 	bl	8001564 <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e02c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_RCC_OscConfig+0x708>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	049b      	lsls	r3, r3, #18
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x694>
 8002ca6:	e024      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e01f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_OscConfig+0x708>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_RCC_OscConfig+0x708>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	23c0      	movs	r3, #192	; 0xc0
 8002cc4:	025b      	lsls	r3, r3, #9
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d10e      	bne.n	8002cee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	23f0      	movs	r3, #240	; 0xf0
 8002ce2:	039b      	lsls	r3, r3, #14
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b008      	add	sp, #32
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0bf      	b.n	8002e94 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <HAL_RCC_ClockConfig+0x19c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d911      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <HAL_RCC_ClockConfig+0x19c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	4393      	bics	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <HAL_RCC_ClockConfig+0x19c>)
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HAL_RCC_ClockConfig+0x19c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0a6      	b.n	8002e94 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2204      	movs	r2, #4
 8002d56:	4013      	ands	r3, r2
 8002d58:	d006      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002d60:	21e0      	movs	r1, #224	; 0xe0
 8002d62:	00c9      	lsls	r1, r1, #3
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b4d      	ldr	r3, [pc, #308]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	22f0      	movs	r2, #240	; 0xf0
 8002d6e:	4393      	bics	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	4013      	ands	r3, r2
 8002d84:	d04c      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	029b      	lsls	r3, r3, #10
 8002d96:	4013      	ands	r3, r2
 8002d98:	d120      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07a      	b.n	8002e94 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	4b3e      	ldr	r3, [pc, #248]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	049b      	lsls	r3, r3, #18
 8002dae:	4013      	ands	r3, r2
 8002db0:	d114      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06e      	b.n	8002e94 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	025b      	lsls	r3, r3, #9
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e062      	b.n	8002e94 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e05b      	b.n	8002e94 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ddc:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2203      	movs	r2, #3
 8002de2:	4393      	bics	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df0:	f7fe fbb8 	bl	8001564 <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df8:	e009      	b.n	8002e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfa:	f7fe fbb3 	bl	8001564 <HAL_GetTick>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <HAL_RCC_ClockConfig+0x1a4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e042      	b.n	8002e94 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	220c      	movs	r2, #12
 8002e14:	401a      	ands	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d1ec      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <HAL_RCC_ClockConfig+0x19c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2201      	movs	r2, #1
 8002e26:	4013      	ands	r3, r2
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d211      	bcs.n	8002e52 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCC_ClockConfig+0x19c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	4393      	bics	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_RCC_ClockConfig+0x19c>)
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e40:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x19c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	4013      	ands	r3, r2
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e020      	b.n	8002e94 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2204      	movs	r2, #4
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_RCC_ClockConfig+0x1a8>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e70:	f000 f820 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e74:	0001      	movs	r1, r0
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_RCC_ClockConfig+0x1a0>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	4013      	ands	r3, r2
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x1ac>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	000a      	movs	r2, r1
 8002e86:	40da      	lsrs	r2, r3
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e8c:	2003      	movs	r0, #3
 8002e8e:	f7fe fb23 	bl	80014d8 <HAL_InitTick>
  
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b004      	add	sp, #16
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	00001388 	.word	0x00001388
 8002ea8:	fffff8ff 	.word	0xfffff8ff
 8002eac:	08007494 	.word	0x08007494
 8002eb0:	20001c08 	.word	0x20001c08

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b08f      	sub	sp, #60	; 0x3c
 8002eb8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002eba:	2314      	movs	r3, #20
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	4a38      	ldr	r2, [pc, #224]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xec>)
 8002ec0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ec2:	c313      	stmia	r3!, {r0, r1, r4}
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	4a36      	ldr	r2, [pc, #216]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002ecc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ece:	c313      	stmia	r3!, {r0, r1, r4}
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002edc:	2300      	movs	r3, #0
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	220c      	movs	r2, #12
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d047      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0xd4>
 8002ef8:	d849      	bhi.n	8002f8e <HAL_RCC_GetSysClockFreq+0xda>
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x50>
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x56>
 8002f02:	e044      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f04:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f08:	e044      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	0c9b      	lsrs	r3, r3, #18
 8002f0e:	220f      	movs	r2, #15
 8002f10:	4013      	ands	r3, r2
 8002f12:	2214      	movs	r2, #20
 8002f14:	18ba      	adds	r2, r7, r2
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f1a:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	220f      	movs	r2, #15
 8002f20:	4013      	ands	r3, r2
 8002f22:	1d3a      	adds	r2, r7, #4
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	025b      	lsls	r3, r3, #9
 8002f2e:	401a      	ands	r2, r3
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	025b      	lsls	r3, r3, #9
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d109      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3a:	481c      	ldr	r0, [pc, #112]	; (8002fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3c:	f7fd f8e4 	bl	8000108 <__udivsi3>
 8002f40:	0003      	movs	r3, r0
 8002f42:	001a      	movs	r2, r3
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	4353      	muls	r3, r2
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4a:	e01a      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4e:	23c0      	movs	r3, #192	; 0xc0
 8002f50:	025b      	lsls	r3, r3, #9
 8002f52:	401a      	ands	r2, r3
 8002f54:	23c0      	movs	r3, #192	; 0xc0
 8002f56:	025b      	lsls	r3, r3, #9
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d109      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f5e:	4814      	ldr	r0, [pc, #80]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f60:	f7fd f8d2 	bl	8000108 <__udivsi3>
 8002f64:	0003      	movs	r3, r0
 8002f66:	001a      	movs	r2, r3
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	4353      	muls	r3, r2
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f72:	480e      	ldr	r0, [pc, #56]	; (8002fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f74:	f7fd f8c8 	bl	8000108 <__udivsi3>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	4353      	muls	r3, r2
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f86:	e005      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f8c:	e002      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f92:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b00f      	add	sp, #60	; 0x3c
 8002f9c:	bd90      	pop	{r4, r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	08007438 	.word	0x08007438
 8002fa4:	08007448 	.word	0x08007448
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	007a1200 	.word	0x007a1200
 8002fb0:	02dc6c00 	.word	0x02dc6c00

08002fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	20001c08 	.word	0x20001c08

08002fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002fcc:	f7ff fff2 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd0:	0001      	movs	r1, r0
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	2207      	movs	r2, #7
 8002fda:	4013      	ands	r3, r2
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	40d9      	lsrs	r1, r3
 8002fe2:	000b      	movs	r3, r1
}    
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	080074a4 	.word	0x080074a4

08002ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	025b      	lsls	r3, r3, #9
 800300c:	4013      	ands	r3, r2
 800300e:	d100      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003010:	e08e      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003012:	2017      	movs	r0, #23
 8003014:	183b      	adds	r3, r7, r0
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301a:	4b6e      	ldr	r3, [pc, #440]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	055b      	lsls	r3, r3, #21
 8003022:	4013      	ands	r3, r2
 8003024:	d110      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	4b6b      	ldr	r3, [pc, #428]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	0549      	lsls	r1, r1, #21
 8003030:	430a      	orrs	r2, r1
 8003032:	61da      	str	r2, [r3, #28]
 8003034:	4b67      	ldr	r3, [pc, #412]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	055b      	lsls	r3, r3, #21
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003042:	183b      	adds	r3, r7, r0
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4013      	ands	r3, r2
 8003052:	d11a      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003054:	4b60      	ldr	r3, [pc, #384]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b5f      	ldr	r3, [pc, #380]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	0049      	lsls	r1, r1, #1
 800305e:	430a      	orrs	r2, r1
 8003060:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003062:	f7fe fa7f 	bl	8001564 <HAL_GetTick>
 8003066:	0003      	movs	r3, r0
 8003068:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	e008      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306c:	f7fe fa7a 	bl	8001564 <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0a6      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4013      	ands	r3, r2
 8003088:	d0f0      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800308a:	4b52      	ldr	r3, [pc, #328]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	23c0      	movs	r3, #192	; 0xc0
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4013      	ands	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d034      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	23c0      	movs	r3, #192	; 0xc0
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4013      	ands	r3, r2
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d02c      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ac:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4a4a      	ldr	r2, [pc, #296]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030b8:	6a1a      	ldr	r2, [r3, #32]
 80030ba:	4b46      	ldr	r3, [pc, #280]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	0249      	lsls	r1, r1, #9
 80030c0:	430a      	orrs	r2, r1
 80030c2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c4:	4b43      	ldr	r3, [pc, #268]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030ca:	4945      	ldr	r1, [pc, #276]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80030cc:	400a      	ands	r2, r1
 80030ce:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030d0:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fa41 	bl	8001564 <HAL_GetTick>
 80030e2:	0003      	movs	r3, r0
 80030e4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e6:	e009      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7fe fa3c 	bl	8001564 <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	4a3c      	ldr	r2, [pc, #240]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e067      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	2202      	movs	r2, #2
 8003102:	4013      	ands	r3, r2
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003106:	4b33      	ldr	r3, [pc, #204]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4a34      	ldr	r2, [pc, #208]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003116:	430a      	orrs	r2, r1
 8003118:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800311a:	2317      	movs	r3, #23
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800312a:	492f      	ldr	r1, [pc, #188]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800312c:	400a      	ands	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	2203      	movs	r2, #3
 8003140:	4393      	bics	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800314a:	430a      	orrs	r2, r1
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2202      	movs	r2, #2
 8003154:	4013      	ands	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	4a23      	ldr	r2, [pc, #140]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800315e:	4013      	ands	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003168:	430a      	orrs	r2, r1
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	02db      	lsls	r3, r3, #11
 8003174:	4013      	ands	r3, r2
 8003176:	d009      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800317e:	4013      	ands	r3, r2
 8003180:	0019      	movs	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003188:	430a      	orrs	r2, r1
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2220      	movs	r2, #32
 8003192:	4013      	ands	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	2210      	movs	r2, #16
 800319c:	4393      	bics	r3, r2
 800319e:	0019      	movs	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031a6:	430a      	orrs	r2, r1
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4013      	ands	r3, r2
 80031b4:	d009      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	2240      	movs	r2, #64	; 0x40
 80031bc:	4393      	bics	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031c6:	430a      	orrs	r2, r1
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b006      	add	sp, #24
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40007000 	.word	0x40007000
 80031dc:	fffffcff 	.word	0xfffffcff
 80031e0:	fffeffff 	.word	0xfffeffff
 80031e4:	00001388 	.word	0x00001388
 80031e8:	efffffff 	.word	0xefffffff
 80031ec:	fffcffff 	.word	0xfffcffff
 80031f0:	fff3ffff 	.word	0xfff3ffff

080031f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0a8      	b.n	8003358 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	2382      	movs	r3, #130	; 0x82
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	429a      	cmp	r2, r3
 8003218:	d009      	beq.n	800322e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	61da      	str	r2, [r3, #28]
 8003220:	e005      	b.n	800322e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	225d      	movs	r2, #93	; 0x5d
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	225c      	movs	r2, #92	; 0x5c
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0018      	movs	r0, r3
 800324c:	f7fd ff9a 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	225d      	movs	r2, #93	; 0x5d
 8003254:	2102      	movs	r1, #2
 8003256:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2140      	movs	r1, #64	; 0x40
 8003264:	438a      	bics	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	23e0      	movs	r3, #224	; 0xe0
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	429a      	cmp	r2, r3
 8003272:	d902      	bls.n	800327a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	e002      	b.n	8003280 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	015b      	lsls	r3, r3, #5
 800327e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	23f0      	movs	r3, #240	; 0xf0
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	429a      	cmp	r2, r3
 800328a:	d008      	beq.n	800329e <HAL_SPI_Init+0xaa>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	23e0      	movs	r3, #224	; 0xe0
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	429a      	cmp	r2, r3
 8003296:	d002      	beq.n	800329e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	2382      	movs	r3, #130	; 0x82
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	401a      	ands	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6899      	ldr	r1, [r3, #8]
 80032ac:	2384      	movs	r3, #132	; 0x84
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	400b      	ands	r3, r1
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	2102      	movs	r1, #2
 80032ba:	400b      	ands	r3, r1
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2101      	movs	r1, #1
 80032c4:	400b      	ands	r3, r1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6999      	ldr	r1, [r3, #24]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	400b      	ands	r3, r1
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2138      	movs	r1, #56	; 0x38
 80032da:	400b      	ands	r3, r1
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	2180      	movs	r1, #128	; 0x80
 80032e4:	400b      	ands	r3, r1
 80032e6:	431a      	orrs	r2, r3
 80032e8:	0011      	movs	r1, r2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	019b      	lsls	r3, r3, #6
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	2204      	movs	r2, #4
 8003304:	401a      	ands	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2110      	movs	r1, #16
 800330c:	400b      	ands	r3, r1
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003314:	2108      	movs	r1, #8
 8003316:	400b      	ands	r3, r1
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68d9      	ldr	r1, [r3, #12]
 800331e:	23f0      	movs	r3, #240	; 0xf0
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	400b      	ands	r3, r1
 8003324:	431a      	orrs	r2, r3
 8003326:	0011      	movs	r1, r2
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	015b      	lsls	r3, r3, #5
 800332e:	401a      	ands	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4907      	ldr	r1, [pc, #28]	; (8003360 <HAL_SPI_Init+0x16c>)
 8003344:	400a      	ands	r2, r1
 8003346:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	225d      	movs	r2, #93	; 0x5d
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}
 8003360:	fffff7ff 	.word	0xfffff7ff

08003364 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	1dbb      	adds	r3, r7, #6
 8003372:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003374:	231f      	movs	r3, #31
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	225c      	movs	r2, #92	; 0x5c
 8003380:	5c9b      	ldrb	r3, [r3, r2]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_SPI_Transmit+0x26>
 8003386:	2302      	movs	r3, #2
 8003388:	e140      	b.n	800360c <HAL_SPI_Transmit+0x2a8>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	225c      	movs	r2, #92	; 0x5c
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003392:	f7fe f8e7 	bl	8001564 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800339a:	2316      	movs	r3, #22
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	1dba      	adds	r2, r7, #6
 80033a0:	8812      	ldrh	r2, [r2, #0]
 80033a2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	225d      	movs	r2, #93	; 0x5d
 80033a8:	5c9b      	ldrb	r3, [r3, r2]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d004      	beq.n	80033ba <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80033b0:	231f      	movs	r3, #31
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80033b8:	e11d      	b.n	80035f6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_SPI_Transmit+0x64>
 80033c0:	1dbb      	adds	r3, r7, #6
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80033c8:	231f      	movs	r3, #31
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80033d0:	e111      	b.n	80035f6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	225d      	movs	r2, #93	; 0x5d
 80033d6:	2103      	movs	r1, #3
 80033d8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1dba      	adds	r2, r7, #6
 80033ea:	8812      	ldrh	r2, [r2, #0]
 80033ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1dba      	adds	r2, r7, #6
 80033f2:	8812      	ldrh	r2, [r2, #0]
 80033f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2244      	movs	r2, #68	; 0x44
 8003400:	2100      	movs	r1, #0
 8003402:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2246      	movs	r2, #70	; 0x46
 8003408:	2100      	movs	r1, #0
 800340a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	429a      	cmp	r2, r3
 8003422:	d110      	bne.n	8003446 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2140      	movs	r1, #64	; 0x40
 8003430:	438a      	bics	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	01c9      	lsls	r1, r1, #7
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2240      	movs	r2, #64	; 0x40
 800344e:	4013      	ands	r3, r2
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d007      	beq.n	8003464 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2140      	movs	r1, #64	; 0x40
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	23e0      	movs	r3, #224	; 0xe0
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	429a      	cmp	r2, r3
 800346e:	d94e      	bls.n	800350e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <HAL_SPI_Transmit+0x11e>
 8003478:	2316      	movs	r3, #22
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d13f      	bne.n	8003502 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034a6:	e02c      	b.n	8003502 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2202      	movs	r2, #2
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d112      	bne.n	80034dc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	881a      	ldrh	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	1c9a      	adds	r2, r3, #2
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034da:	e012      	b.n	8003502 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034dc:	f7fe f842 	bl	8001564 <HAL_GetTick>
 80034e0:	0002      	movs	r2, r0
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d802      	bhi.n	80034f2 <HAL_SPI_Transmit+0x18e>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_SPI_Transmit+0x194>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80034f8:	231f      	movs	r3, #31
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2203      	movs	r2, #3
 80034fe:	701a      	strb	r2, [r3, #0]
          goto error;
 8003500:	e079      	b.n	80035f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1cd      	bne.n	80034a8 <HAL_SPI_Transmit+0x144>
 800350c:	e04f      	b.n	80035ae <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <HAL_SPI_Transmit+0x1bc>
 8003516:	2316      	movs	r3, #22
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d141      	bne.n	80035a4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003546:	e02d      	b.n	80035a4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2202      	movs	r2, #2
 8003550:	4013      	ands	r3, r2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d113      	bne.n	800357e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800357c:	e012      	b.n	80035a4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357e:	f7fd fff1 	bl	8001564 <HAL_GetTick>
 8003582:	0002      	movs	r2, r0
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d802      	bhi.n	8003594 <HAL_SPI_Transmit+0x230>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	d102      	bne.n	800359a <HAL_SPI_Transmit+0x236>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800359a:	231f      	movs	r3, #31
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	2203      	movs	r2, #3
 80035a0:	701a      	strb	r2, [r3, #0]
          goto error;
 80035a2:	e028      	b.n	80035f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1cc      	bne.n	8003548 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 f95d 	bl	8003874 <SPI_EndRxTxTransaction>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80035ea:	231f      	movs	r3, #31
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e000      	b.n	80035f6 <HAL_SPI_Transmit+0x292>
  }

error:
 80035f4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	225d      	movs	r2, #93	; 0x5d
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	225c      	movs	r2, #92	; 0x5c
 8003602:	2100      	movs	r1, #0
 8003604:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003606:	231f      	movs	r3, #31
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	781b      	ldrb	r3, [r3, #0]
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b008      	add	sp, #32
 8003612:	bd80      	pop	{r7, pc}

08003614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	1dfb      	adds	r3, r7, #7
 8003622:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003624:	f7fd ff9e 	bl	8001564 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	18d3      	adds	r3, r2, r3
 8003632:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003634:	f7fd ff96 	bl	8001564 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800363c:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	015b      	lsls	r3, r3, #5
 8003642:	0d1b      	lsrs	r3, r3, #20
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	4353      	muls	r3, r2
 8003648:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800364a:	e058      	b.n	80036fe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	d055      	beq.n	80036fe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003652:	f7fd ff87 	bl	8001564 <HAL_GetTick>
 8003656:	0002      	movs	r2, r0
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	429a      	cmp	r2, r3
 8003660:	d902      	bls.n	8003668 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d142      	bne.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	21e0      	movs	r1, #224	; 0xe0
 8003674:	438a      	bics	r2, r1
 8003676:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	2382      	movs	r3, #130	; 0x82
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	429a      	cmp	r2, r3
 8003682:	d113      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x98>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	429a      	cmp	r2, r3
 800368e:	d005      	beq.n	800369c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	429a      	cmp	r2, r3
 800369a:	d107      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	438a      	bics	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	019b      	lsls	r3, r3, #6
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d110      	bne.n	80036da <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	491a      	ldr	r1, [pc, #104]	; (800372c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80036c4:	400a      	ands	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	0189      	lsls	r1, r1, #6
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	225d      	movs	r2, #93	; 0x5d
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	225c      	movs	r2, #92	; 0x5c
 80036e6:	2100      	movs	r1, #0
 80036e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e017      	b.n	800371e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	425a      	negs	r2, r3
 800370e:	4153      	adcs	r3, r2
 8003710:	b2db      	uxtb	r3, r3
 8003712:	001a      	movs	r2, r3
 8003714:	1dfb      	adds	r3, r7, #7
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d197      	bne.n	800364c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b008      	add	sp, #32
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	20001c08 	.word	0x20001c08
 800372c:	ffffdfff 	.word	0xffffdfff

08003730 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800373e:	2317      	movs	r3, #23
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003746:	f7fd ff0d 	bl	8001564 <HAL_GetTick>
 800374a:	0002      	movs	r2, r0
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	18d3      	adds	r3, r2, r3
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003756:	f7fd ff05 	bl	8001564 <HAL_GetTick>
 800375a:	0003      	movs	r3, r0
 800375c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003766:	4b41      	ldr	r3, [pc, #260]	; (800386c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	0013      	movs	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	189b      	adds	r3, r3, r2
 8003770:	00da      	lsls	r2, r3, #3
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	0d1b      	lsrs	r3, r3, #20
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	4353      	muls	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800377c:	e068      	b.n	8003850 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	23c0      	movs	r3, #192	; 0xc0
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	429a      	cmp	r2, r3
 8003786:	d10a      	bne.n	800379e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	2117      	movs	r1, #23
 8003796:	187b      	adds	r3, r7, r1
 8003798:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800379a:	187b      	adds	r3, r7, r1
 800379c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	d055      	beq.n	8003850 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037a4:	f7fd fede 	bl	8001564 <HAL_GetTick>
 80037a8:	0002      	movs	r2, r0
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d902      	bls.n	80037ba <SPI_WaitFifoStateUntilTimeout+0x8a>
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d142      	bne.n	8003840 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	21e0      	movs	r1, #224	; 0xe0
 80037c6:	438a      	bics	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	2382      	movs	r3, #130	; 0x82
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d113      	bne.n	80037fe <SPI_WaitFifoStateUntilTimeout+0xce>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	429a      	cmp	r2, r3
 80037e0:	d005      	beq.n	80037ee <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d107      	bne.n	80037fe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2140      	movs	r1, #64	; 0x40
 80037fa:	438a      	bics	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	019b      	lsls	r3, r3, #6
 8003806:	429a      	cmp	r2, r3
 8003808:	d110      	bne.n	800382c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4916      	ldr	r1, [pc, #88]	; (8003870 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003816:	400a      	ands	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	0189      	lsls	r1, r1, #6
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	225d      	movs	r2, #93	; 0x5d
 8003830:	2101      	movs	r1, #1
 8003832:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	225c      	movs	r2, #92	; 0x5c
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e010      	b.n	8003862 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3b01      	subs	r3, #1
 800384e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d18e      	bne.n	800377e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b00a      	add	sp, #40	; 0x28
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	20001c08 	.word	0x20001c08
 8003870:	ffffdfff 	.word	0xffffdfff

08003874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	23c0      	movs	r3, #192	; 0xc0
 8003884:	0159      	lsls	r1, r3, #5
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	0013      	movs	r3, r2
 800388e:	2200      	movs	r2, #0
 8003890:	f7ff ff4e 	bl	8003730 <SPI_WaitFifoStateUntilTimeout>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d007      	beq.n	80038a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	2220      	movs	r2, #32
 800389e:	431a      	orrs	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e027      	b.n	80038f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	0013      	movs	r3, r2
 80038b2:	2200      	movs	r2, #0
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	f7ff fead 	bl	8003614 <SPI_WaitFlagStateUntilTimeout>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d007      	beq.n	80038ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	2220      	movs	r2, #32
 80038c4:	431a      	orrs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e014      	b.n	80038f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	23c0      	movs	r3, #192	; 0xc0
 80038d2:	00d9      	lsls	r1, r3, #3
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	0013      	movs	r3, r2
 80038dc:	2200      	movs	r2, #0
 80038de:	f7ff ff27 	bl	8003730 <SPI_WaitFifoStateUntilTimeout>
 80038e2:	1e03      	subs	r3, r0, #0
 80038e4:	d007      	beq.n	80038f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	2220      	movs	r2, #32
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e000      	b.n	80038f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b004      	add	sp, #16
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e042      	b.n	8003998 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	223d      	movs	r2, #61	; 0x3d
 8003916:	5c9b      	ldrb	r3, [r3, r2]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d107      	bne.n	800392e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	223c      	movs	r2, #60	; 0x3c
 8003922:	2100      	movs	r1, #0
 8003924:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	0018      	movs	r0, r3
 800392a:	f7fd fc77 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	223d      	movs	r2, #61	; 0x3d
 8003932:	2102      	movs	r1, #2
 8003934:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	0019      	movs	r1, r3
 8003940:	0010      	movs	r0, r2
 8003942:	f000 fad7 	bl	8003ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2246      	movs	r2, #70	; 0x46
 800394a:	2101      	movs	r1, #1
 800394c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	223e      	movs	r2, #62	; 0x3e
 8003952:	2101      	movs	r1, #1
 8003954:	5499      	strb	r1, [r3, r2]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	223f      	movs	r2, #63	; 0x3f
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2240      	movs	r2, #64	; 0x40
 8003962:	2101      	movs	r1, #1
 8003964:	5499      	strb	r1, [r3, r2]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2241      	movs	r2, #65	; 0x41
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2242      	movs	r2, #66	; 0x42
 8003972:	2101      	movs	r1, #1
 8003974:	5499      	strb	r1, [r3, r2]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2243      	movs	r2, #67	; 0x43
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2244      	movs	r2, #68	; 0x44
 8003982:	2101      	movs	r1, #1
 8003984:	5499      	strb	r1, [r3, r2]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2245      	movs	r2, #69	; 0x45
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	223d      	movs	r2, #61	; 0x3d
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e042      	b.n	8003a38 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	223d      	movs	r2, #61	; 0x3d
 80039b6:	5c9b      	ldrb	r3, [r3, r2]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d107      	bne.n	80039ce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	223c      	movs	r2, #60	; 0x3c
 80039c2:	2100      	movs	r1, #0
 80039c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 f839 	bl	8003a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	223d      	movs	r2, #61	; 0x3d
 80039d2:	2102      	movs	r1, #2
 80039d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	0019      	movs	r1, r3
 80039e0:	0010      	movs	r0, r2
 80039e2:	f000 fa87 	bl	8003ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2246      	movs	r2, #70	; 0x46
 80039ea:	2101      	movs	r1, #1
 80039ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	223e      	movs	r2, #62	; 0x3e
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	223f      	movs	r2, #63	; 0x3f
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2240      	movs	r2, #64	; 0x40
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2241      	movs	r2, #65	; 0x41
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2242      	movs	r2, #66	; 0x42
 8003a12:	2101      	movs	r1, #1
 8003a14:	5499      	strb	r1, [r3, r2]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2243      	movs	r2, #67	; 0x43
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2244      	movs	r2, #68	; 0x44
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2245      	movs	r2, #69	; 0x45
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	223d      	movs	r2, #61	; 0x3d
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d108      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x22>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	223e      	movs	r2, #62	; 0x3e
 8003a64:	5c9b      	ldrb	r3, [r3, r2]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	1e5a      	subs	r2, r3, #1
 8003a6c:	4193      	sbcs	r3, r2
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	e01f      	b.n	8003ab2 <HAL_TIM_PWM_Start+0x62>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d108      	bne.n	8003a8a <HAL_TIM_PWM_Start+0x3a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	223f      	movs	r2, #63	; 0x3f
 8003a7c:	5c9b      	ldrb	r3, [r3, r2]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	1e5a      	subs	r2, r3, #1
 8003a84:	4193      	sbcs	r3, r2
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	e013      	b.n	8003ab2 <HAL_TIM_PWM_Start+0x62>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d108      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0x52>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2240      	movs	r2, #64	; 0x40
 8003a94:	5c9b      	ldrb	r3, [r3, r2]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	1e5a      	subs	r2, r3, #1
 8003a9c:	4193      	sbcs	r3, r2
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e007      	b.n	8003ab2 <HAL_TIM_PWM_Start+0x62>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2241      	movs	r2, #65	; 0x41
 8003aa6:	5c9b      	ldrb	r3, [r3, r2]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	1e5a      	subs	r2, r3, #1
 8003aae:	4193      	sbcs	r3, r2
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e074      	b.n	8003ba4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Start+0x7a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	223e      	movs	r2, #62	; 0x3e
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	5499      	strb	r1, [r3, r2]
 8003ac8:	e013      	b.n	8003af2 <HAL_TIM_PWM_Start+0xa2>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Start+0x8a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	223f      	movs	r2, #63	; 0x3f
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	5499      	strb	r1, [r3, r2]
 8003ad8:	e00b      	b.n	8003af2 <HAL_TIM_PWM_Start+0xa2>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Start+0x9a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2240      	movs	r2, #64	; 0x40
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	5499      	strb	r1, [r3, r2]
 8003ae8:	e003      	b.n	8003af2 <HAL_TIM_PWM_Start+0xa2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2241      	movs	r2, #65	; 0x41
 8003aee:	2102      	movs	r1, #2
 8003af0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6839      	ldr	r1, [r7, #0]
 8003af8:	2201      	movs	r2, #1
 8003afa:	0018      	movs	r0, r3
 8003afc:	f000 fd10 	bl	8004520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a29      	ldr	r2, [pc, #164]	; (8003bac <HAL_TIM_PWM_Start+0x15c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_PWM_Start+0xd8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <HAL_TIM_PWM_Start+0x160>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_TIM_PWM_Start+0xd8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a26      	ldr	r2, [pc, #152]	; (8003bb4 <HAL_TIM_PWM_Start+0x164>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_PWM_Start+0xd8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <HAL_TIM_PWM_Start+0x168>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_TIM_PWM_Start+0xdc>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_TIM_PWM_Start+0xde>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	0209      	lsls	r1, r1, #8
 8003b40:	430a      	orrs	r2, r1
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIM_PWM_Start+0x15c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00f      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x11e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	05db      	lsls	r3, r3, #23
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d009      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x11e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <HAL_TIM_PWM_Start+0x16c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x11e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <HAL_TIM_PWM_Start+0x160>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d111      	bne.n	8003b92 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2207      	movs	r2, #7
 8003b76:	4013      	ands	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b06      	cmp	r3, #6
 8003b7e:	d010      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	e007      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40014400 	.word	0x40014400
 8003bb8:	40014800 	.word	0x40014800
 8003bbc:	40000400 	.word	0x40000400

08003bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bcc:	2317      	movs	r3, #23
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	223c      	movs	r2, #60	; 0x3c
 8003bd8:	5c9b      	ldrb	r3, [r3, r2]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0ad      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	223c      	movs	r2, #60	; 0x3c
 8003be6:	2101      	movs	r1, #1
 8003be8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d100      	bne.n	8003bf2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003bf0:	e076      	b.n	8003ce0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b0c      	cmp	r3, #12
 8003bf6:	d900      	bls.n	8003bfa <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003bf8:	e095      	b.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d04e      	beq.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0xde>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d900      	bls.n	8003c08 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003c06:	e08e      	b.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d021      	beq.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003c14:	e087      	b.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	0011      	movs	r1, r2
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 f9e8 	bl	8003ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2108      	movs	r1, #8
 8003c30:	430a      	orrs	r2, r1
 8003c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2104      	movs	r1, #4
 8003c40:	438a      	bics	r2, r1
 8003c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6999      	ldr	r1, [r3, #24]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	619a      	str	r2, [r3, #24]
      break;
 8003c56:	e06b      	b.n	8003d30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	0011      	movs	r1, r2
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 fa4f 	bl	8004104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	0109      	lsls	r1, r1, #4
 8003c74:	430a      	orrs	r2, r1
 8003c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4931      	ldr	r1, [pc, #196]	; (8003d48 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003c84:	400a      	ands	r2, r1
 8003c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6999      	ldr	r1, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	619a      	str	r2, [r3, #24]
      break;
 8003c9c:	e048      	b.n	8003d30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	0011      	movs	r1, r2
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 fab0 	bl	800420c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2108      	movs	r1, #8
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69da      	ldr	r2, [r3, #28]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	438a      	bics	r2, r1
 8003cca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69d9      	ldr	r1, [r3, #28]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	61da      	str	r2, [r3, #28]
      break;
 8003cde:	e027      	b.n	8003d30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f000 fb15 	bl	8004318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2180      	movs	r1, #128	; 0x80
 8003cfa:	0109      	lsls	r1, r1, #4
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	490f      	ldr	r1, [pc, #60]	; (8003d48 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69d9      	ldr	r1, [r3, #28]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	61da      	str	r2, [r3, #28]
      break;
 8003d24:	e004      	b.n	8003d30 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003d26:	2317      	movs	r3, #23
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
      break;
 8003d2e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	223c      	movs	r2, #60	; 0x3c
 8003d34:	2100      	movs	r1, #0
 8003d36:	5499      	strb	r1, [r3, r2]

  return status;
 8003d38:	2317      	movs	r3, #23
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b006      	add	sp, #24
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	fffffbff 	.word	0xfffffbff

08003d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	230f      	movs	r3, #15
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	223c      	movs	r2, #60	; 0x3c
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIM_ConfigClockSource+0x20>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0bc      	b.n	8003ee6 <HAL_TIM_ConfigClockSource+0x19a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	223c      	movs	r2, #60	; 0x3c
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	223d      	movs	r2, #61	; 0x3d
 8003d78:	2102      	movs	r1, #2
 8003d7a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2277      	movs	r2, #119	; 0x77
 8003d88:	4393      	bics	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	0192      	lsls	r2, r2, #6
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d040      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0xde>
 8003da8:	2280      	movs	r2, #128	; 0x80
 8003daa:	0192      	lsls	r2, r2, #6
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d900      	bls.n	8003db2 <HAL_TIM_ConfigClockSource+0x66>
 8003db0:	e088      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x178>
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	0152      	lsls	r2, r2, #5
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d100      	bne.n	8003dbc <HAL_TIM_ConfigClockSource+0x70>
 8003dba:	e088      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x182>
 8003dbc:	2280      	movs	r2, #128	; 0x80
 8003dbe:	0152      	lsls	r2, r2, #5
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d900      	bls.n	8003dc6 <HAL_TIM_ConfigClockSource+0x7a>
 8003dc4:	e07e      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x178>
 8003dc6:	2b70      	cmp	r3, #112	; 0x70
 8003dc8:	d018      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0xb0>
 8003dca:	d900      	bls.n	8003dce <HAL_TIM_ConfigClockSource+0x82>
 8003dcc:	e07a      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x178>
 8003dce:	2b60      	cmp	r3, #96	; 0x60
 8003dd0:	d04f      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x126>
 8003dd2:	d900      	bls.n	8003dd6 <HAL_TIM_ConfigClockSource+0x8a>
 8003dd4:	e076      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x178>
 8003dd6:	2b50      	cmp	r3, #80	; 0x50
 8003dd8:	d03b      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x106>
 8003dda:	d900      	bls.n	8003dde <HAL_TIM_ConfigClockSource+0x92>
 8003ddc:	e072      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x178>
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d057      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x146>
 8003de2:	d900      	bls.n	8003de6 <HAL_TIM_ConfigClockSource+0x9a>
 8003de4:	e06e      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x178>
 8003de6:	2b30      	cmp	r3, #48	; 0x30
 8003de8:	d063      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x166>
 8003dea:	d86b      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x178>
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d060      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x166>
 8003df0:	d868      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x178>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d05d      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x166>
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d05b      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x166>
 8003dfa:	e063      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f000 fb68 	bl	80044e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2277      	movs	r2, #119	; 0x77
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	609a      	str	r2, [r3, #8]
      break;
 8003e28:	e052      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6899      	ldr	r1, [r3, #8]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f000 fb51 	bl	80044e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	01c9      	lsls	r1, r1, #7
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	609a      	str	r2, [r3, #8]
      break;
 8003e50:	e03e      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	001a      	movs	r2, r3
 8003e60:	f000 fac4 	bl	80043ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2150      	movs	r1, #80	; 0x50
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 fb1e 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003e70:	e02e      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	001a      	movs	r2, r3
 8003e80:	f000 fae2 	bl	8004448 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2160      	movs	r1, #96	; 0x60
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 fb0e 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003e90:	e01e      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	f000 faa4 	bl	80043ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2140      	movs	r1, #64	; 0x40
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f000 fafe 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003eb0:	e00e      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	0019      	movs	r1, r3
 8003ebc:	0010      	movs	r0, r2
 8003ebe:	f000 faf5 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003ec2:	e005      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ec4:	230f      	movs	r3, #15
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
      break;
 8003ecc:	e000      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003ece:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	223d      	movs	r2, #61	; 0x3d
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	223c      	movs	r2, #60	; 0x3c
 8003edc:	2100      	movs	r1, #0
 8003ede:	5499      	strb	r1, [r3, r2]

  return status;
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	781b      	ldrb	r3, [r3, #0]
}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b004      	add	sp, #16
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	ffff00ff 	.word	0xffff00ff

08003ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a34      	ldr	r2, [pc, #208]	; (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d008      	beq.n	8003f1e <TIM_Base_SetConfig+0x2a>
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	05db      	lsls	r3, r3, #23
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0x2a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a30      	ldr	r2, [pc, #192]	; (8003fdc <TIM_Base_SetConfig+0xe8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2270      	movs	r2, #112	; 0x70
 8003f22:	4393      	bics	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d018      	beq.n	8003f6a <TIM_Base_SetConfig+0x76>
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	05db      	lsls	r3, r3, #23
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d013      	beq.n	8003f6a <TIM_Base_SetConfig+0x76>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a25      	ldr	r2, [pc, #148]	; (8003fdc <TIM_Base_SetConfig+0xe8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00f      	beq.n	8003f6a <TIM_Base_SetConfig+0x76>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <TIM_Base_SetConfig+0xec>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <TIM_Base_SetConfig+0x76>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a23      	ldr	r2, [pc, #140]	; (8003fe4 <TIM_Base_SetConfig+0xf0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <TIM_Base_SetConfig+0x76>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a22      	ldr	r2, [pc, #136]	; (8003fe8 <TIM_Base_SetConfig+0xf4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_Base_SetConfig+0x76>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a21      	ldr	r2, [pc, #132]	; (8003fec <TIM_Base_SetConfig+0xf8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d108      	bne.n	8003f7c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <TIM_Base_SetConfig+0xfc>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	4393      	bics	r3, r2
 8003f82:	001a      	movs	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_Base_SetConfig+0xce>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <TIM_Base_SetConfig+0xf0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_Base_SetConfig+0xce>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	; (8003fe8 <TIM_Base_SetConfig+0xf4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0xce>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <TIM_Base_SetConfig+0xf8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d103      	bne.n	8003fca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	615a      	str	r2, [r3, #20]
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b004      	add	sp, #16
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40002000 	.word	0x40002000
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800
 8003ff0:	fffffcff 	.word	0xfffffcff

08003ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	2201      	movs	r2, #1
 8004004:	4393      	bics	r3, r2
 8004006:	001a      	movs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2270      	movs	r2, #112	; 0x70
 8004022:	4393      	bics	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2203      	movs	r2, #3
 800402a:	4393      	bics	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2202      	movs	r2, #2
 800403c:	4393      	bics	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a27      	ldr	r2, [pc, #156]	; (80040ec <TIM_OC1_SetConfig+0xf8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00b      	beq.n	800406a <TIM_OC1_SetConfig+0x76>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <TIM_OC1_SetConfig+0xfc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d007      	beq.n	800406a <TIM_OC1_SetConfig+0x76>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <TIM_OC1_SetConfig+0x100>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_OC1_SetConfig+0x76>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <TIM_OC1_SetConfig+0x104>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10c      	bne.n	8004084 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2208      	movs	r2, #8
 800406e:	4393      	bics	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2204      	movs	r2, #4
 8004080:	4393      	bics	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a19      	ldr	r2, [pc, #100]	; (80040ec <TIM_OC1_SetConfig+0xf8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_OC1_SetConfig+0xb0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <TIM_OC1_SetConfig+0xfc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_OC1_SetConfig+0xb0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <TIM_OC1_SetConfig+0x100>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC1_SetConfig+0xb0>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <TIM_OC1_SetConfig+0x104>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d111      	bne.n	80040c8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4a15      	ldr	r2, [pc, #84]	; (80040fc <TIM_OC1_SetConfig+0x108>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4a14      	ldr	r2, [pc, #80]	; (8004100 <TIM_OC1_SetConfig+0x10c>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b006      	add	sp, #24
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800
 80040fc:	fffffeff 	.word	0xfffffeff
 8004100:	fffffdff 	.word	0xfffffdff

08004104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	2210      	movs	r2, #16
 8004114:	4393      	bics	r3, r2
 8004116:	001a      	movs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4a2e      	ldr	r2, [pc, #184]	; (80041ec <TIM_OC2_SetConfig+0xe8>)
 8004132:	4013      	ands	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a2d      	ldr	r2, [pc, #180]	; (80041f0 <TIM_OC2_SetConfig+0xec>)
 800413a:	4013      	ands	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2220      	movs	r2, #32
 800414e:	4393      	bics	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <TIM_OC2_SetConfig+0xf0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10d      	bne.n	8004182 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2280      	movs	r2, #128	; 0x80
 800416a:	4393      	bics	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2240      	movs	r2, #64	; 0x40
 800417e:	4393      	bics	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <TIM_OC2_SetConfig+0xf0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00b      	beq.n	80041a2 <TIM_OC2_SetConfig+0x9e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <TIM_OC2_SetConfig+0xf4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d007      	beq.n	80041a2 <TIM_OC2_SetConfig+0x9e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a19      	ldr	r2, [pc, #100]	; (80041fc <TIM_OC2_SetConfig+0xf8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_OC2_SetConfig+0x9e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a18      	ldr	r2, [pc, #96]	; (8004200 <TIM_OC2_SetConfig+0xfc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d113      	bne.n	80041ca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4a17      	ldr	r2, [pc, #92]	; (8004204 <TIM_OC2_SetConfig+0x100>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <TIM_OC2_SetConfig+0x104>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	621a      	str	r2, [r3, #32]
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b006      	add	sp, #24
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	ffff8fff 	.word	0xffff8fff
 80041f0:	fffffcff 	.word	0xfffffcff
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40014400 	.word	0x40014400
 8004200:	40014800 	.word	0x40014800
 8004204:	fffffbff 	.word	0xfffffbff
 8004208:	fffff7ff 	.word	0xfffff7ff

0800420c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	4a35      	ldr	r2, [pc, #212]	; (80042f0 <TIM_OC3_SetConfig+0xe4>)
 800421c:	401a      	ands	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2270      	movs	r2, #112	; 0x70
 8004238:	4393      	bics	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2203      	movs	r2, #3
 8004240:	4393      	bics	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	4a28      	ldr	r2, [pc, #160]	; (80042f4 <TIM_OC3_SetConfig+0xe8>)
 8004252:	4013      	ands	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <TIM_OC3_SetConfig+0xec>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10d      	bne.n	8004286 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	4a23      	ldr	r2, [pc, #140]	; (80042fc <TIM_OC3_SetConfig+0xf0>)
 800426e:	4013      	ands	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <TIM_OC3_SetConfig+0xf4>)
 8004282:	4013      	ands	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <TIM_OC3_SetConfig+0xec>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00b      	beq.n	80042a6 <TIM_OC3_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1c      	ldr	r2, [pc, #112]	; (8004304 <TIM_OC3_SetConfig+0xf8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <TIM_OC3_SetConfig+0x9a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <TIM_OC3_SetConfig+0xfc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d003      	beq.n	80042a6 <TIM_OC3_SetConfig+0x9a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1a      	ldr	r2, [pc, #104]	; (800430c <TIM_OC3_SetConfig+0x100>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d113      	bne.n	80042ce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4a19      	ldr	r2, [pc, #100]	; (8004310 <TIM_OC3_SetConfig+0x104>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4a18      	ldr	r2, [pc, #96]	; (8004314 <TIM_OC3_SetConfig+0x108>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	621a      	str	r2, [r3, #32]
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b006      	add	sp, #24
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	fffffeff 	.word	0xfffffeff
 80042f4:	fffffdff 	.word	0xfffffdff
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	fffff7ff 	.word	0xfffff7ff
 8004300:	fffffbff 	.word	0xfffffbff
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800
 8004310:	ffffefff 	.word	0xffffefff
 8004314:	ffffdfff 	.word	0xffffdfff

08004318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	4a28      	ldr	r2, [pc, #160]	; (80043c8 <TIM_OC4_SetConfig+0xb0>)
 8004328:	401a      	ands	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a22      	ldr	r2, [pc, #136]	; (80043cc <TIM_OC4_SetConfig+0xb4>)
 8004344:	4013      	ands	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a21      	ldr	r2, [pc, #132]	; (80043d0 <TIM_OC4_SetConfig+0xb8>)
 800434c:	4013      	ands	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <TIM_OC4_SetConfig+0xbc>)
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	031b      	lsls	r3, r3, #12
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <TIM_OC4_SetConfig+0xc0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00b      	beq.n	8004390 <TIM_OC4_SetConfig+0x78>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a18      	ldr	r2, [pc, #96]	; (80043dc <TIM_OC4_SetConfig+0xc4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d007      	beq.n	8004390 <TIM_OC4_SetConfig+0x78>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <TIM_OC4_SetConfig+0xc8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_OC4_SetConfig+0x78>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <TIM_OC4_SetConfig+0xcc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d109      	bne.n	80043a4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <TIM_OC4_SetConfig+0xd0>)
 8004394:	4013      	ands	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	019b      	lsls	r3, r3, #6
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b006      	add	sp, #24
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	ffffefff 	.word	0xffffefff
 80043cc:	ffff8fff 	.word	0xffff8fff
 80043d0:	fffffcff 	.word	0xfffffcff
 80043d4:	ffffdfff 	.word	0xffffdfff
 80043d8:	40012c00 	.word	0x40012c00
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800
 80043e8:	ffffbfff 	.word	0xffffbfff

080043ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	2201      	movs	r2, #1
 8004404:	4393      	bics	r3, r2
 8004406:	001a      	movs	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	22f0      	movs	r2, #240	; 0xf0
 8004416:	4393      	bics	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	220a      	movs	r2, #10
 8004428:	4393      	bics	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	621a      	str	r2, [r3, #32]
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	b006      	add	sp, #24
 8004446:	bd80      	pop	{r7, pc}

08004448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	2210      	movs	r2, #16
 800445a:	4393      	bics	r3, r2
 800445c:	001a      	movs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <TIM_TI2_ConfigInputStage+0x60>)
 8004472:	4013      	ands	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	031b      	lsls	r3, r3, #12
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	22a0      	movs	r2, #160	; 0xa0
 8004484:	4393      	bics	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b006      	add	sp, #24
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	ffff0fff 	.word	0xffff0fff

080044ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2270      	movs	r2, #112	; 0x70
 80044c0:	4393      	bics	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	2207      	movs	r2, #7
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	609a      	str	r2, [r3, #8]
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	46bd      	mov	sp, r7
 80044da:	b004      	add	sp, #16
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4a09      	ldr	r2, [pc, #36]	; (800451c <TIM_ETR_SetConfig+0x3c>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	021a      	lsls	r2, r3, #8
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	431a      	orrs	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4313      	orrs	r3, r2
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b006      	add	sp, #24
 800451a:	bd80      	pop	{r7, pc}
 800451c:	ffff00ff 	.word	0xffff00ff

08004520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	221f      	movs	r2, #31
 8004530:	4013      	ands	r3, r2
 8004532:	2201      	movs	r2, #1
 8004534:	409a      	lsls	r2, r3
 8004536:	0013      	movs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	43d2      	mvns	r2, r2
 8004542:	401a      	ands	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	211f      	movs	r1, #31
 8004550:	400b      	ands	r3, r1
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4099      	lsls	r1, r3
 8004556:	000b      	movs	r3, r1
 8004558:	431a      	orrs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	46bd      	mov	sp, r7
 8004562:	b006      	add	sp, #24
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	223c      	movs	r2, #60	; 0x3c
 8004576:	5c9b      	ldrb	r3, [r3, r2]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800457c:	2302      	movs	r3, #2
 800457e:	e047      	b.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	223c      	movs	r2, #60	; 0x3c
 8004584:	2101      	movs	r1, #1
 8004586:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	223d      	movs	r2, #61	; 0x3d
 800458c:	2102      	movs	r1, #2
 800458e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2270      	movs	r2, #112	; 0x70
 80045a4:	4393      	bics	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00f      	beq.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	05db      	lsls	r3, r3, #23
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d009      	beq.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a10      	ldr	r2, [pc, #64]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d10c      	bne.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2280      	movs	r2, #128	; 0x80
 80045e8:	4393      	bics	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	223d      	movs	r2, #61	; 0x3d
 8004602:	2101      	movs	r1, #1
 8004604:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	223c      	movs	r2, #60	; 0x3c
 800460a:	2100      	movs	r1, #0
 800460c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	b004      	add	sp, #16
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40000400 	.word	0x40000400
 8004620:	40014000 	.word	0x40014000

08004624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e044      	b.n	80046c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2274      	movs	r2, #116	; 0x74
 8004642:	2100      	movs	r1, #0
 8004644:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0018      	movs	r0, r3
 800464a:	f7fc fe89 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2224      	movs	r2, #36	; 0x24
 8004652:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2101      	movs	r1, #1
 8004660:	438a      	bics	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	0018      	movs	r0, r3
 8004668:	f000 f830 	bl	80046cc <UART_SetConfig>
 800466c:	0003      	movs	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e024      	b.n	80046c0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0018      	movs	r0, r3
 8004682:	f000 fa0b 	bl	8004a9c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	490d      	ldr	r1, [pc, #52]	; (80046c8 <HAL_UART_Init+0xa4>)
 8004692:	400a      	ands	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	212a      	movs	r1, #42	; 0x2a
 80046a2:	438a      	bics	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2101      	movs	r1, #1
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 faa3 	bl	8004c04 <UART_CheckIdleState>
 80046be:	0003      	movs	r3, r0
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	ffffb7ff 	.word	0xffffb7ff

080046cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046d4:	231e      	movs	r3, #30
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4abe      	ldr	r2, [pc, #760]	; (80049f4 <UART_SetConfig+0x328>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	0019      	movs	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	430a      	orrs	r2, r1
 8004708:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4ab9      	ldr	r2, [pc, #740]	; (80049f8 <UART_SetConfig+0x32c>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4ab0      	ldr	r2, [pc, #704]	; (80049fc <UART_SetConfig+0x330>)
 800473a:	4013      	ands	r3, r2
 800473c:	0019      	movs	r1, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4aac      	ldr	r2, [pc, #688]	; (8004a00 <UART_SetConfig+0x334>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d127      	bne.n	80047a2 <UART_SetConfig+0xd6>
 8004752:	4bac      	ldr	r3, [pc, #688]	; (8004a04 <UART_SetConfig+0x338>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	2203      	movs	r2, #3
 8004758:	4013      	ands	r3, r2
 800475a:	2b03      	cmp	r3, #3
 800475c:	d00d      	beq.n	800477a <UART_SetConfig+0xae>
 800475e:	d81b      	bhi.n	8004798 <UART_SetConfig+0xcc>
 8004760:	2b02      	cmp	r3, #2
 8004762:	d014      	beq.n	800478e <UART_SetConfig+0xc2>
 8004764:	d818      	bhi.n	8004798 <UART_SetConfig+0xcc>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <UART_SetConfig+0xa4>
 800476a:	2b01      	cmp	r3, #1
 800476c:	d00a      	beq.n	8004784 <UART_SetConfig+0xb8>
 800476e:	e013      	b.n	8004798 <UART_SetConfig+0xcc>
 8004770:	231f      	movs	r3, #31
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	e0bd      	b.n	80048f6 <UART_SetConfig+0x22a>
 800477a:	231f      	movs	r3, #31
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	2202      	movs	r2, #2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e0b8      	b.n	80048f6 <UART_SetConfig+0x22a>
 8004784:	231f      	movs	r3, #31
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2204      	movs	r2, #4
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e0b3      	b.n	80048f6 <UART_SetConfig+0x22a>
 800478e:	231f      	movs	r3, #31
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	2208      	movs	r2, #8
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	e0ae      	b.n	80048f6 <UART_SetConfig+0x22a>
 8004798:	231f      	movs	r3, #31
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2210      	movs	r2, #16
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	e0a9      	b.n	80048f6 <UART_SetConfig+0x22a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a98      	ldr	r2, [pc, #608]	; (8004a08 <UART_SetConfig+0x33c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d134      	bne.n	8004816 <UART_SetConfig+0x14a>
 80047ac:	4b95      	ldr	r3, [pc, #596]	; (8004a04 <UART_SetConfig+0x338>)
 80047ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b0:	23c0      	movs	r3, #192	; 0xc0
 80047b2:	029b      	lsls	r3, r3, #10
 80047b4:	4013      	ands	r3, r2
 80047b6:	22c0      	movs	r2, #192	; 0xc0
 80047b8:	0292      	lsls	r2, r2, #10
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d017      	beq.n	80047ee <UART_SetConfig+0x122>
 80047be:	22c0      	movs	r2, #192	; 0xc0
 80047c0:	0292      	lsls	r2, r2, #10
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d822      	bhi.n	800480c <UART_SetConfig+0x140>
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	0292      	lsls	r2, r2, #10
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d019      	beq.n	8004802 <UART_SetConfig+0x136>
 80047ce:	2280      	movs	r2, #128	; 0x80
 80047d0:	0292      	lsls	r2, r2, #10
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d81a      	bhi.n	800480c <UART_SetConfig+0x140>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d004      	beq.n	80047e4 <UART_SetConfig+0x118>
 80047da:	2280      	movs	r2, #128	; 0x80
 80047dc:	0252      	lsls	r2, r2, #9
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00a      	beq.n	80047f8 <UART_SetConfig+0x12c>
 80047e2:	e013      	b.n	800480c <UART_SetConfig+0x140>
 80047e4:	231f      	movs	r3, #31
 80047e6:	18fb      	adds	r3, r7, r3
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e083      	b.n	80048f6 <UART_SetConfig+0x22a>
 80047ee:	231f      	movs	r3, #31
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	2202      	movs	r2, #2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	e07e      	b.n	80048f6 <UART_SetConfig+0x22a>
 80047f8:	231f      	movs	r3, #31
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	2204      	movs	r2, #4
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e079      	b.n	80048f6 <UART_SetConfig+0x22a>
 8004802:	231f      	movs	r3, #31
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2208      	movs	r2, #8
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e074      	b.n	80048f6 <UART_SetConfig+0x22a>
 800480c:	231f      	movs	r3, #31
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2210      	movs	r2, #16
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e06f      	b.n	80048f6 <UART_SetConfig+0x22a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7c      	ldr	r2, [pc, #496]	; (8004a0c <UART_SetConfig+0x340>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d134      	bne.n	800488a <UART_SetConfig+0x1be>
 8004820:	4b78      	ldr	r3, [pc, #480]	; (8004a04 <UART_SetConfig+0x338>)
 8004822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004824:	23c0      	movs	r3, #192	; 0xc0
 8004826:	031b      	lsls	r3, r3, #12
 8004828:	4013      	ands	r3, r2
 800482a:	22c0      	movs	r2, #192	; 0xc0
 800482c:	0312      	lsls	r2, r2, #12
 800482e:	4293      	cmp	r3, r2
 8004830:	d017      	beq.n	8004862 <UART_SetConfig+0x196>
 8004832:	22c0      	movs	r2, #192	; 0xc0
 8004834:	0312      	lsls	r2, r2, #12
 8004836:	4293      	cmp	r3, r2
 8004838:	d822      	bhi.n	8004880 <UART_SetConfig+0x1b4>
 800483a:	2280      	movs	r2, #128	; 0x80
 800483c:	0312      	lsls	r2, r2, #12
 800483e:	4293      	cmp	r3, r2
 8004840:	d019      	beq.n	8004876 <UART_SetConfig+0x1aa>
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	0312      	lsls	r2, r2, #12
 8004846:	4293      	cmp	r3, r2
 8004848:	d81a      	bhi.n	8004880 <UART_SetConfig+0x1b4>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d004      	beq.n	8004858 <UART_SetConfig+0x18c>
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	02d2      	lsls	r2, r2, #11
 8004852:	4293      	cmp	r3, r2
 8004854:	d00a      	beq.n	800486c <UART_SetConfig+0x1a0>
 8004856:	e013      	b.n	8004880 <UART_SetConfig+0x1b4>
 8004858:	231f      	movs	r3, #31
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e049      	b.n	80048f6 <UART_SetConfig+0x22a>
 8004862:	231f      	movs	r3, #31
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2202      	movs	r2, #2
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e044      	b.n	80048f6 <UART_SetConfig+0x22a>
 800486c:	231f      	movs	r3, #31
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	2204      	movs	r2, #4
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e03f      	b.n	80048f6 <UART_SetConfig+0x22a>
 8004876:	231f      	movs	r3, #31
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	2208      	movs	r2, #8
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e03a      	b.n	80048f6 <UART_SetConfig+0x22a>
 8004880:	231f      	movs	r3, #31
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2210      	movs	r2, #16
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e035      	b.n	80048f6 <UART_SetConfig+0x22a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a60      	ldr	r2, [pc, #384]	; (8004a10 <UART_SetConfig+0x344>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d104      	bne.n	800489e <UART_SetConfig+0x1d2>
 8004894:	231f      	movs	r3, #31
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e02b      	b.n	80048f6 <UART_SetConfig+0x22a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5c      	ldr	r2, [pc, #368]	; (8004a14 <UART_SetConfig+0x348>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d104      	bne.n	80048b2 <UART_SetConfig+0x1e6>
 80048a8:	231f      	movs	r3, #31
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	e021      	b.n	80048f6 <UART_SetConfig+0x22a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <UART_SetConfig+0x34c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d104      	bne.n	80048c6 <UART_SetConfig+0x1fa>
 80048bc:	231f      	movs	r3, #31
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e017      	b.n	80048f6 <UART_SetConfig+0x22a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a54      	ldr	r2, [pc, #336]	; (8004a1c <UART_SetConfig+0x350>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d104      	bne.n	80048da <UART_SetConfig+0x20e>
 80048d0:	231f      	movs	r3, #31
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e00d      	b.n	80048f6 <UART_SetConfig+0x22a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a50      	ldr	r2, [pc, #320]	; (8004a20 <UART_SetConfig+0x354>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d104      	bne.n	80048ee <UART_SetConfig+0x222>
 80048e4:	231f      	movs	r3, #31
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e003      	b.n	80048f6 <UART_SetConfig+0x22a>
 80048ee:	231f      	movs	r3, #31
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	2210      	movs	r2, #16
 80048f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	429a      	cmp	r2, r3
 8004900:	d15d      	bne.n	80049be <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8004902:	231f      	movs	r3, #31
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d015      	beq.n	8004938 <UART_SetConfig+0x26c>
 800490c:	dc18      	bgt.n	8004940 <UART_SetConfig+0x274>
 800490e:	2b04      	cmp	r3, #4
 8004910:	d00d      	beq.n	800492e <UART_SetConfig+0x262>
 8004912:	dc15      	bgt.n	8004940 <UART_SetConfig+0x274>
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <UART_SetConfig+0x252>
 8004918:	2b02      	cmp	r3, #2
 800491a:	d005      	beq.n	8004928 <UART_SetConfig+0x25c>
 800491c:	e010      	b.n	8004940 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800491e:	f7fe fb53 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 8004922:	0003      	movs	r3, r0
 8004924:	61bb      	str	r3, [r7, #24]
        break;
 8004926:	e012      	b.n	800494e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004928:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <UART_SetConfig+0x358>)
 800492a:	61bb      	str	r3, [r7, #24]
        break;
 800492c:	e00f      	b.n	800494e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800492e:	f7fe fac1 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8004932:	0003      	movs	r3, r0
 8004934:	61bb      	str	r3, [r7, #24]
        break;
 8004936:	e00a      	b.n	800494e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	61bb      	str	r3, [r7, #24]
        break;
 800493e:	e006      	b.n	800494e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004944:	231e      	movs	r3, #30
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	2201      	movs	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
        break;
 800494c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d100      	bne.n	8004956 <UART_SetConfig+0x28a>
 8004954:	e095      	b.n	8004a82 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	005a      	lsls	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	18d2      	adds	r2, r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	0019      	movs	r1, r3
 8004968:	0010      	movs	r0, r2
 800496a:	f7fb fbcd 	bl	8000108 <__udivsi3>
 800496e:	0003      	movs	r3, r0
 8004970:	b29b      	uxth	r3, r3
 8004972:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d91c      	bls.n	80049b4 <UART_SetConfig+0x2e8>
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	025b      	lsls	r3, r3, #9
 8004980:	429a      	cmp	r2, r3
 8004982:	d217      	bcs.n	80049b4 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	b29a      	uxth	r2, r3
 8004988:	200e      	movs	r0, #14
 800498a:	183b      	adds	r3, r7, r0
 800498c:	210f      	movs	r1, #15
 800498e:	438a      	bics	r2, r1
 8004990:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	b29b      	uxth	r3, r3
 8004998:	2207      	movs	r2, #7
 800499a:	4013      	ands	r3, r2
 800499c:	b299      	uxth	r1, r3
 800499e:	183b      	adds	r3, r7, r0
 80049a0:	183a      	adds	r2, r7, r0
 80049a2:	8812      	ldrh	r2, [r2, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	183a      	adds	r2, r7, r0
 80049ae:	8812      	ldrh	r2, [r2, #0]
 80049b0:	60da      	str	r2, [r3, #12]
 80049b2:	e066      	b.n	8004a82 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80049b4:	231e      	movs	r3, #30
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	e061      	b.n	8004a82 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049be:	231f      	movs	r3, #31
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d02f      	beq.n	8004a28 <UART_SetConfig+0x35c>
 80049c8:	dc32      	bgt.n	8004a30 <UART_SetConfig+0x364>
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d00d      	beq.n	80049ea <UART_SetConfig+0x31e>
 80049ce:	dc2f      	bgt.n	8004a30 <UART_SetConfig+0x364>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <UART_SetConfig+0x30e>
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d005      	beq.n	80049e4 <UART_SetConfig+0x318>
 80049d8:	e02a      	b.n	8004a30 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049da:	f7fe faf5 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 80049de:	0003      	movs	r3, r0
 80049e0:	61bb      	str	r3, [r7, #24]
        break;
 80049e2:	e02c      	b.n	8004a3e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <UART_SetConfig+0x358>)
 80049e6:	61bb      	str	r3, [r7, #24]
        break;
 80049e8:	e029      	b.n	8004a3e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe fa63 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 80049ee:	0003      	movs	r3, r0
 80049f0:	61bb      	str	r3, [r7, #24]
        break;
 80049f2:	e024      	b.n	8004a3e <UART_SetConfig+0x372>
 80049f4:	efff69f3 	.word	0xefff69f3
 80049f8:	ffffcfff 	.word	0xffffcfff
 80049fc:	fffff4ff 	.word	0xfffff4ff
 8004a00:	40013800 	.word	0x40013800
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40004400 	.word	0x40004400
 8004a0c:	40004800 	.word	0x40004800
 8004a10:	40004c00 	.word	0x40004c00
 8004a14:	40005000 	.word	0x40005000
 8004a18:	40011400 	.word	0x40011400
 8004a1c:	40011800 	.word	0x40011800
 8004a20:	40011c00 	.word	0x40011c00
 8004a24:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	61bb      	str	r3, [r7, #24]
        break;
 8004a2e:	e006      	b.n	8004a3e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a34:	231e      	movs	r3, #30
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	2201      	movs	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]
        break;
 8004a3c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01e      	beq.n	8004a82 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	085a      	lsrs	r2, r3, #1
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	18d2      	adds	r2, r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	0019      	movs	r1, r3
 8004a54:	0010      	movs	r0, r2
 8004a56:	f7fb fb57 	bl	8000108 <__udivsi3>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2b0f      	cmp	r3, #15
 8004a64:	d909      	bls.n	8004a7a <UART_SetConfig+0x3ae>
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	025b      	lsls	r3, r3, #9
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d204      	bcs.n	8004a7a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	60da      	str	r2, [r3, #12]
 8004a78:	e003      	b.n	8004a82 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7a:	231e      	movs	r3, #30
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a8e:	231e      	movs	r3, #30
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	781b      	ldrb	r3, [r3, #0]
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b008      	add	sp, #32
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d00b      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a4a      	ldr	r2, [pc, #296]	; (8004be0 <UART_AdvFeatureConfig+0x144>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2202      	movs	r2, #2
 8004acc:	4013      	ands	r3, r2
 8004ace:	d00b      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4a43      	ldr	r2, [pc, #268]	; (8004be4 <UART_AdvFeatureConfig+0x148>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	2204      	movs	r2, #4
 8004aee:	4013      	ands	r3, r2
 8004af0:	d00b      	beq.n	8004b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a3b      	ldr	r2, [pc, #236]	; (8004be8 <UART_AdvFeatureConfig+0x14c>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	0019      	movs	r1, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2208      	movs	r2, #8
 8004b10:	4013      	ands	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4a34      	ldr	r2, [pc, #208]	; (8004bec <UART_AdvFeatureConfig+0x150>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	2210      	movs	r2, #16
 8004b32:	4013      	ands	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	4a2c      	ldr	r2, [pc, #176]	; (8004bf0 <UART_AdvFeatureConfig+0x154>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2220      	movs	r2, #32
 8004b54:	4013      	ands	r3, r2
 8004b56:	d00b      	beq.n	8004b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	4a25      	ldr	r2, [pc, #148]	; (8004bf4 <UART_AdvFeatureConfig+0x158>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2240      	movs	r2, #64	; 0x40
 8004b76:	4013      	ands	r3, r2
 8004b78:	d01d      	beq.n	8004bb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a1d      	ldr	r2, [pc, #116]	; (8004bf8 <UART_AdvFeatureConfig+0x15c>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b96:	2380      	movs	r3, #128	; 0x80
 8004b98:	035b      	lsls	r3, r3, #13
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d10b      	bne.n	8004bb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <UART_AdvFeatureConfig+0x160>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d00b      	beq.n	8004bd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4a0e      	ldr	r2, [pc, #56]	; (8004c00 <UART_AdvFeatureConfig+0x164>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b002      	add	sp, #8
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	fffdffff 	.word	0xfffdffff
 8004be4:	fffeffff 	.word	0xfffeffff
 8004be8:	fffbffff 	.word	0xfffbffff
 8004bec:	ffff7fff 	.word	0xffff7fff
 8004bf0:	ffffefff 	.word	0xffffefff
 8004bf4:	ffffdfff 	.word	0xffffdfff
 8004bf8:	ffefffff 	.word	0xffefffff
 8004bfc:	ff9fffff 	.word	0xff9fffff
 8004c00:	fff7ffff 	.word	0xfff7ffff

08004c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	2100      	movs	r1, #0
 8004c12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c14:	f7fc fca6 	bl	8001564 <HAL_GetTick>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2208      	movs	r2, #8
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d10c      	bne.n	8004c44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2280      	movs	r2, #128	; 0x80
 8004c2e:	0391      	lsls	r1, r2, #14
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <UART_CheckIdleState+0x8c>)
 8004c34:	9200      	str	r2, [sp, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f000 f82c 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 8004c3c:	1e03      	subs	r3, r0, #0
 8004c3e:	d001      	beq.n	8004c44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e021      	b.n	8004c88 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d10c      	bne.n	8004c6c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2280      	movs	r2, #128	; 0x80
 8004c56:	03d1      	lsls	r1, r2, #15
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <UART_CheckIdleState+0x8c>)
 8004c5c:	9200      	str	r2, [sp, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f000 f818 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d001      	beq.n	8004c6c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e00d      	b.n	8004c88 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2274      	movs	r2, #116	; 0x74
 8004c82:	2100      	movs	r1, #0
 8004c84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b004      	add	sp, #16
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	01ffffff 	.word	0x01ffffff

08004c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b094      	sub	sp, #80	; 0x50
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	1dfb      	adds	r3, r7, #7
 8004ca2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca4:	e0a3      	b.n	8004dee <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ca8:	3301      	adds	r3, #1
 8004caa:	d100      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x1a>
 8004cac:	e09f      	b.n	8004dee <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fc fc59 	bl	8001564 <HAL_GetTick>
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d13d      	bne.n	8004d40 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cce:	2301      	movs	r3, #1
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	f383 8810 	msr	PRIMASK, r3
}
 8004cd8:	46c0      	nop			; (mov r8, r8)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	494c      	ldr	r1, [pc, #304]	; (8004e18 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004ce6:	400a      	ands	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	f383 8810 	msr	PRIMASK, r3
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8004d00:	2301      	movs	r3, #1
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	f383 8810 	msr	PRIMASK, r3
}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2101      	movs	r1, #1
 8004d18:	438a      	bics	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d22:	f383 8810 	msr	PRIMASK, r3
}
 8004d26:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2274      	movs	r2, #116	; 0x74
 8004d38:	2100      	movs	r1, #0
 8004d3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e067      	b.n	8004e10 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2204      	movs	r2, #4
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d050      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	401a      	ands	r2, r3
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d146      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2280      	movs	r2, #128	; 0x80
 8004d66:	0112      	lsls	r2, r2, #4
 8004d68:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6e:	613b      	str	r3, [r7, #16]
  return(result);
 8004d70:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d74:	2301      	movs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f383 8810 	msr	PRIMASK, r3
}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4923      	ldr	r1, [pc, #140]	; (8004e18 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004da0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004da2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da6:	2301      	movs	r3, #1
 8004da8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	f383 8810 	msr	PRIMASK, r3
}
 8004db0:	46c0      	nop			; (mov r8, r8)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	438a      	bics	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	f383 8810 	msr	PRIMASK, r3
}
 8004dcc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2280      	movs	r2, #128	; 0x80
 8004dde:	2120      	movs	r1, #32
 8004de0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2274      	movs	r2, #116	; 0x74
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e010      	b.n	8004e10 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	425a      	negs	r2, r3
 8004dfe:	4153      	adcs	r3, r2
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	001a      	movs	r2, r3
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d100      	bne.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x17a>
 8004e0c:	e74b      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	0018      	movs	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b014      	add	sp, #80	; 0x50
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	fffffe5f 	.word	0xfffffe5f

08004e1c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e22:	f3ef 8305 	mrs	r3, IPSR
 8004e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e32:	607b      	str	r3, [r7, #4]
  return(result);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <osKernelInitialize+0x2e>
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <osKernelInitialize+0x54>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d103      	bne.n	8004e4a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8004e42:	2306      	movs	r3, #6
 8004e44:	425b      	negs	r3, r3
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e00c      	b.n	8004e64 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <osKernelInitialize+0x54>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004e52:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <osKernelInitialize+0x54>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e002      	b.n	8004e64 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	425b      	negs	r3, r3
 8004e62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e64:	68fb      	ldr	r3, [r7, #12]
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b004      	add	sp, #16
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	20001e98 	.word	0x20001e98

08004e74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e7a:	f3ef 8305 	mrs	r3, IPSR
 8004e7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e86:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8a:	607b      	str	r3, [r7, #4]
  return(result);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <osKernelStart+0x2e>
 8004e92:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <osKernelStart+0x58>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d103      	bne.n	8004ea2 <osKernelStart+0x2e>
    stat = osErrorISR;
 8004e9a:	2306      	movs	r3, #6
 8004e9c:	425b      	negs	r3, r3
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e00e      	b.n	8004ec0 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <osKernelStart+0x58>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d107      	bne.n	8004eba <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <osKernelStart+0x58>)
 8004eac:	2202      	movs	r2, #2
 8004eae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004eb0:	f000 ff46 	bl	8005d40 <vTaskStartScheduler>
      stat = osOK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e002      	b.n	8004ec0 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	425b      	negs	r3, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20001e98 	.word	0x20001e98

08004ed0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ed0:	b5b0      	push	{r4, r5, r7, lr}
 8004ed2:	b090      	sub	sp, #64	; 0x40
 8004ed4:	af04      	add	r7, sp, #16
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ee0:	f3ef 8305 	mrs	r3, IPSR
 8004ee4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ee6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d000      	beq.n	8004eee <osThreadNew+0x1e>
 8004eec:	e090      	b.n	8005010 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eee:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <osThreadNew+0x34>
 8004efa:	4b48      	ldr	r3, [pc, #288]	; (800501c <osThreadNew+0x14c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d100      	bne.n	8004f04 <osThreadNew+0x34>
 8004f02:	e085      	b.n	8005010 <osThreadNew+0x140>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d100      	bne.n	8004f0c <osThreadNew+0x3c>
 8004f0a:	e081      	b.n	8005010 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004f10:	2318      	movs	r3, #24
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8004f14:	2117      	movs	r1, #23
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8004f20:	2301      	movs	r3, #1
 8004f22:	425b      	negs	r3, r3
 8004f24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d044      	beq.n	8004fb6 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <osThreadNew+0x6a>
        name = attr->name;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <osThreadNew+0x8e>
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	2b38      	cmp	r3, #56	; 0x38
 8004f52:	d804      	bhi.n	8004f5e <osThreadNew+0x8e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d001      	beq.n	8004f62 <osThreadNew+0x92>
        return (NULL);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e057      	b.n	8005012 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00e      	beq.n	8004f98 <osThreadNew+0xc8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2bbb      	cmp	r3, #187	; 0xbb
 8004f80:	d90a      	bls.n	8004f98 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <osThreadNew+0xc8>
        mem = 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	e010      	b.n	8004fba <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10c      	bne.n	8004fba <osThreadNew+0xea>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <osThreadNew+0xea>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <osThreadNew+0xea>
          mem = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	e001      	b.n	8004fba <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d112      	bne.n	8004fe6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fc8:	68bd      	ldr	r5, [r7, #8]
 8004fca:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8004fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	9302      	str	r3, [sp, #8]
 8004fd2:	9201      	str	r2, [sp, #4]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	002b      	movs	r3, r5
 8004fda:	0022      	movs	r2, r4
 8004fdc:	f000 fd21 	bl	8005a22 <xTaskCreateStatic>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	e014      	b.n	8005010 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d111      	bne.n	8005010 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68bc      	ldr	r4, [r7, #8]
 8004ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	0023      	movs	r3, r4
 8005002:	f000 fd51 	bl	8005aa8 <xTaskCreate>
 8005006:	0003      	movs	r3, r0
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <osThreadNew+0x140>
          hTask = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005010:	693b      	ldr	r3, [r7, #16]
}
 8005012:	0018      	movs	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	b00c      	add	sp, #48	; 0x30
 8005018:	bdb0      	pop	{r4, r5, r7, pc}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	20001e98 	.word	0x20001e98

08005020 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4a06      	ldr	r2, [pc, #24]	; (8005048 <vApplicationGetIdleTaskMemory+0x28>)
 8005030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4a05      	ldr	r2, [pc, #20]	; (800504c <vApplicationGetIdleTaskMemory+0x2c>)
 8005036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2280      	movs	r2, #128	; 0x80
 800503c:	601a      	str	r2, [r3, #0]
}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	20001e9c 	.word	0x20001e9c
 800504c:	20001f58 	.word	0x20001f58

08005050 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a06      	ldr	r2, [pc, #24]	; (8005078 <vApplicationGetTimerTaskMemory+0x28>)
 8005060:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4a05      	ldr	r2, [pc, #20]	; (800507c <vApplicationGetTimerTaskMemory+0x2c>)
 8005066:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2280      	movs	r2, #128	; 0x80
 800506c:	0052      	lsls	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]
}
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	b004      	add	sp, #16
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20002158 	.word	0x20002158
 800507c:	20002214 	.word	0x20002214

08005080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3308      	adds	r3, #8
 800508c:	001a      	movs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	4252      	negs	r2, r2
 8005098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3308      	adds	r3, #8
 800509e:	001a      	movs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3308      	adds	r3, #8
 80050a8:	001a      	movs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}

080050bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b002      	add	sp, #8
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b004      	add	sp, #16
 8005114:	bd80      	pop	{r7, pc}

08005116 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	3301      	adds	r3, #1
 800512a:	d103      	bne.n	8005134 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e00c      	b.n	800514e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3308      	adds	r3, #8
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e002      	b.n	8005142 <vListInsert+0x2c>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d2f6      	bcs.n	800513c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	b004      	add	sp, #16
 8005180:	bd80      	pop	{r7, pc}

08005182 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6892      	ldr	r2, [r2, #8]
 8005198:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6852      	ldr	r2, [r2, #4]
 80051a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d103      	bne.n	80051b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	1e5a      	subs	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
}
 80051ca:	0018      	movs	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b004      	add	sp, #16
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <xQueueGenericReset+0x18>
 80051e6:	b672      	cpsid	i
 80051e8:	e7fe      	b.n	80051e8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80051ea:	f001 fdd1 	bl	8006d90 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	434b      	muls	r3, r1
 80051fc:	18d2      	adds	r2, r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	1e59      	subs	r1, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	434b      	muls	r3, r1
 8005220:	18d2      	adds	r2, r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2244      	movs	r2, #68	; 0x44
 800522a:	21ff      	movs	r1, #255	; 0xff
 800522c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2245      	movs	r2, #69	; 0x45
 8005232:	21ff      	movs	r1, #255	; 0xff
 8005234:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10d      	bne.n	8005258 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d013      	beq.n	800526c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3310      	adds	r3, #16
 8005248:	0018      	movs	r0, r3
 800524a:	f000 ffcf 	bl	80061ec <xTaskRemoveFromEventList>
 800524e:	1e03      	subs	r3, r0, #0
 8005250:	d00c      	beq.n	800526c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005252:	f001 fd8d 	bl	8006d70 <vPortYield>
 8005256:	e009      	b.n	800526c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3310      	adds	r3, #16
 800525c:	0018      	movs	r0, r3
 800525e:	f7ff ff0f 	bl	8005080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3324      	adds	r3, #36	; 0x24
 8005266:	0018      	movs	r0, r3
 8005268:	f7ff ff0a 	bl	8005080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800526c:	f001 fda2 	bl	8006db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005270:	2301      	movs	r3, #1
}
 8005272:	0018      	movs	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	b004      	add	sp, #16
 8005278:	bd80      	pop	{r7, pc}

0800527a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800527a:	b590      	push	{r4, r7, lr}
 800527c:	b089      	sub	sp, #36	; 0x24
 800527e:	af02      	add	r7, sp, #8
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
 8005286:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <xQueueGenericCreateStatic+0x18>
 800528e:	b672      	cpsid	i
 8005290:	e7fe      	b.n	8005290 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <xQueueGenericCreateStatic+0x22>
 8005298:	b672      	cpsid	i
 800529a:	e7fe      	b.n	800529a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <xQueueGenericCreateStatic+0x2e>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <xQueueGenericCreateStatic+0x32>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <xQueueGenericCreateStatic+0x34>
 80052ac:	2300      	movs	r3, #0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <xQueueGenericCreateStatic+0x3c>
 80052b2:	b672      	cpsid	i
 80052b4:	e7fe      	b.n	80052b4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <xQueueGenericCreateStatic+0x48>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <xQueueGenericCreateStatic+0x4c>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <xQueueGenericCreateStatic+0x4e>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <xQueueGenericCreateStatic+0x56>
 80052cc:	b672      	cpsid	i
 80052ce:	e7fe      	b.n	80052ce <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052d0:	2350      	movs	r3, #80	; 0x50
 80052d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b50      	cmp	r3, #80	; 0x50
 80052d8:	d001      	beq.n	80052de <xQueueGenericCreateStatic+0x64>
 80052da:	b672      	cpsid	i
 80052dc:	e7fe      	b.n	80052dc <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00e      	beq.n	8005306 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2246      	movs	r2, #70	; 0x46
 80052ec:	2101      	movs	r1, #1
 80052ee:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052f0:	2328      	movs	r3, #40	; 0x28
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	781c      	ldrb	r4, [r3, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	0023      	movs	r3, r4
 8005302:	f000 f805 	bl	8005310 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005306:	697b      	ldr	r3, [r7, #20]
	}
 8005308:	0018      	movs	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	b007      	add	sp, #28
 800530e:	bd90      	pop	{r4, r7, pc}

08005310 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	001a      	movs	r2, r3
 800531e:	1cfb      	adds	r3, r7, #3
 8005320:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d103      	bne.n	8005330 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e002      	b.n	8005336 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2101      	movs	r1, #1
 8005346:	0018      	movs	r0, r3
 8005348:	f7ff ff43 	bl	80051d2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	1cfa      	adds	r2, r7, #3
 8005350:	214c      	movs	r1, #76	; 0x4c
 8005352:	7812      	ldrb	r2, [r2, #0]
 8005354:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b004      	add	sp, #16
 800535c:	bd80      	pop	{r7, pc}

0800535e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b08a      	sub	sp, #40	; 0x28
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800536c:	2300      	movs	r3, #0
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <xQueueGenericSend+0x20>
 800537a:	b672      	cpsid	i
 800537c:	e7fe      	b.n	800537c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <xQueueGenericSend+0x2e>
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <xQueueGenericSend+0x32>
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <xQueueGenericSend+0x34>
 8005390:	2300      	movs	r3, #0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <xQueueGenericSend+0x3c>
 8005396:	b672      	cpsid	i
 8005398:	e7fe      	b.n	8005398 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d103      	bne.n	80053a8 <xQueueGenericSend+0x4a>
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <xQueueGenericSend+0x4e>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <xQueueGenericSend+0x50>
 80053ac:	2300      	movs	r3, #0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <xQueueGenericSend+0x58>
 80053b2:	b672      	cpsid	i
 80053b4:	e7fe      	b.n	80053b4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053b6:	f001 f8b7 	bl	8006528 <xTaskGetSchedulerState>
 80053ba:	1e03      	subs	r3, r0, #0
 80053bc:	d102      	bne.n	80053c4 <xQueueGenericSend+0x66>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <xQueueGenericSend+0x6a>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <xQueueGenericSend+0x6c>
 80053c8:	2300      	movs	r3, #0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <xQueueGenericSend+0x74>
 80053ce:	b672      	cpsid	i
 80053d0:	e7fe      	b.n	80053d0 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053d2:	f001 fcdd 	bl	8006d90 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053de:	429a      	cmp	r2, r3
 80053e0:	d302      	bcc.n	80053e8 <xQueueGenericSend+0x8a>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d11e      	bne.n	8005426 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 f99f 	bl	8005732 <prvCopyDataToQueue>
 80053f4:	0003      	movs	r3, r0
 80053f6:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d009      	beq.n	8005414 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	3324      	adds	r3, #36	; 0x24
 8005404:	0018      	movs	r0, r3
 8005406:	f000 fef1 	bl	80061ec <xTaskRemoveFromEventList>
 800540a:	1e03      	subs	r3, r0, #0
 800540c:	d007      	beq.n	800541e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800540e:	f001 fcaf 	bl	8006d70 <vPortYield>
 8005412:	e004      	b.n	800541e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800541a:	f001 fca9 	bl	8006d70 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800541e:	f001 fcc9 	bl	8006db4 <vPortExitCritical>
				return pdPASS;
 8005422:	2301      	movs	r3, #1
 8005424:	e05b      	b.n	80054de <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d103      	bne.n	8005434 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800542c:	f001 fcc2 	bl	8006db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005430:	2300      	movs	r3, #0
 8005432:	e054      	b.n	80054de <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800543a:	2314      	movs	r3, #20
 800543c:	18fb      	adds	r3, r7, r3
 800543e:	0018      	movs	r0, r3
 8005440:	f000 ff30 	bl	80062a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005448:	f001 fcb4 	bl	8006db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800544c:	f000 fcd6 	bl	8005dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005450:	f001 fc9e 	bl	8006d90 <vPortEnterCritical>
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	2244      	movs	r2, #68	; 0x44
 8005458:	5c9b      	ldrb	r3, [r3, r2]
 800545a:	b25b      	sxtb	r3, r3
 800545c:	3301      	adds	r3, #1
 800545e:	d103      	bne.n	8005468 <xQueueGenericSend+0x10a>
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	2244      	movs	r2, #68	; 0x44
 8005464:	2100      	movs	r1, #0
 8005466:	5499      	strb	r1, [r3, r2]
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2245      	movs	r2, #69	; 0x45
 800546c:	5c9b      	ldrb	r3, [r3, r2]
 800546e:	b25b      	sxtb	r3, r3
 8005470:	3301      	adds	r3, #1
 8005472:	d103      	bne.n	800547c <xQueueGenericSend+0x11e>
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2245      	movs	r2, #69	; 0x45
 8005478:	2100      	movs	r1, #0
 800547a:	5499      	strb	r1, [r3, r2]
 800547c:	f001 fc9a 	bl	8006db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005480:	1d3a      	adds	r2, r7, #4
 8005482:	2314      	movs	r3, #20
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	0011      	movs	r1, r2
 8005488:	0018      	movs	r0, r3
 800548a:	f000 ff1f 	bl	80062cc <xTaskCheckForTimeOut>
 800548e:	1e03      	subs	r3, r0, #0
 8005490:	d11e      	bne.n	80054d0 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	0018      	movs	r0, r3
 8005496:	f000 fa51 	bl	800593c <prvIsQueueFull>
 800549a:	1e03      	subs	r3, r0, #0
 800549c:	d011      	beq.n	80054c2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	3310      	adds	r3, #16
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	0011      	movs	r1, r2
 80054a6:	0018      	movs	r0, r3
 80054a8:	f000 fe5c 	bl	8006164 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	0018      	movs	r0, r3
 80054b0:	f000 f9d0 	bl	8005854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054b4:	f000 fcae 	bl	8005e14 <xTaskResumeAll>
 80054b8:	1e03      	subs	r3, r0, #0
 80054ba:	d18a      	bne.n	80053d2 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80054bc:	f001 fc58 	bl	8006d70 <vPortYield>
 80054c0:	e787      	b.n	80053d2 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 f9c5 	bl	8005854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054ca:	f000 fca3 	bl	8005e14 <xTaskResumeAll>
 80054ce:	e780      	b.n	80053d2 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	0018      	movs	r0, r3
 80054d4:	f000 f9be 	bl	8005854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054d8:	f000 fc9c 	bl	8005e14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054dc:	2300      	movs	r3, #0
		}
	}
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b00a      	add	sp, #40	; 0x28
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054e6:	b590      	push	{r4, r7, lr}
 80054e8:	b089      	sub	sp, #36	; 0x24
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <xQueueGenericSendFromISR+0x1c>
 80054fe:	b672      	cpsid	i
 8005500:	e7fe      	b.n	8005500 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <xQueueGenericSendFromISR+0x2a>
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <xQueueGenericSendFromISR+0x2e>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <xQueueGenericSendFromISR+0x30>
 8005514:	2300      	movs	r3, #0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <xQueueGenericSendFromISR+0x38>
 800551a:	b672      	cpsid	i
 800551c:	e7fe      	b.n	800551c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d103      	bne.n	800552c <xQueueGenericSendFromISR+0x46>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <xQueueGenericSendFromISR+0x4a>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <xQueueGenericSendFromISR+0x4c>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <xQueueGenericSendFromISR+0x54>
 8005536:	b672      	cpsid	i
 8005538:	e7fe      	b.n	8005538 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800553a:	f001 fc53 	bl	8006de4 <ulSetInterruptMaskFromISR>
 800553e:	0003      	movs	r3, r0
 8005540:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <xQueueGenericSendFromISR+0x6e>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d12e      	bne.n	80055b2 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005554:	2413      	movs	r4, #19
 8005556:	193b      	adds	r3, r7, r4
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	2145      	movs	r1, #69	; 0x45
 800555c:	5c52      	ldrb	r2, [r2, r1]
 800555e:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	0018      	movs	r0, r3
 8005568:	f000 f8e3 	bl	8005732 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800556c:	193b      	adds	r3, r7, r4
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	b25b      	sxtb	r3, r3
 8005572:	3301      	adds	r3, #1
 8005574:	d111      	bne.n	800559a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	3324      	adds	r3, #36	; 0x24
 8005582:	0018      	movs	r0, r3
 8005584:	f000 fe32 	bl	80061ec <xTaskRemoveFromEventList>
 8005588:	1e03      	subs	r3, r0, #0
 800558a:	d00f      	beq.n	80055ac <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00c      	beq.n	80055ac <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	e008      	b.n	80055ac <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800559a:	2313      	movs	r3, #19
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	b259      	sxtb	r1, r3
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2245      	movs	r2, #69	; 0x45
 80055aa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80055ac:	2301      	movs	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
		{
 80055b0:	e001      	b.n	80055b6 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	0018      	movs	r0, r3
 80055ba:	f001 fc19 	bl	8006df0 <vClearInterruptMaskFromISR>

	return xReturn;
 80055be:	69fb      	ldr	r3, [r7, #28]
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b009      	add	sp, #36	; 0x24
 80055c6:	bd90      	pop	{r4, r7, pc}

080055c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <xQueueReceive+0x1e>
 80055e2:	b672      	cpsid	i
 80055e4:	e7fe      	b.n	80055e4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <xQueueReceive+0x2c>
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <xQueueReceive+0x30>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <xQueueReceive+0x32>
 80055f8:	2300      	movs	r3, #0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <xQueueReceive+0x3a>
 80055fe:	b672      	cpsid	i
 8005600:	e7fe      	b.n	8005600 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005602:	f000 ff91 	bl	8006528 <xTaskGetSchedulerState>
 8005606:	1e03      	subs	r3, r0, #0
 8005608:	d102      	bne.n	8005610 <xQueueReceive+0x48>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <xQueueReceive+0x4c>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <xQueueReceive+0x4e>
 8005614:	2300      	movs	r3, #0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <xQueueReceive+0x56>
 800561a:	b672      	cpsid	i
 800561c:	e7fe      	b.n	800561c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800561e:	f001 fbb7 	bl	8006d90 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01a      	beq.n	8005664 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	0011      	movs	r1, r2
 8005634:	0018      	movs	r0, r3
 8005636:	f000 f8e7 	bl	8005808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	1e5a      	subs	r2, r3, #1
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d008      	beq.n	800565c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	3310      	adds	r3, #16
 800564e:	0018      	movs	r0, r3
 8005650:	f000 fdcc 	bl	80061ec <xTaskRemoveFromEventList>
 8005654:	1e03      	subs	r3, r0, #0
 8005656:	d001      	beq.n	800565c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005658:	f001 fb8a 	bl	8006d70 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800565c:	f001 fbaa 	bl	8006db4 <vPortExitCritical>
				return pdPASS;
 8005660:	2301      	movs	r3, #1
 8005662:	e062      	b.n	800572a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d103      	bne.n	8005672 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800566a:	f001 fba3 	bl	8006db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800566e:	2300      	movs	r3, #0
 8005670:	e05b      	b.n	800572a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005678:	2314      	movs	r3, #20
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	0018      	movs	r0, r3
 800567e:	f000 fe11 	bl	80062a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005682:	2301      	movs	r3, #1
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005686:	f001 fb95 	bl	8006db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800568a:	f000 fbb7 	bl	8005dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800568e:	f001 fb7f 	bl	8006d90 <vPortEnterCritical>
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	2244      	movs	r2, #68	; 0x44
 8005696:	5c9b      	ldrb	r3, [r3, r2]
 8005698:	b25b      	sxtb	r3, r3
 800569a:	3301      	adds	r3, #1
 800569c:	d103      	bne.n	80056a6 <xQueueReceive+0xde>
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	2244      	movs	r2, #68	; 0x44
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	2245      	movs	r2, #69	; 0x45
 80056aa:	5c9b      	ldrb	r3, [r3, r2]
 80056ac:	b25b      	sxtb	r3, r3
 80056ae:	3301      	adds	r3, #1
 80056b0:	d103      	bne.n	80056ba <xQueueReceive+0xf2>
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	2245      	movs	r2, #69	; 0x45
 80056b6:	2100      	movs	r1, #0
 80056b8:	5499      	strb	r1, [r3, r2]
 80056ba:	f001 fb7b 	bl	8006db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056be:	1d3a      	adds	r2, r7, #4
 80056c0:	2314      	movs	r3, #20
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	0011      	movs	r1, r2
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 fe00 	bl	80062cc <xTaskCheckForTimeOut>
 80056cc:	1e03      	subs	r3, r0, #0
 80056ce:	d11e      	bne.n	800570e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 f91c 	bl	8005910 <prvIsQueueEmpty>
 80056d8:	1e03      	subs	r3, r0, #0
 80056da:	d011      	beq.n	8005700 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	0011      	movs	r1, r2
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 fd3d 	bl	8006164 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f000 f8b1 	bl	8005854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056f2:	f000 fb8f 	bl	8005e14 <xTaskResumeAll>
 80056f6:	1e03      	subs	r3, r0, #0
 80056f8:	d191      	bne.n	800561e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80056fa:	f001 fb39 	bl	8006d70 <vPortYield>
 80056fe:	e78e      	b.n	800561e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	0018      	movs	r0, r3
 8005704:	f000 f8a6 	bl	8005854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005708:	f000 fb84 	bl	8005e14 <xTaskResumeAll>
 800570c:	e787      	b.n	800561e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	0018      	movs	r0, r3
 8005712:	f000 f89f 	bl	8005854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005716:	f000 fb7d 	bl	8005e14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	0018      	movs	r0, r3
 800571e:	f000 f8f7 	bl	8005910 <prvIsQueueEmpty>
 8005722:	1e03      	subs	r3, r0, #0
 8005724:	d100      	bne.n	8005728 <xQueueReceive+0x160>
 8005726:	e77a      	b.n	800561e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005728:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800572a:	0018      	movs	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	b00a      	add	sp, #40	; 0x28
 8005730:	bd80      	pop	{r7, pc}

08005732 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10e      	bne.n	800576e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d14e      	bne.n	80057f6 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	0018      	movs	r0, r3
 800575e:	f000 feff 	bl	8006560 <xTaskPriorityDisinherit>
 8005762:	0003      	movs	r3, r0
 8005764:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	e043      	b.n	80057f6 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d119      	bne.n	80057a8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6898      	ldr	r0, [r3, #8]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	0019      	movs	r1, r3
 8005780:	f001 fd6a 	bl	8007258 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	18d2      	adds	r2, r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	429a      	cmp	r2, r3
 800579c:	d32b      	bcc.n	80057f6 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	e026      	b.n	80057f6 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68d8      	ldr	r0, [r3, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	0019      	movs	r1, r3
 80057b4:	f001 fd50 	bl	8007258 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	425b      	negs	r3, r3
 80057c2:	18d2      	adds	r2, r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d207      	bcs.n	80057e4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	425b      	negs	r3, r3
 80057de:	18d2      	adds	r2, r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d105      	bne.n	80057f6 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80057fe:	697b      	ldr	r3, [r7, #20]
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b006      	add	sp, #24
 8005806:	bd80      	pop	{r7, pc}

08005808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d018      	beq.n	800584c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	18d2      	adds	r2, r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d303      	bcc.n	800583c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68d9      	ldr	r1, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	0018      	movs	r0, r3
 8005848:	f001 fd06 	bl	8007258 <memcpy>
	}
}
 800584c:	46c0      	nop			; (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b002      	add	sp, #8
 8005852:	bd80      	pop	{r7, pc}

08005854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800585c:	f001 fa98 	bl	8006d90 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005860:	230f      	movs	r3, #15
 8005862:	18fb      	adds	r3, r7, r3
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	2145      	movs	r1, #69	; 0x45
 8005868:	5c52      	ldrb	r2, [r2, r1]
 800586a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800586c:	e013      	b.n	8005896 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3324      	adds	r3, #36	; 0x24
 800587a:	0018      	movs	r0, r3
 800587c:	f000 fcb6 	bl	80061ec <xTaskRemoveFromEventList>
 8005880:	1e03      	subs	r3, r0, #0
 8005882:	d001      	beq.n	8005888 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005884:	f000 fd72 	bl	800636c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005888:	210f      	movs	r1, #15
 800588a:	187b      	adds	r3, r7, r1
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	3b01      	subs	r3, #1
 8005890:	b2da      	uxtb	r2, r3
 8005892:	187b      	adds	r3, r7, r1
 8005894:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005896:	230f      	movs	r3, #15
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	b25b      	sxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	dce5      	bgt.n	800586e <prvUnlockQueue+0x1a>
 80058a2:	e000      	b.n	80058a6 <prvUnlockQueue+0x52>
					break;
 80058a4:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2245      	movs	r2, #69	; 0x45
 80058aa:	21ff      	movs	r1, #255	; 0xff
 80058ac:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80058ae:	f001 fa81 	bl	8006db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058b2:	f001 fa6d 	bl	8006d90 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058b6:	230e      	movs	r3, #14
 80058b8:	18fb      	adds	r3, r7, r3
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	2144      	movs	r1, #68	; 0x44
 80058be:	5c52      	ldrb	r2, [r2, r1]
 80058c0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058c2:	e013      	b.n	80058ec <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d016      	beq.n	80058fa <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3310      	adds	r3, #16
 80058d0:	0018      	movs	r0, r3
 80058d2:	f000 fc8b 	bl	80061ec <xTaskRemoveFromEventList>
 80058d6:	1e03      	subs	r3, r0, #0
 80058d8:	d001      	beq.n	80058de <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80058da:	f000 fd47 	bl	800636c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058de:	210e      	movs	r1, #14
 80058e0:	187b      	adds	r3, r7, r1
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	187b      	adds	r3, r7, r1
 80058ea:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ec:	230e      	movs	r3, #14
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b25b      	sxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	dce5      	bgt.n	80058c4 <prvUnlockQueue+0x70>
 80058f8:	e000      	b.n	80058fc <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80058fa:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2244      	movs	r2, #68	; 0x44
 8005900:	21ff      	movs	r1, #255	; 0xff
 8005902:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005904:	f001 fa56 	bl	8006db4 <vPortExitCritical>
}
 8005908:	46c0      	nop			; (mov r8, r8)
 800590a:	46bd      	mov	sp, r7
 800590c:	b004      	add	sp, #16
 800590e:	bd80      	pop	{r7, pc}

08005910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005918:	f001 fa3a 	bl	8006d90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005924:	2301      	movs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	e001      	b.n	800592e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800592e:	f001 fa41 	bl	8006db4 <vPortExitCritical>

	return xReturn;
 8005932:	68fb      	ldr	r3, [r7, #12]
}
 8005934:	0018      	movs	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	b004      	add	sp, #16
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005944:	f001 fa24 	bl	8006d90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005950:	429a      	cmp	r2, r3
 8005952:	d102      	bne.n	800595a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e001      	b.n	800595e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800595e:	f001 fa29 	bl	8006db4 <vPortExitCritical>

	return xReturn;
 8005962:	68fb      	ldr	r3, [r7, #12]
}
 8005964:	0018      	movs	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	b004      	add	sp, #16
 800596a:	bd80      	pop	{r7, pc}

0800596c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e015      	b.n	80059a8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800597c:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <vQueueAddToRegistry+0x4c>)
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	00d2      	lsls	r2, r2, #3
 8005982:	58d3      	ldr	r3, [r2, r3]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10c      	bne.n	80059a2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <vQueueAddToRegistry+0x4c>)
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	00d2      	lsls	r2, r2, #3
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <vQueueAddToRegistry+0x4c>)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	18d3      	adds	r3, r2, r3
 800599a:	3304      	adds	r3, #4
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059a0:	e006      	b.n	80059b0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b07      	cmp	r3, #7
 80059ac:	d9e6      	bls.n	800597c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	46c0      	nop			; (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b004      	add	sp, #16
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20002614 	.word	0x20002614

080059bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059cc:	f001 f9e0 	bl	8006d90 <vPortEnterCritical>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2244      	movs	r2, #68	; 0x44
 80059d4:	5c9b      	ldrb	r3, [r3, r2]
 80059d6:	b25b      	sxtb	r3, r3
 80059d8:	3301      	adds	r3, #1
 80059da:	d103      	bne.n	80059e4 <vQueueWaitForMessageRestricted+0x28>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2244      	movs	r2, #68	; 0x44
 80059e0:	2100      	movs	r1, #0
 80059e2:	5499      	strb	r1, [r3, r2]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2245      	movs	r2, #69	; 0x45
 80059e8:	5c9b      	ldrb	r3, [r3, r2]
 80059ea:	b25b      	sxtb	r3, r3
 80059ec:	3301      	adds	r3, #1
 80059ee:	d103      	bne.n	80059f8 <vQueueWaitForMessageRestricted+0x3c>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2245      	movs	r2, #69	; 0x45
 80059f4:	2100      	movs	r1, #0
 80059f6:	5499      	strb	r1, [r3, r2]
 80059f8:	f001 f9dc 	bl	8006db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	3324      	adds	r3, #36	; 0x24
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f000 fbc7 	bl	80061a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7ff ff1d 	bl	8005854 <prvUnlockQueue>
	}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b006      	add	sp, #24
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a22:	b590      	push	{r4, r7, lr}
 8005a24:	b08d      	sub	sp, #52	; 0x34
 8005a26:	af04      	add	r7, sp, #16
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <xTaskCreateStatic+0x18>
 8005a36:	b672      	cpsid	i
 8005a38:	e7fe      	b.n	8005a38 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <xTaskCreateStatic+0x22>
 8005a40:	b672      	cpsid	i
 8005a42:	e7fe      	b.n	8005a42 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a44:	23bc      	movs	r3, #188	; 0xbc
 8005a46:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2bbc      	cmp	r3, #188	; 0xbc
 8005a4c:	d001      	beq.n	8005a52 <xTaskCreateStatic+0x30>
 8005a4e:	b672      	cpsid	i
 8005a50:	e7fe      	b.n	8005a50 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <xTaskCreateStatic+0x78>
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01d      	beq.n	8005a9a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	22b9      	movs	r2, #185	; 0xb9
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a70:	683c      	ldr	r4, [r7, #0]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9303      	str	r3, [sp, #12]
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	2318      	movs	r3, #24
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	0023      	movs	r3, r4
 8005a8c:	f000 f858 	bl	8005b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f000 f8ec 	bl	8005c70 <prvAddNewTaskToReadyList>
 8005a98:	e001      	b.n	8005a9e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
	}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b009      	add	sp, #36	; 0x24
 8005aa6:	bd90      	pop	{r4, r7, pc}

08005aa8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b08d      	sub	sp, #52	; 0x34
 8005aac:	af04      	add	r7, sp, #16
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	1dbb      	adds	r3, r7, #6
 8005ab6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab8:	1dbb      	adds	r3, r7, #6
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f001 f9fe 	bl	8006ec0 <pvPortMalloc>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d010      	beq.n	8005af0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ace:	20bc      	movs	r0, #188	; 0xbc
 8005ad0:	f001 f9f6 	bl	8006ec0 <pvPortMalloc>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ae4:	e006      	b.n	8005af4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f001 fa8f 	bl	800700c <vPortFree>
 8005aee:	e001      	b.n	8005af4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01a      	beq.n	8005b30 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	22b9      	movs	r2, #185	; 0xb9
 8005afe:	2100      	movs	r1, #0
 8005b00:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b02:	1dbb      	adds	r3, r7, #6
 8005b04:	881a      	ldrh	r2, [r3, #0]
 8005b06:	683c      	ldr	r4, [r7, #0]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9303      	str	r3, [sp, #12]
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	9302      	str	r3, [sp, #8]
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	0023      	movs	r3, r4
 8005b1e:	f000 f80f 	bl	8005b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f8a3 	bl	8005c70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e002      	b.n	8005b36 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b30:	2301      	movs	r3, #1
 8005b32:	425b      	negs	r3, r3
 8005b34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b36:	69bb      	ldr	r3, [r7, #24]
	}
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b009      	add	sp, #36	; 0x24
 8005b3e:	bd90      	pop	{r4, r7, pc}

08005b40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	001a      	movs	r2, r3
 8005b58:	21a5      	movs	r1, #165	; 0xa5
 8005b5a:	f001 fb86 	bl	800726a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	493e      	ldr	r1, [pc, #248]	; (8005c60 <prvInitialiseNewTask+0x120>)
 8005b66:	468c      	mov	ip, r1
 8005b68:	4463      	add	r3, ip
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	18d3      	adds	r3, r2, r3
 8005b6e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2207      	movs	r2, #7
 8005b74:	4393      	bics	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2207      	movs	r2, #7
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d001      	beq.n	8005b84 <prvInitialiseNewTask+0x44>
 8005b80:	b672      	cpsid	i
 8005b82:	e7fe      	b.n	8005b82 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	e013      	b.n	8005bb2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	18d3      	adds	r3, r2, r3
 8005b90:	7818      	ldrb	r0, [r3, #0]
 8005b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b94:	2134      	movs	r1, #52	; 0x34
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	18d3      	adds	r3, r2, r3
 8005b9a:	185b      	adds	r3, r3, r1
 8005b9c:	1c02      	adds	r2, r0, #0
 8005b9e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	18d3      	adds	r3, r2, r3
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d006      	beq.n	8005bba <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b0f      	cmp	r3, #15
 8005bb6:	d9e8      	bls.n	8005b8a <prvInitialiseNewTask+0x4a>
 8005bb8:	e000      	b.n	8005bbc <prvInitialiseNewTask+0x7c>
		{
			break;
 8005bba:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	2243      	movs	r2, #67	; 0x43
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	2b37      	cmp	r3, #55	; 0x37
 8005bc8:	d901      	bls.n	8005bce <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bca:	2337      	movs	r3, #55	; 0x37
 8005bcc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	6a3a      	ldr	r2, [r7, #32]
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	2200      	movs	r2, #0
 8005bde:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	3304      	adds	r3, #4
 8005be4:	0018      	movs	r0, r3
 8005be6:	f7ff fa69 	bl	80050bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	3318      	adds	r3, #24
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f7ff fa64 	bl	80050bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	2238      	movs	r2, #56	; 0x38
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	22b4      	movs	r2, #180	; 0xb4
 8005c0e:	2100      	movs	r1, #0
 8005c10:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	22b8      	movs	r2, #184	; 0xb8
 8005c16:	2100      	movs	r1, #0
 8005c18:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	3354      	adds	r3, #84	; 0x54
 8005c1e:	2260      	movs	r2, #96	; 0x60
 8005c20:	2100      	movs	r1, #0
 8005c22:	0018      	movs	r0, r3
 8005c24:	f001 fb21 	bl	800726a <memset>
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	4a0e      	ldr	r2, [pc, #56]	; (8005c64 <prvInitialiseNewTask+0x124>)
 8005c2c:	659a      	str	r2, [r3, #88]	; 0x58
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <prvInitialiseNewTask+0x128>)
 8005c32:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	4a0d      	ldr	r2, [pc, #52]	; (8005c6c <prvInitialiseNewTask+0x12c>)
 8005c38:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f001 f80d 	bl	8006c60 <pxPortInitialiseStack>
 8005c46:	0002      	movs	r2, r0
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c58:	46c0      	nop			; (mov r8, r8)
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b006      	add	sp, #24
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	3fffffff 	.word	0x3fffffff
 8005c64:	080074f4 	.word	0x080074f4
 8005c68:	08007514 	.word	0x08007514
 8005c6c:	080074d4 	.word	0x080074d4

08005c70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c78:	f001 f88a 	bl	8006d90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c7c:	4b2a      	ldr	r3, [pc, #168]	; (8005d28 <prvAddNewTaskToReadyList+0xb8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	4b29      	ldr	r3, [pc, #164]	; (8005d28 <prvAddNewTaskToReadyList+0xb8>)
 8005c84:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005c86:	4b29      	ldr	r3, [pc, #164]	; (8005d2c <prvAddNewTaskToReadyList+0xbc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d109      	bne.n	8005ca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c8e:	4b27      	ldr	r3, [pc, #156]	; (8005d2c <prvAddNewTaskToReadyList+0xbc>)
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c94:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <prvAddNewTaskToReadyList+0xb8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d110      	bne.n	8005cbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c9c:	f000 fb80 	bl	80063a0 <prvInitialiseTaskLists>
 8005ca0:	e00d      	b.n	8005cbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ca2:	4b23      	ldr	r3, [pc, #140]	; (8005d30 <prvAddNewTaskToReadyList+0xc0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005caa:	4b20      	ldr	r3, [pc, #128]	; (8005d2c <prvAddNewTaskToReadyList+0xbc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d802      	bhi.n	8005cbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <prvAddNewTaskToReadyList+0xbc>)
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <prvAddNewTaskToReadyList+0xc4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <prvAddNewTaskToReadyList+0xc4>)
 8005cc6:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cc8:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <prvAddNewTaskToReadyList+0xc4>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <prvAddNewTaskToReadyList+0xc8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d903      	bls.n	8005ce4 <prvAddNewTaskToReadyList+0x74>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <prvAddNewTaskToReadyList+0xc8>)
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	0013      	movs	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	189b      	adds	r3, r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4a12      	ldr	r2, [pc, #72]	; (8005d3c <prvAddNewTaskToReadyList+0xcc>)
 8005cf2:	189a      	adds	r2, r3, r2
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	0019      	movs	r1, r3
 8005cfa:	0010      	movs	r0, r2
 8005cfc:	f7ff f9e9 	bl	80050d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d00:	f001 f858 	bl	8006db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <prvAddNewTaskToReadyList+0xc0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d0c:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <prvAddNewTaskToReadyList+0xbc>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d201      	bcs.n	8005d1e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d1a:	f001 f829 	bl	8006d70 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b002      	add	sp, #8
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	20002b28 	.word	0x20002b28
 8005d2c:	20002654 	.word	0x20002654
 8005d30:	20002b34 	.word	0x20002b34
 8005d34:	20002b44 	.word	0x20002b44
 8005d38:	20002b30 	.word	0x20002b30
 8005d3c:	20002658 	.word	0x20002658

08005d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b089      	sub	sp, #36	; 0x24
 8005d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d4e:	003a      	movs	r2, r7
 8005d50:	1d39      	adds	r1, r7, #4
 8005d52:	2308      	movs	r3, #8
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff f962 	bl	8005020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d5c:	683c      	ldr	r4, [r7, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	491e      	ldr	r1, [pc, #120]	; (8005ddc <vTaskStartScheduler+0x9c>)
 8005d64:	481e      	ldr	r0, [pc, #120]	; (8005de0 <vTaskStartScheduler+0xa0>)
 8005d66:	9202      	str	r2, [sp, #8]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	0022      	movs	r2, r4
 8005d72:	f7ff fe56 	bl	8005a22 <xTaskCreateStatic>
 8005d76:	0002      	movs	r2, r0
 8005d78:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <vTaskStartScheduler+0xa4>)
 8005d7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d7c:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <vTaskStartScheduler+0xa4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d84:	2301      	movs	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e001      	b.n	8005d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d103      	bne.n	8005d9c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8005d94:	f000 fc94 	bl	80066c0 <xTimerCreateTimerTask>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d113      	bne.n	8005dca <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005da2:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <vTaskStartScheduler+0xa8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3354      	adds	r3, #84	; 0x54
 8005daa:	001a      	movs	r2, r3
 8005dac:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <vTaskStartScheduler+0xac>)
 8005dae:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005db0:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <vTaskStartScheduler+0xb0>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	4252      	negs	r2, r2
 8005db6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005db8:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <vTaskStartScheduler+0xb4>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005dbe:	4b0e      	ldr	r3, [pc, #56]	; (8005df8 <vTaskStartScheduler+0xb8>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dc4:	f000 ffb0 	bl	8006d28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dc8:	e004      	b.n	8005dd4 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <vTaskStartScheduler+0x94>
 8005dd0:	b672      	cpsid	i
 8005dd2:	e7fe      	b.n	8005dd2 <vTaskStartScheduler+0x92>
}
 8005dd4:	46c0      	nop			; (mov r8, r8)
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b005      	add	sp, #20
 8005dda:	bd90      	pop	{r4, r7, pc}
 8005ddc:	08007458 	.word	0x08007458
 8005de0:	08006381 	.word	0x08006381
 8005de4:	20002b4c 	.word	0x20002b4c
 8005de8:	20002654 	.word	0x20002654
 8005dec:	20001c18 	.word	0x20001c18
 8005df0:	20002b48 	.word	0x20002b48
 8005df4:	20002b34 	.word	0x20002b34
 8005df8:	20002b2c 	.word	0x20002b2c

08005dfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e00:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <vTaskSuspendAll+0x14>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <vTaskSuspendAll+0x14>)
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20002b50 	.word	0x20002b50

08005e14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e22:	4b3a      	ldr	r3, [pc, #232]	; (8005f0c <xTaskResumeAll+0xf8>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <xTaskResumeAll+0x1a>
 8005e2a:	b672      	cpsid	i
 8005e2c:	e7fe      	b.n	8005e2c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e2e:	f000 ffaf 	bl	8006d90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e32:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <xTaskResumeAll+0xf8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	1e5a      	subs	r2, r3, #1
 8005e38:	4b34      	ldr	r3, [pc, #208]	; (8005f0c <xTaskResumeAll+0xf8>)
 8005e3a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e3c:	4b33      	ldr	r3, [pc, #204]	; (8005f0c <xTaskResumeAll+0xf8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d15b      	bne.n	8005efc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e44:	4b32      	ldr	r3, [pc, #200]	; (8005f10 <xTaskResumeAll+0xfc>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d057      	beq.n	8005efc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e4c:	e02f      	b.n	8005eae <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e4e:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <xTaskResumeAll+0x100>)
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3318      	adds	r3, #24
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f7ff f991 	bl	8005182 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3304      	adds	r3, #4
 8005e64:	0018      	movs	r0, r3
 8005e66:	f7ff f98c 	bl	8005182 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6e:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <xTaskResumeAll+0x104>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d903      	bls.n	8005e7e <xTaskResumeAll+0x6a>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7a:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <xTaskResumeAll+0x104>)
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e82:	0013      	movs	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4a24      	ldr	r2, [pc, #144]	; (8005f1c <xTaskResumeAll+0x108>)
 8005e8c:	189a      	adds	r2, r3, r2
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3304      	adds	r3, #4
 8005e92:	0019      	movs	r1, r3
 8005e94:	0010      	movs	r0, r2
 8005e96:	f7ff f91c 	bl	80050d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9e:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <xTaskResumeAll+0x10c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d302      	bcc.n	8005eae <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005ea8:	4b1e      	ldr	r3, [pc, #120]	; (8005f24 <xTaskResumeAll+0x110>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <xTaskResumeAll+0x100>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1cb      	bne.n	8005e4e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ebc:	f000 fb10 	bl	80064e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ec0:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <xTaskResumeAll+0x114>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00f      	beq.n	8005eec <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ecc:	f000 f83c 	bl	8005f48 <xTaskIncrementTick>
 8005ed0:	1e03      	subs	r3, r0, #0
 8005ed2:	d002      	beq.n	8005eda <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005ed4:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <xTaskResumeAll+0x110>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f2      	bne.n	8005ecc <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005ee6:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <xTaskResumeAll+0x114>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005eec:	4b0d      	ldr	r3, [pc, #52]	; (8005f24 <xTaskResumeAll+0x110>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ef8:	f000 ff3a 	bl	8006d70 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005efc:	f000 ff5a 	bl	8006db4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f00:	68bb      	ldr	r3, [r7, #8]
}
 8005f02:	0018      	movs	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b004      	add	sp, #16
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	20002b50 	.word	0x20002b50
 8005f10:	20002b28 	.word	0x20002b28
 8005f14:	20002ae8 	.word	0x20002ae8
 8005f18:	20002b30 	.word	0x20002b30
 8005f1c:	20002658 	.word	0x20002658
 8005f20:	20002654 	.word	0x20002654
 8005f24:	20002b3c 	.word	0x20002b3c
 8005f28:	20002b38 	.word	0x20002b38

08005f2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f32:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <xTaskGetTickCount+0x18>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f38:	687b      	ldr	r3, [r7, #4]
}
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b002      	add	sp, #8
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	20002b2c 	.word	0x20002b2c

08005f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f52:	4b4c      	ldr	r3, [pc, #304]	; (8006084 <xTaskIncrementTick+0x13c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d000      	beq.n	8005f5c <xTaskIncrementTick+0x14>
 8005f5a:	e083      	b.n	8006064 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f5c:	4b4a      	ldr	r3, [pc, #296]	; (8006088 <xTaskIncrementTick+0x140>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3301      	adds	r3, #1
 8005f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f64:	4b48      	ldr	r3, [pc, #288]	; (8006088 <xTaskIncrementTick+0x140>)
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d117      	bne.n	8005fa0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f70:	4b46      	ldr	r3, [pc, #280]	; (800608c <xTaskIncrementTick+0x144>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <xTaskIncrementTick+0x36>
 8005f7a:	b672      	cpsid	i
 8005f7c:	e7fe      	b.n	8005f7c <xTaskIncrementTick+0x34>
 8005f7e:	4b43      	ldr	r3, [pc, #268]	; (800608c <xTaskIncrementTick+0x144>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	4b42      	ldr	r3, [pc, #264]	; (8006090 <xTaskIncrementTick+0x148>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b40      	ldr	r3, [pc, #256]	; (800608c <xTaskIncrementTick+0x144>)
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	4b40      	ldr	r3, [pc, #256]	; (8006090 <xTaskIncrementTick+0x148>)
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	4b40      	ldr	r3, [pc, #256]	; (8006094 <xTaskIncrementTick+0x14c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	4b3e      	ldr	r3, [pc, #248]	; (8006094 <xTaskIncrementTick+0x14c>)
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f000 faa0 	bl	80064e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fa0:	4b3d      	ldr	r3, [pc, #244]	; (8006098 <xTaskIncrementTick+0x150>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d34e      	bcc.n	8006048 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005faa:	4b38      	ldr	r3, [pc, #224]	; (800608c <xTaskIncrementTick+0x144>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <xTaskIncrementTick+0x70>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <xTaskIncrementTick+0x72>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbe:	4b36      	ldr	r3, [pc, #216]	; (8006098 <xTaskIncrementTick+0x150>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	4252      	negs	r2, r2
 8005fc4:	601a      	str	r2, [r3, #0]
					break;
 8005fc6:	e03f      	b.n	8006048 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fc8:	4b30      	ldr	r3, [pc, #192]	; (800608c <xTaskIncrementTick+0x144>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d203      	bcs.n	8005fe8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fe0:	4b2d      	ldr	r3, [pc, #180]	; (8006098 <xTaskIncrementTick+0x150>)
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
						break;
 8005fe6:	e02f      	b.n	8006048 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	3304      	adds	r3, #4
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7ff f8c8 	bl	8005182 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3318      	adds	r3, #24
 8005ffe:	0018      	movs	r0, r3
 8006000:	f7ff f8bf 	bl	8005182 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	4b24      	ldr	r3, [pc, #144]	; (800609c <xTaskIncrementTick+0x154>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d903      	bls.n	8006018 <xTaskIncrementTick+0xd0>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4b21      	ldr	r3, [pc, #132]	; (800609c <xTaskIncrementTick+0x154>)
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	0013      	movs	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	189b      	adds	r3, r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4a1e      	ldr	r2, [pc, #120]	; (80060a0 <xTaskIncrementTick+0x158>)
 8006026:	189a      	adds	r2, r3, r2
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3304      	adds	r3, #4
 800602c:	0019      	movs	r1, r3
 800602e:	0010      	movs	r0, r2
 8006030:	f7ff f84f 	bl	80050d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006038:	4b1a      	ldr	r3, [pc, #104]	; (80060a4 <xTaskIncrementTick+0x15c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	429a      	cmp	r2, r3
 8006040:	d3b3      	bcc.n	8005faa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006042:	2301      	movs	r3, #1
 8006044:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006046:	e7b0      	b.n	8005faa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <xTaskIncrementTick+0x15c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	4914      	ldr	r1, [pc, #80]	; (80060a0 <xTaskIncrementTick+0x158>)
 8006050:	0013      	movs	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	189b      	adds	r3, r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	585b      	ldr	r3, [r3, r1]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d907      	bls.n	800606e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800605e:	2301      	movs	r3, #1
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	e004      	b.n	800606e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006064:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <xTaskIncrementTick+0x160>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <xTaskIncrementTick+0x160>)
 800606c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800606e:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <xTaskIncrementTick+0x164>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8006076:	2301      	movs	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800607a:	697b      	ldr	r3, [r7, #20]
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b006      	add	sp, #24
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20002b50 	.word	0x20002b50
 8006088:	20002b2c 	.word	0x20002b2c
 800608c:	20002ae0 	.word	0x20002ae0
 8006090:	20002ae4 	.word	0x20002ae4
 8006094:	20002b40 	.word	0x20002b40
 8006098:	20002b48 	.word	0x20002b48
 800609c:	20002b30 	.word	0x20002b30
 80060a0:	20002658 	.word	0x20002658
 80060a4:	20002654 	.word	0x20002654
 80060a8:	20002b38 	.word	0x20002b38
 80060ac:	20002b3c 	.word	0x20002b3c

080060b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060b6:	4b25      	ldr	r3, [pc, #148]	; (800614c <vTaskSwitchContext+0x9c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060be:	4b24      	ldr	r3, [pc, #144]	; (8006150 <vTaskSwitchContext+0xa0>)
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060c4:	e03d      	b.n	8006142 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80060c6:	4b22      	ldr	r3, [pc, #136]	; (8006150 <vTaskSwitchContext+0xa0>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80060cc:	4b21      	ldr	r3, [pc, #132]	; (8006154 <vTaskSwitchContext+0xa4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	e007      	b.n	80060e4 <vTaskSwitchContext+0x34>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <vTaskSwitchContext+0x2e>
 80060da:	b672      	cpsid	i
 80060dc:	e7fe      	b.n	80060dc <vTaskSwitchContext+0x2c>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	491c      	ldr	r1, [pc, #112]	; (8006158 <vTaskSwitchContext+0xa8>)
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	0013      	movs	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	189b      	adds	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	585b      	ldr	r3, [r3, r1]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0ee      	beq.n	80060d4 <vTaskSwitchContext+0x24>
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	0013      	movs	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	189b      	adds	r3, r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4a15      	ldr	r2, [pc, #84]	; (8006158 <vTaskSwitchContext+0xa8>)
 8006102:	189b      	adds	r3, r3, r2
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	605a      	str	r2, [r3, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	429a      	cmp	r2, r3
 800611a:	d104      	bne.n	8006126 <vTaskSwitchContext+0x76>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	605a      	str	r2, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <vTaskSwitchContext+0xac>)
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <vTaskSwitchContext+0xa4>)
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <vTaskSwitchContext+0xac>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3354      	adds	r3, #84	; 0x54
 800613c:	001a      	movs	r2, r3
 800613e:	4b08      	ldr	r3, [pc, #32]	; (8006160 <vTaskSwitchContext+0xb0>)
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	46bd      	mov	sp, r7
 8006146:	b002      	add	sp, #8
 8006148:	bd80      	pop	{r7, pc}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	20002b50 	.word	0x20002b50
 8006150:	20002b3c 	.word	0x20002b3c
 8006154:	20002b30 	.word	0x20002b30
 8006158:	20002658 	.word	0x20002658
 800615c:	20002654 	.word	0x20002654
 8006160:	20001c18 	.word	0x20001c18

08006164 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <vTaskPlaceOnEventList+0x14>
 8006174:	b672      	cpsid	i
 8006176:	e7fe      	b.n	8006176 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006178:	4b08      	ldr	r3, [pc, #32]	; (800619c <vTaskPlaceOnEventList+0x38>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3318      	adds	r3, #24
 800617e:	001a      	movs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	0011      	movs	r1, r2
 8006184:	0018      	movs	r0, r3
 8006186:	f7fe ffc6 	bl	8005116 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2101      	movs	r1, #1
 800618e:	0018      	movs	r0, r3
 8006190:	f000 fa42 	bl	8006618 <prvAddCurrentTaskToDelayedList>
}
 8006194:	46c0      	nop			; (mov r8, r8)
 8006196:	46bd      	mov	sp, r7
 8006198:	b002      	add	sp, #8
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20002654 	.word	0x20002654

080061a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <vTaskPlaceOnEventListRestricted+0x16>
 80061b2:	b672      	cpsid	i
 80061b4:	e7fe      	b.n	80061b4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <vTaskPlaceOnEventListRestricted+0x48>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3318      	adds	r3, #24
 80061bc:	001a      	movs	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	0011      	movs	r1, r2
 80061c2:	0018      	movs	r0, r3
 80061c4:	f7fe ff85 	bl	80050d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80061ce:	2301      	movs	r3, #1
 80061d0:	425b      	negs	r3, r3
 80061d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	0011      	movs	r1, r2
 80061da:	0018      	movs	r0, r3
 80061dc:	f000 fa1c 	bl	8006618 <prvAddCurrentTaskToDelayedList>
	}
 80061e0:	46c0      	nop			; (mov r8, r8)
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b004      	add	sp, #16
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20002654 	.word	0x20002654

080061ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <xTaskRemoveFromEventList+0x1a>
 8006202:	b672      	cpsid	i
 8006204:	e7fe      	b.n	8006204 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	3318      	adds	r3, #24
 800620a:	0018      	movs	r0, r3
 800620c:	f7fe ffb9 	bl	8005182 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006210:	4b1e      	ldr	r3, [pc, #120]	; (800628c <xTaskRemoveFromEventList+0xa0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d11d      	bne.n	8006254 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	3304      	adds	r3, #4
 800621c:	0018      	movs	r0, r3
 800621e:	f7fe ffb0 	bl	8005182 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006226:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <xTaskRemoveFromEventList+0xa4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d903      	bls.n	8006236 <xTaskRemoveFromEventList+0x4a>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006232:	4b17      	ldr	r3, [pc, #92]	; (8006290 <xTaskRemoveFromEventList+0xa4>)
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623a:	0013      	movs	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	189b      	adds	r3, r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4a14      	ldr	r2, [pc, #80]	; (8006294 <xTaskRemoveFromEventList+0xa8>)
 8006244:	189a      	adds	r2, r3, r2
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	3304      	adds	r3, #4
 800624a:	0019      	movs	r1, r3
 800624c:	0010      	movs	r0, r2
 800624e:	f7fe ff40 	bl	80050d2 <vListInsertEnd>
 8006252:	e007      	b.n	8006264 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3318      	adds	r3, #24
 8006258:	001a      	movs	r2, r3
 800625a:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <xTaskRemoveFromEventList+0xac>)
 800625c:	0011      	movs	r1, r2
 800625e:	0018      	movs	r0, r3
 8006260:	f7fe ff37 	bl	80050d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006268:	4b0c      	ldr	r3, [pc, #48]	; (800629c <xTaskRemoveFromEventList+0xb0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	429a      	cmp	r2, r3
 8006270:	d905      	bls.n	800627e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006272:	2301      	movs	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006276:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <xTaskRemoveFromEventList+0xb4>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e001      	b.n	8006282 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006282:	68fb      	ldr	r3, [r7, #12]
}
 8006284:	0018      	movs	r0, r3
 8006286:	46bd      	mov	sp, r7
 8006288:	b004      	add	sp, #16
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20002b50 	.word	0x20002b50
 8006290:	20002b30 	.word	0x20002b30
 8006294:	20002658 	.word	0x20002658
 8006298:	20002ae8 	.word	0x20002ae8
 800629c:	20002654 	.word	0x20002654
 80062a0:	20002b3c 	.word	0x20002b3c

080062a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <vTaskInternalSetTimeOutState+0x20>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062b4:	4b04      	ldr	r3, [pc, #16]	; (80062c8 <vTaskInternalSetTimeOutState+0x24>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	605a      	str	r2, [r3, #4]
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b002      	add	sp, #8
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	20002b40 	.word	0x20002b40
 80062c8:	20002b2c 	.word	0x20002b2c

080062cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <xTaskCheckForTimeOut+0x14>
 80062dc:	b672      	cpsid	i
 80062de:	e7fe      	b.n	80062de <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <xTaskCheckForTimeOut+0x1e>
 80062e6:	b672      	cpsid	i
 80062e8:	e7fe      	b.n	80062e8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80062ea:	f000 fd51 	bl	8006d90 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062ee:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <xTaskCheckForTimeOut+0x98>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3301      	adds	r3, #1
 8006304:	d102      	bne.n	800630c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e024      	b.n	8006356 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	4b15      	ldr	r3, [pc, #84]	; (8006368 <xTaskCheckForTimeOut+0x9c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d007      	beq.n	8006328 <xTaskCheckForTimeOut+0x5c>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	429a      	cmp	r2, r3
 8006320:	d302      	bcc.n	8006328 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006322:	2301      	movs	r3, #1
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	e016      	b.n	8006356 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	429a      	cmp	r2, r3
 8006330:	d20c      	bcs.n	800634c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1ad2      	subs	r2, r2, r3
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0018      	movs	r0, r3
 8006342:	f7ff ffaf 	bl	80062a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006346:	2300      	movs	r3, #0
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e004      	b.n	8006356 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006356:	f000 fd2d 	bl	8006db4 <vPortExitCritical>

	return xReturn;
 800635a:	697b      	ldr	r3, [r7, #20]
}
 800635c:	0018      	movs	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	b006      	add	sp, #24
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20002b2c 	.word	0x20002b2c
 8006368:	20002b40 	.word	0x20002b40

0800636c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006370:	4b02      	ldr	r3, [pc, #8]	; (800637c <vTaskMissedYield+0x10>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]
}
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20002b3c 	.word	0x20002b3c

08006380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006388:	f000 f84e 	bl	8006428 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800638c:	4b03      	ldr	r3, [pc, #12]	; (800639c <prvIdleTask+0x1c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d9f9      	bls.n	8006388 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006394:	f000 fcec 	bl	8006d70 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006398:	e7f6      	b.n	8006388 <prvIdleTask+0x8>
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	20002658 	.word	0x20002658

080063a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063a6:	2300      	movs	r3, #0
 80063a8:	607b      	str	r3, [r7, #4]
 80063aa:	e00c      	b.n	80063c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	0013      	movs	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	189b      	adds	r3, r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4a14      	ldr	r2, [pc, #80]	; (8006408 <prvInitialiseTaskLists+0x68>)
 80063b8:	189b      	adds	r3, r3, r2
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7fe fe60 	bl	8005080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3301      	adds	r3, #1
 80063c4:	607b      	str	r3, [r7, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b37      	cmp	r3, #55	; 0x37
 80063ca:	d9ef      	bls.n	80063ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <prvInitialiseTaskLists+0x6c>)
 80063ce:	0018      	movs	r0, r3
 80063d0:	f7fe fe56 	bl	8005080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063d4:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <prvInitialiseTaskLists+0x70>)
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7fe fe52 	bl	8005080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <prvInitialiseTaskLists+0x74>)
 80063de:	0018      	movs	r0, r3
 80063e0:	f7fe fe4e 	bl	8005080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063e4:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <prvInitialiseTaskLists+0x78>)
 80063e6:	0018      	movs	r0, r3
 80063e8:	f7fe fe4a 	bl	8005080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <prvInitialiseTaskLists+0x7c>)
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7fe fe46 	bl	8005080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvInitialiseTaskLists+0x80>)
 80063f6:	4a05      	ldr	r2, [pc, #20]	; (800640c <prvInitialiseTaskLists+0x6c>)
 80063f8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063fa:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <prvInitialiseTaskLists+0x84>)
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <prvInitialiseTaskLists+0x70>)
 80063fe:	601a      	str	r2, [r3, #0]
}
 8006400:	46c0      	nop			; (mov r8, r8)
 8006402:	46bd      	mov	sp, r7
 8006404:	b002      	add	sp, #8
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20002658 	.word	0x20002658
 800640c:	20002ab8 	.word	0x20002ab8
 8006410:	20002acc 	.word	0x20002acc
 8006414:	20002ae8 	.word	0x20002ae8
 8006418:	20002afc 	.word	0x20002afc
 800641c:	20002b14 	.word	0x20002b14
 8006420:	20002ae0 	.word	0x20002ae0
 8006424:	20002ae4 	.word	0x20002ae4

08006428 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800642e:	e01a      	b.n	8006466 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006430:	f000 fcae 	bl	8006d90 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006434:	4b10      	ldr	r3, [pc, #64]	; (8006478 <prvCheckTasksWaitingTermination+0x50>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3304      	adds	r3, #4
 8006440:	0018      	movs	r0, r3
 8006442:	f7fe fe9e 	bl	8005182 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006446:	4b0d      	ldr	r3, [pc, #52]	; (800647c <prvCheckTasksWaitingTermination+0x54>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	1e5a      	subs	r2, r3, #1
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <prvCheckTasksWaitingTermination+0x54>)
 800644e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <prvCheckTasksWaitingTermination+0x58>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	1e5a      	subs	r2, r3, #1
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <prvCheckTasksWaitingTermination+0x58>)
 8006458:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800645a:	f000 fcab 	bl	8006db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	0018      	movs	r0, r3
 8006462:	f000 f80f 	bl	8006484 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <prvCheckTasksWaitingTermination+0x58>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e0      	bne.n	8006430 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800646e:	46c0      	nop			; (mov r8, r8)
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	46bd      	mov	sp, r7
 8006474:	b002      	add	sp, #8
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20002afc 	.word	0x20002afc
 800647c:	20002b28 	.word	0x20002b28
 8006480:	20002b10 	.word	0x20002b10

08006484 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3354      	adds	r3, #84	; 0x54
 8006490:	0018      	movs	r0, r3
 8006492:	f000 feff 	bl	8007294 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	22b9      	movs	r2, #185	; 0xb9
 800649a:	5c9b      	ldrb	r3, [r3, r2]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	0018      	movs	r0, r3
 80064a6:	f000 fdb1 	bl	800700c <vPortFree>
				vPortFree( pxTCB );
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	0018      	movs	r0, r3
 80064ae:	f000 fdad 	bl	800700c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064b2:	e010      	b.n	80064d6 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	22b9      	movs	r2, #185	; 0xb9
 80064b8:	5c9b      	ldrb	r3, [r3, r2]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d104      	bne.n	80064c8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	0018      	movs	r0, r3
 80064c2:	f000 fda3 	bl	800700c <vPortFree>
	}
 80064c6:	e006      	b.n	80064d6 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	22b9      	movs	r2, #185	; 0xb9
 80064cc:	5c9b      	ldrb	r3, [r3, r2]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d001      	beq.n	80064d6 <prvDeleteTCB+0x52>
 80064d2:	b672      	cpsid	i
 80064d4:	e7fe      	b.n	80064d4 <prvDeleteTCB+0x50>
	}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	46bd      	mov	sp, r7
 80064da:	b002      	add	sp, #8
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064e6:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <prvResetNextTaskUnblockTime+0x40>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <prvResetNextTaskUnblockTime+0x14>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <prvResetNextTaskUnblockTime+0x16>
 80064f4:	2300      	movs	r3, #0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064fa:	4b0a      	ldr	r3, [pc, #40]	; (8006524 <prvResetNextTaskUnblockTime+0x44>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	4252      	negs	r2, r2
 8006500:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006502:	e008      	b.n	8006516 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <prvResetNextTaskUnblockTime+0x40>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	4b04      	ldr	r3, [pc, #16]	; (8006524 <prvResetNextTaskUnblockTime+0x44>)
 8006514:	601a      	str	r2, [r3, #0]
}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	46bd      	mov	sp, r7
 800651a:	b002      	add	sp, #8
 800651c:	bd80      	pop	{r7, pc}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	20002ae0 	.word	0x20002ae0
 8006524:	20002b48 	.word	0x20002b48

08006528 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <xTaskGetSchedulerState+0x30>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d102      	bne.n	800653c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006536:	2301      	movs	r3, #1
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	e008      	b.n	800654e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800653c:	4b07      	ldr	r3, [pc, #28]	; (800655c <xTaskGetSchedulerState+0x34>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006544:	2302      	movs	r3, #2
 8006546:	607b      	str	r3, [r7, #4]
 8006548:	e001      	b.n	800654e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800654a:	2300      	movs	r3, #0
 800654c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800654e:	687b      	ldr	r3, [r7, #4]
	}
 8006550:	0018      	movs	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20002b34 	.word	0x20002b34
 800655c:	20002b50 	.word	0x20002b50

08006560 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d044      	beq.n	8006600 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006576:	4b25      	ldr	r3, [pc, #148]	; (800660c <xTaskPriorityDisinherit+0xac>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	d001      	beq.n	8006584 <xTaskPriorityDisinherit+0x24>
 8006580:	b672      	cpsid	i
 8006582:	e7fe      	b.n	8006582 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <xTaskPriorityDisinherit+0x30>
 800658c:	b672      	cpsid	i
 800658e:	e7fe      	b.n	800658e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006594:	1e5a      	subs	r2, r3, #1
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d02c      	beq.n	8006600 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d128      	bne.n	8006600 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	3304      	adds	r3, #4
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7fe fde5 	bl	8005182 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	2238      	movs	r2, #56	; 0x38
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <xTaskPriorityDisinherit+0xb0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d903      	bls.n	80065e0 <xTaskPriorityDisinherit+0x80>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <xTaskPriorityDisinherit+0xb0>)
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e4:	0013      	movs	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	189b      	adds	r3, r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4a09      	ldr	r2, [pc, #36]	; (8006614 <xTaskPriorityDisinherit+0xb4>)
 80065ee:	189a      	adds	r2, r3, r2
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	3304      	adds	r3, #4
 80065f4:	0019      	movs	r1, r3
 80065f6:	0010      	movs	r0, r2
 80065f8:	f7fe fd6b 	bl	80050d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006600:	68fb      	ldr	r3, [r7, #12]
	}
 8006602:	0018      	movs	r0, r3
 8006604:	46bd      	mov	sp, r7
 8006606:	b004      	add	sp, #16
 8006608:	bd80      	pop	{r7, pc}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	20002654 	.word	0x20002654
 8006610:	20002b30 	.word	0x20002b30
 8006614:	20002658 	.word	0x20002658

08006618 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006622:	4b21      	ldr	r3, [pc, #132]	; (80066a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006628:	4b20      	ldr	r3, [pc, #128]	; (80066ac <prvAddCurrentTaskToDelayedList+0x94>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3304      	adds	r3, #4
 800662e:	0018      	movs	r0, r3
 8006630:	f7fe fda7 	bl	8005182 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3301      	adds	r3, #1
 8006638:	d10b      	bne.n	8006652 <prvAddCurrentTaskToDelayedList+0x3a>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006640:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	1d1a      	adds	r2, r3, #4
 8006646:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006648:	0011      	movs	r1, r2
 800664a:	0018      	movs	r0, r3
 800664c:	f7fe fd41 	bl	80050d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006650:	e026      	b.n	80066a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	18d3      	adds	r3, r2, r3
 8006658:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800665a:	4b14      	ldr	r3, [pc, #80]	; (80066ac <prvAddCurrentTaskToDelayedList+0x94>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	429a      	cmp	r2, r3
 8006668:	d209      	bcs.n	800667e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800666a:	4b12      	ldr	r3, [pc, #72]	; (80066b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3304      	adds	r3, #4
 8006674:	0019      	movs	r1, r3
 8006676:	0010      	movs	r0, r2
 8006678:	f7fe fd4d 	bl	8005116 <vListInsert>
}
 800667c:	e010      	b.n	80066a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800667e:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3304      	adds	r3, #4
 8006688:	0019      	movs	r1, r3
 800668a:	0010      	movs	r0, r2
 800668c:	f7fe fd43 	bl	8005116 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006690:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	429a      	cmp	r2, r3
 8006698:	d202      	bcs.n	80066a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800669a:	4b08      	ldr	r3, [pc, #32]	; (80066bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	601a      	str	r2, [r3, #0]
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b004      	add	sp, #16
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20002b2c 	.word	0x20002b2c
 80066ac:	20002654 	.word	0x20002654
 80066b0:	20002b14 	.word	0x20002b14
 80066b4:	20002ae4 	.word	0x20002ae4
 80066b8:	20002ae0 	.word	0x20002ae0
 80066bc:	20002b48 	.word	0x20002b48

080066c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b089      	sub	sp, #36	; 0x24
 80066c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066ca:	f000 fa87 	bl	8006bdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066ce:	4b17      	ldr	r3, [pc, #92]	; (800672c <xTimerCreateTimerTask+0x6c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d020      	beq.n	8006718 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066de:	003a      	movs	r2, r7
 80066e0:	1d39      	adds	r1, r7, #4
 80066e2:	2308      	movs	r3, #8
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	0018      	movs	r0, r3
 80066e8:	f7fe fcb2 	bl	8005050 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066ec:	683c      	ldr	r4, [r7, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	490f      	ldr	r1, [pc, #60]	; (8006730 <xTimerCreateTimerTask+0x70>)
 80066f4:	480f      	ldr	r0, [pc, #60]	; (8006734 <xTimerCreateTimerTask+0x74>)
 80066f6:	9202      	str	r2, [sp, #8]
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	2306      	movs	r3, #6
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	2300      	movs	r3, #0
 8006700:	0022      	movs	r2, r4
 8006702:	f7ff f98e 	bl	8005a22 <xTaskCreateStatic>
 8006706:	0002      	movs	r2, r0
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <xTimerCreateTimerTask+0x78>)
 800670a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <xTimerCreateTimerTask+0x78>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006714:	2301      	movs	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <xTimerCreateTimerTask+0x62>
 800671e:	b672      	cpsid	i
 8006720:	e7fe      	b.n	8006720 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006722:	68fb      	ldr	r3, [r7, #12]
}
 8006724:	0018      	movs	r0, r3
 8006726:	46bd      	mov	sp, r7
 8006728:	b005      	add	sp, #20
 800672a:	bd90      	pop	{r4, r7, pc}
 800672c:	20002b84 	.word	0x20002b84
 8006730:	08007460 	.word	0x08007460
 8006734:	08006841 	.word	0x08006841
 8006738:	20002b88 	.word	0x20002b88

0800673c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800673c:	b590      	push	{r4, r7, lr}
 800673e:	b08b      	sub	sp, #44	; 0x2c
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800674a:	2300      	movs	r3, #0
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <xTimerGenericCommand+0x1c>
 8006754:	b672      	cpsid	i
 8006756:	e7fe      	b.n	8006756 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006758:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <xTimerGenericCommand+0x90>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d030      	beq.n	80067c2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006760:	2414      	movs	r4, #20
 8006762:	193b      	adds	r3, r7, r4
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006768:	193b      	adds	r3, r7, r4
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800676e:	193b      	adds	r3, r7, r4
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b05      	cmp	r3, #5
 8006778:	dc19      	bgt.n	80067ae <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800677a:	f7ff fed5 	bl	8006528 <xTaskGetSchedulerState>
 800677e:	0003      	movs	r3, r0
 8006780:	2b02      	cmp	r3, #2
 8006782:	d109      	bne.n	8006798 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006784:	4b11      	ldr	r3, [pc, #68]	; (80067cc <xTimerGenericCommand+0x90>)
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800678a:	1939      	adds	r1, r7, r4
 800678c:	2300      	movs	r3, #0
 800678e:	f7fe fde6 	bl	800535e <xQueueGenericSend>
 8006792:	0003      	movs	r3, r0
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
 8006796:	e014      	b.n	80067c2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006798:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <xTimerGenericCommand+0x90>)
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	2314      	movs	r3, #20
 800679e:	18f9      	adds	r1, r7, r3
 80067a0:	2300      	movs	r3, #0
 80067a2:	2200      	movs	r2, #0
 80067a4:	f7fe fddb 	bl	800535e <xQueueGenericSend>
 80067a8:	0003      	movs	r3, r0
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
 80067ac:	e009      	b.n	80067c2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <xTimerGenericCommand+0x90>)
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	2314      	movs	r3, #20
 80067b6:	18f9      	adds	r1, r7, r3
 80067b8:	2300      	movs	r3, #0
 80067ba:	f7fe fe94 	bl	80054e6 <xQueueGenericSendFromISR>
 80067be:	0003      	movs	r3, r0
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067c4:	0018      	movs	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b00b      	add	sp, #44	; 0x2c
 80067ca:	bd90      	pop	{r4, r7, pc}
 80067cc:	20002b84 	.word	0x20002b84

080067d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067da:	4b18      	ldr	r3, [pc, #96]	; (800683c <prvProcessExpiredTimer+0x6c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3304      	adds	r3, #4
 80067e8:	0018      	movs	r0, r3
 80067ea:	f7fe fcca 	bl	8005182 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d119      	bne.n	800682a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	18d1      	adds	r1, r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 f8b6 	bl	8006974 <prvInsertTimerInActiveList>
 8006808:	1e03      	subs	r3, r0, #0
 800680a:	d00e      	beq.n	800682a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	2300      	movs	r3, #0
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	2100      	movs	r1, #0
 8006818:	f7ff ff90 	bl	800673c <xTimerGenericCommand>
 800681c:	0003      	movs	r3, r0
 800681e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <prvProcessExpiredTimer+0x5a>
 8006826:	b672      	cpsid	i
 8006828:	e7fe      	b.n	8006828 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	0010      	movs	r0, r2
 8006832:	4798      	blx	r3
}
 8006834:	46c0      	nop			; (mov r8, r8)
 8006836:	46bd      	mov	sp, r7
 8006838:	b004      	add	sp, #16
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20002b7c 	.word	0x20002b7c

08006840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006848:	2308      	movs	r3, #8
 800684a:	18fb      	adds	r3, r7, r3
 800684c:	0018      	movs	r0, r3
 800684e:	f000 f851 	bl	80068f4 <prvGetNextExpireTime>
 8006852:	0003      	movs	r3, r0
 8006854:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	0011      	movs	r1, r2
 800685c:	0018      	movs	r0, r3
 800685e:	f000 f803 	bl	8006868 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006862:	f000 f8c9 	bl	80069f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006866:	e7ef      	b.n	8006848 <prvTimerTask+0x8>

08006868 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006872:	f7ff fac3 	bl	8005dfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006876:	2308      	movs	r3, #8
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	0018      	movs	r0, r3
 800687c:	f000 f85a 	bl	8006934 <prvSampleTimeNow>
 8006880:	0003      	movs	r3, r0
 8006882:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d129      	bne.n	80068de <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10c      	bne.n	80068aa <prvProcessTimerOrBlockTask+0x42>
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	429a      	cmp	r2, r3
 8006896:	d808      	bhi.n	80068aa <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006898:	f7ff fabc 	bl	8005e14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0011      	movs	r1, r2
 80068a2:	0018      	movs	r0, r3
 80068a4:	f7ff ff94 	bl	80067d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068a8:	e01b      	b.n	80068e2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d006      	beq.n	80068be <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068b0:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <prvProcessTimerOrBlockTask+0x84>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	425a      	negs	r2, r3
 80068b8:	4153      	adcs	r3, r2
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068be:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <prvProcessTimerOrBlockTask+0x88>)
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	0019      	movs	r1, r3
 80068cc:	f7ff f876 	bl	80059bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068d0:	f7ff faa0 	bl	8005e14 <xTaskResumeAll>
 80068d4:	1e03      	subs	r3, r0, #0
 80068d6:	d104      	bne.n	80068e2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80068d8:	f000 fa4a 	bl	8006d70 <vPortYield>
}
 80068dc:	e001      	b.n	80068e2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80068de:	f7ff fa99 	bl	8005e14 <xTaskResumeAll>
}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	46bd      	mov	sp, r7
 80068e6:	b004      	add	sp, #16
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	20002b80 	.word	0x20002b80
 80068f0:	20002b84 	.word	0x20002b84

080068f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068fc:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <prvGetNextExpireTime+0x3c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	425a      	negs	r2, r3
 8006904:	4153      	adcs	r3, r2
 8006906:	b2db      	uxtb	r3, r3
 8006908:	001a      	movs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d105      	bne.n	8006922 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <prvGetNextExpireTime+0x3c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	e001      	b.n	8006926 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006926:	68fb      	ldr	r3, [r7, #12]
}
 8006928:	0018      	movs	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	b004      	add	sp, #16
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20002b7c 	.word	0x20002b7c

08006934 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800693c:	f7ff faf6 	bl	8005f2c <xTaskGetTickCount>
 8006940:	0003      	movs	r3, r0
 8006942:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006944:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <prvSampleTimeNow+0x3c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	429a      	cmp	r2, r3
 800694c:	d205      	bcs.n	800695a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800694e:	f000 f8eb 	bl	8006b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e002      	b.n	8006960 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006960:	4b03      	ldr	r3, [pc, #12]	; (8006970 <prvSampleTimeNow+0x3c>)
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006966:	68fb      	ldr	r3, [r7, #12]
}
 8006968:	0018      	movs	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	b004      	add	sp, #16
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20002b8c 	.word	0x20002b8c

08006974 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d812      	bhi.n	80069c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069a8:	2301      	movs	r3, #1
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e01b      	b.n	80069e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069ae:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <prvInsertTimerInActiveList+0x7c>)
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3304      	adds	r3, #4
 80069b6:	0019      	movs	r1, r3
 80069b8:	0010      	movs	r0, r2
 80069ba:	f7fe fbac 	bl	8005116 <vListInsert>
 80069be:	e012      	b.n	80069e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d206      	bcs.n	80069d6 <prvInsertTimerInActiveList+0x62>
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069d0:	2301      	movs	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e007      	b.n	80069e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <prvInsertTimerInActiveList+0x80>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3304      	adds	r3, #4
 80069de:	0019      	movs	r1, r3
 80069e0:	0010      	movs	r0, r2
 80069e2:	f7fe fb98 	bl	8005116 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069e6:	697b      	ldr	r3, [r7, #20]
}
 80069e8:	0018      	movs	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	b006      	add	sp, #24
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20002b80 	.word	0x20002b80
 80069f4:	20002b7c 	.word	0x20002b7c

080069f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069f8:	b590      	push	{r4, r7, lr}
 80069fa:	b08d      	sub	sp, #52	; 0x34
 80069fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069fe:	e07f      	b.n	8006b00 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a00:	2208      	movs	r2, #8
 8006a02:	18bb      	adds	r3, r7, r2
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da0f      	bge.n	8006a2a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a0a:	18bb      	adds	r3, r7, r2
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <prvProcessReceivedCommands+0x22>
 8006a16:	b672      	cpsid	i
 8006a18:	e7fe      	b.n	8006a18 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	6858      	ldr	r0, [r3, #4]
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	0019      	movs	r1, r3
 8006a28:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a2a:	2208      	movs	r2, #8
 8006a2c:	18bb      	adds	r3, r7, r2
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	db64      	blt.n	8006afe <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a34:	18bb      	adds	r3, r7, r2
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3304      	adds	r3, #4
 8006a46:	0018      	movs	r0, r3
 8006a48:	f7fe fb9b 	bl	8005182 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a4c:	1d3b      	adds	r3, r7, #4
 8006a4e:	0018      	movs	r0, r3
 8006a50:	f7ff ff70 	bl	8006934 <prvSampleTimeNow>
 8006a54:	0003      	movs	r3, r0
 8006a56:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006a58:	2308      	movs	r3, #8
 8006a5a:	18fb      	adds	r3, r7, r3
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b09      	cmp	r3, #9
 8006a60:	d84e      	bhi.n	8006b00 <prvProcessReceivedCommands+0x108>
 8006a62:	009a      	lsls	r2, r3, #2
 8006a64:	4b2e      	ldr	r3, [pc, #184]	; (8006b20 <prvProcessReceivedCommands+0x128>)
 8006a66:	18d3      	adds	r3, r2, r3
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a6c:	2408      	movs	r4, #8
 8006a6e:	193b      	adds	r3, r7, r4
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	18d1      	adds	r1, r2, r3
 8006a78:	193b      	adds	r3, r7, r4
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	6a38      	ldr	r0, [r7, #32]
 8006a80:	f7ff ff78 	bl	8006974 <prvInsertTimerInActiveList>
 8006a84:	1e03      	subs	r3, r0, #0
 8006a86:	d03b      	beq.n	8006b00 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	6a3a      	ldr	r2, [r7, #32]
 8006a8e:	0010      	movs	r0, r2
 8006a90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d132      	bne.n	8006b00 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a9a:	193b      	adds	r3, r7, r4
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	18d2      	adds	r2, r2, r3
 8006aa4:	6a38      	ldr	r0, [r7, #32]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2100      	movs	r1, #0
 8006aae:	f7ff fe45 	bl	800673c <xTimerGenericCommand>
 8006ab2:	0003      	movs	r3, r0
 8006ab4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d121      	bne.n	8006b00 <prvProcessReceivedCommands+0x108>
 8006abc:	b672      	cpsid	i
 8006abe:	e7fe      	b.n	8006abe <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <prvProcessReceivedCommands+0xde>
 8006ad2:	b672      	cpsid	i
 8006ad4:	e7fe      	b.n	8006ad4 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	18d1      	adds	r1, r2, r3
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	6a38      	ldr	r0, [r7, #32]
 8006ae4:	f7ff ff46 	bl	8006974 <prvInsertTimerInActiveList>
					break;
 8006ae8:	e00a      	b.n	8006b00 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	222c      	movs	r2, #44	; 0x2c
 8006aee:	5c9b      	ldrb	r3, [r3, r2]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	0018      	movs	r0, r3
 8006af8:	f000 fa88 	bl	800700c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006afc:	e000      	b.n	8006b00 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006afe:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b00:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <prvProcessReceivedCommands+0x12c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2208      	movs	r2, #8
 8006b06:	18b9      	adds	r1, r7, r2
 8006b08:	2200      	movs	r2, #0
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f7fe fd5c 	bl	80055c8 <xQueueReceive>
 8006b10:	1e03      	subs	r3, r0, #0
 8006b12:	d000      	beq.n	8006b16 <prvProcessReceivedCommands+0x11e>
 8006b14:	e774      	b.n	8006a00 <prvProcessReceivedCommands+0x8>
	}
}
 8006b16:	46c0      	nop			; (mov r8, r8)
 8006b18:	46c0      	nop			; (mov r8, r8)
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b00b      	add	sp, #44	; 0x2c
 8006b1e:	bd90      	pop	{r4, r7, pc}
 8006b20:	080074ac 	.word	0x080074ac
 8006b24:	20002b84 	.word	0x20002b84

08006b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b2e:	e03e      	b.n	8006bae <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b30:	4b28      	ldr	r3, [pc, #160]	; (8006bd4 <prvSwitchTimerLists+0xac>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b3a:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <prvSwitchTimerLists+0xac>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3304      	adds	r3, #4
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f7fe fb1a 	bl	8005182 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	0010      	movs	r0, r2
 8006b56:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d126      	bne.n	8006bae <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	18d3      	adds	r3, r2, r3
 8006b68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d90e      	bls.n	8006b90 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7e:	4b15      	ldr	r3, [pc, #84]	; (8006bd4 <prvSwitchTimerLists+0xac>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3304      	adds	r3, #4
 8006b86:	0019      	movs	r1, r3
 8006b88:	0010      	movs	r0, r2
 8006b8a:	f7fe fac4 	bl	8005116 <vListInsert>
 8006b8e:	e00e      	b.n	8006bae <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	2300      	movs	r3, #0
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	f7ff fdce 	bl	800673c <xTimerGenericCommand>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <prvSwitchTimerLists+0x86>
 8006baa:	b672      	cpsid	i
 8006bac:	e7fe      	b.n	8006bac <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <prvSwitchTimerLists+0xac>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1bb      	bne.n	8006b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bb8:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <prvSwitchTimerLists+0xac>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <prvSwitchTimerLists+0xb0>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b04      	ldr	r3, [pc, #16]	; (8006bd4 <prvSwitchTimerLists+0xac>)
 8006bc4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006bc6:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <prvSwitchTimerLists+0xb0>)
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	601a      	str	r2, [r3, #0]
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b006      	add	sp, #24
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20002b7c 	.word	0x20002b7c
 8006bd8:	20002b80 	.word	0x20002b80

08006bdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006be2:	f000 f8d5 	bl	8006d90 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006be6:	4b16      	ldr	r3, [pc, #88]	; (8006c40 <prvCheckForValidListAndQueue+0x64>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d123      	bne.n	8006c36 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bee:	4b15      	ldr	r3, [pc, #84]	; (8006c44 <prvCheckForValidListAndQueue+0x68>)
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7fe fa45 	bl	8005080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bf6:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <prvCheckForValidListAndQueue+0x6c>)
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f7fe fa41 	bl	8005080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bfe:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <prvCheckForValidListAndQueue+0x70>)
 8006c00:	4a10      	ldr	r2, [pc, #64]	; (8006c44 <prvCheckForValidListAndQueue+0x68>)
 8006c02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c04:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <prvCheckForValidListAndQueue+0x74>)
 8006c06:	4a10      	ldr	r2, [pc, #64]	; (8006c48 <prvCheckForValidListAndQueue+0x6c>)
 8006c08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c0a:	4b12      	ldr	r3, [pc, #72]	; (8006c54 <prvCheckForValidListAndQueue+0x78>)
 8006c0c:	4a12      	ldr	r2, [pc, #72]	; (8006c58 <prvCheckForValidListAndQueue+0x7c>)
 8006c0e:	2100      	movs	r1, #0
 8006c10:	9100      	str	r1, [sp, #0]
 8006c12:	2110      	movs	r1, #16
 8006c14:	200a      	movs	r0, #10
 8006c16:	f7fe fb30 	bl	800527a <xQueueGenericCreateStatic>
 8006c1a:	0002      	movs	r2, r0
 8006c1c:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <prvCheckForValidListAndQueue+0x64>)
 8006c1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <prvCheckForValidListAndQueue+0x64>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <prvCheckForValidListAndQueue+0x64>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a0b      	ldr	r2, [pc, #44]	; (8006c5c <prvCheckForValidListAndQueue+0x80>)
 8006c2e:	0011      	movs	r1, r2
 8006c30:	0018      	movs	r0, r3
 8006c32:	f7fe fe9b 	bl	800596c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c36:	f000 f8bd 	bl	8006db4 <vPortExitCritical>
}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20002b84 	.word	0x20002b84
 8006c44:	20002b54 	.word	0x20002b54
 8006c48:	20002b68 	.word	0x20002b68
 8006c4c:	20002b7c 	.word	0x20002b7c
 8006c50:	20002b80 	.word	0x20002b80
 8006c54:	20002c30 	.word	0x20002c30
 8006c58:	20002b90 	.word	0x20002b90
 8006c5c:	08007468 	.word	0x08007468

08006c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3b04      	subs	r3, #4
 8006c70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2280      	movs	r2, #128	; 0x80
 8006c76:	0452      	lsls	r2, r2, #17
 8006c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3b04      	subs	r3, #4
 8006c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3b04      	subs	r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c8c:	4a08      	ldr	r2, [pc, #32]	; (8006cb0 <pxPortInitialiseStack+0x50>)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3b14      	subs	r3, #20
 8006c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3b20      	subs	r3, #32
 8006ca2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
}
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b004      	add	sp, #16
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	08006cb5 	.word	0x08006cb5

08006cb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cbe:	4b08      	ldr	r3, [pc, #32]	; (8006ce0 <prvTaskExitError+0x2c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	d001      	beq.n	8006cca <prvTaskExitError+0x16>
 8006cc6:	b672      	cpsid	i
 8006cc8:	e7fe      	b.n	8006cc8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006cca:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006ccc:	46c0      	nop			; (mov r8, r8)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0fc      	beq.n	8006cce <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cd4:	46c0      	nop			; (mov r8, r8)
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	b002      	add	sp, #8
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	20001c14 	.word	0x20001c14

08006ce4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006ce8:	46c0      	nop			; (mov r8, r8)
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006cf0:	4a0b      	ldr	r2, [pc, #44]	; (8006d20 <pxCurrentTCBConst2>)
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	3020      	adds	r0, #32
 8006cf8:	f380 8809 	msr	PSP, r0
 8006cfc:	2002      	movs	r0, #2
 8006cfe:	f380 8814 	msr	CONTROL, r0
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006d08:	46ae      	mov	lr, r5
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	bc04      	pop	{r2}
 8006d0e:	b662      	cpsie	i
 8006d10:	4718      	bx	r3
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	46c0      	nop			; (mov r8, r8)
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	46c0      	nop			; (mov r8, r8)
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	46c0      	nop			; (mov r8, r8)
 8006d1e:	46c0      	nop			; (mov r8, r8)

08006d20 <pxCurrentTCBConst2>:
 8006d20:	20002654 	.word	0x20002654
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006d24:	46c0      	nop			; (mov r8, r8)
 8006d26:	46c0      	nop			; (mov r8, r8)

08006d28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8006d2c:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <xPortStartScheduler+0x40>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <xPortStartScheduler+0x40>)
 8006d32:	21ff      	movs	r1, #255	; 0xff
 8006d34:	0409      	lsls	r1, r1, #16
 8006d36:	430a      	orrs	r2, r1
 8006d38:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <xPortStartScheduler+0x40>)
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <xPortStartScheduler+0x40>)
 8006d40:	21ff      	movs	r1, #255	; 0xff
 8006d42:	0609      	lsls	r1, r1, #24
 8006d44:	430a      	orrs	r2, r1
 8006d46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006d48:	f000 f898 	bl	8006e7c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d4c:	4b07      	ldr	r3, [pc, #28]	; (8006d6c <xPortStartScheduler+0x44>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006d52:	f7ff ffcd 	bl	8006cf0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d56:	f7ff f9ab 	bl	80060b0 <vTaskSwitchContext>
	prvTaskExitError();
 8006d5a:	f7ff ffab 	bl	8006cb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	e000ed20 	.word	0xe000ed20
 8006d6c:	20001c14 	.word	0x20001c14

08006d70 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <vPortYield+0x1c>)
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	0552      	lsls	r2, r2, #21
 8006d7a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006d7c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006d80:	f3bf 8f6f 	isb	sy
}
 8006d84:	46c0      	nop			; (mov r8, r8)
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006d94:	b672      	cpsid	i
    uxCriticalNesting++;
 8006d96:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <vPortEnterCritical+0x20>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <vPortEnterCritical+0x20>)
 8006d9e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006da0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006da4:	f3bf 8f6f 	isb	sy
}
 8006da8:	46c0      	nop			; (mov r8, r8)
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	20001c14 	.word	0x20001c14

08006db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006db8:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <vPortExitCritical+0x2c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <vPortExitCritical+0x10>
 8006dc0:	b672      	cpsid	i
 8006dc2:	e7fe      	b.n	8006dc2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <vPortExitCritical+0x2c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	1e5a      	subs	r2, r3, #1
 8006dca:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <vPortExitCritical+0x2c>)
 8006dcc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8006dce:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <vPortExitCritical+0x2c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d100      	bne.n	8006dd8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006dd6:	b662      	cpsie	i
    }
}
 8006dd8:	46c0      	nop			; (mov r8, r8)
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	20001c14 	.word	0x20001c14

08006de4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006de4:	f3ef 8010 	mrs	r0, PRIMASK
 8006de8:	b672      	cpsid	i
 8006dea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8006dec:	46c0      	nop			; (mov r8, r8)
 8006dee:	0018      	movs	r0, r3

08006df0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006df0:	f380 8810 	msr	PRIMASK, r0
 8006df4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006df6:	46c0      	nop			; (mov r8, r8)
	...

08006e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e00:	f3ef 8009 	mrs	r0, PSP
 8006e04:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <pxCurrentTCBConst>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	3820      	subs	r0, #32
 8006e0a:	6010      	str	r0, [r2, #0]
 8006e0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006e0e:	4644      	mov	r4, r8
 8006e10:	464d      	mov	r5, r9
 8006e12:	4656      	mov	r6, sl
 8006e14:	465f      	mov	r7, fp
 8006e16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006e18:	b508      	push	{r3, lr}
 8006e1a:	b672      	cpsid	i
 8006e1c:	f7ff f948 	bl	80060b0 <vTaskSwitchContext>
 8006e20:	b662      	cpsie	i
 8006e22:	bc0c      	pop	{r2, r3}
 8006e24:	6811      	ldr	r1, [r2, #0]
 8006e26:	6808      	ldr	r0, [r1, #0]
 8006e28:	3010      	adds	r0, #16
 8006e2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006e2c:	46a0      	mov	r8, r4
 8006e2e:	46a9      	mov	r9, r5
 8006e30:	46b2      	mov	sl, r6
 8006e32:	46bb      	mov	fp, r7
 8006e34:	f380 8809 	msr	PSP, r0
 8006e38:	3820      	subs	r0, #32
 8006e3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006e3c:	4718      	bx	r3
 8006e3e:	46c0      	nop			; (mov r8, r8)

08006e40 <pxCurrentTCBConst>:
 8006e40:	20002654 	.word	0x20002654
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006e44:	46c0      	nop			; (mov r8, r8)
 8006e46:	46c0      	nop			; (mov r8, r8)

08006e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e4e:	f7ff ffc9 	bl	8006de4 <ulSetInterruptMaskFromISR>
 8006e52:	0003      	movs	r3, r0
 8006e54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e56:	f7ff f877 	bl	8005f48 <xTaskIncrementTick>
 8006e5a:	1e03      	subs	r3, r0, #0
 8006e5c:	d003      	beq.n	8006e66 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006e5e:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <xPortSysTickHandler+0x30>)
 8006e60:	2280      	movs	r2, #128	; 0x80
 8006e62:	0552      	lsls	r2, r2, #21
 8006e64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f7ff ffc1 	bl	8006df0 <vClearInterruptMaskFromISR>
}
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b002      	add	sp, #8
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	e000ed04 	.word	0xe000ed04

08006e7c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <prvSetupTimerInterrupt+0x34>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006e86:	4b0b      	ldr	r3, [pc, #44]	; (8006eb4 <prvSetupTimerInterrupt+0x38>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <prvSetupTimerInterrupt+0x3c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	22fa      	movs	r2, #250	; 0xfa
 8006e92:	0091      	lsls	r1, r2, #2
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7f9 f937 	bl	8000108 <__udivsi3>
 8006e9a:	0003      	movs	r3, r0
 8006e9c:	001a      	movs	r2, r3
 8006e9e:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <prvSetupTimerInterrupt+0x40>)
 8006ea0:	3a01      	subs	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006ea4:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <prvSetupTimerInterrupt+0x34>)
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	601a      	str	r2, [r3, #0]
}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	e000e010 	.word	0xe000e010
 8006eb4:	e000e018 	.word	0xe000e018
 8006eb8:	20001c08 	.word	0x20001c08
 8006ebc:	e000e014 	.word	0xe000e014

08006ec0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006ecc:	f7fe ff96 	bl	8005dfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ed0:	4b49      	ldr	r3, [pc, #292]	; (8006ff8 <pvPortMalloc+0x138>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ed8:	f000 f8e0 	bl	800709c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006edc:	4b47      	ldr	r3, [pc, #284]	; (8006ffc <pvPortMalloc+0x13c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d000      	beq.n	8006ee8 <pvPortMalloc+0x28>
 8006ee6:	e079      	b.n	8006fdc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d012      	beq.n	8006f14 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8006eee:	2208      	movs	r2, #8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	189b      	adds	r3, r3, r2
 8006ef4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2207      	movs	r2, #7
 8006efa:	4013      	ands	r3, r2
 8006efc:	d00a      	beq.n	8006f14 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2207      	movs	r2, #7
 8006f02:	4393      	bics	r3, r2
 8006f04:	3308      	adds	r3, #8
 8006f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2207      	movs	r2, #7
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d001      	beq.n	8006f14 <pvPortMalloc+0x54>
 8006f10:	b672      	cpsid	i
 8006f12:	e7fe      	b.n	8006f12 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d060      	beq.n	8006fdc <pvPortMalloc+0x11c>
 8006f1a:	4b39      	ldr	r3, [pc, #228]	; (8007000 <pvPortMalloc+0x140>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d85b      	bhi.n	8006fdc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f24:	4b37      	ldr	r3, [pc, #220]	; (8007004 <pvPortMalloc+0x144>)
 8006f26:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006f28:	4b36      	ldr	r3, [pc, #216]	; (8007004 <pvPortMalloc+0x144>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f2e:	e004      	b.n	8006f3a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d903      	bls.n	8006f4c <pvPortMalloc+0x8c>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f1      	bne.n	8006f30 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f4c:	4b2a      	ldr	r3, [pc, #168]	; (8006ff8 <pvPortMalloc+0x138>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d042      	beq.n	8006fdc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	189b      	adds	r3, r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	2308      	movs	r3, #8
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d916      	bls.n	8006fa6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	18d3      	adds	r3, r2, r3
 8006f7e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2207      	movs	r2, #7
 8006f84:	4013      	ands	r3, r2
 8006f86:	d001      	beq.n	8006f8c <pvPortMalloc+0xcc>
 8006f88:	b672      	cpsid	i
 8006f8a:	e7fe      	b.n	8006f8a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	1ad2      	subs	r2, r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f000 f8db 	bl	800715c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fa6:	4b16      	ldr	r3, [pc, #88]	; (8007000 <pvPortMalloc+0x140>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	4b13      	ldr	r3, [pc, #76]	; (8007000 <pvPortMalloc+0x140>)
 8006fb2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fb4:	4b12      	ldr	r3, [pc, #72]	; (8007000 <pvPortMalloc+0x140>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	4b13      	ldr	r3, [pc, #76]	; (8007008 <pvPortMalloc+0x148>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d203      	bcs.n	8006fc8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <pvPortMalloc+0x140>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	4b10      	ldr	r3, [pc, #64]	; (8007008 <pvPortMalloc+0x148>)
 8006fc6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <pvPortMalloc+0x13c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fdc:	f7fe ff1a 	bl	8005e14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2207      	movs	r2, #7
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d001      	beq.n	8006fec <pvPortMalloc+0x12c>
 8006fe8:	b672      	cpsid	i
 8006fea:	e7fe      	b.n	8006fea <pvPortMalloc+0x12a>
	return pvReturn;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	0018      	movs	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	b006      	add	sp, #24
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	20003888 	.word	0x20003888
 8006ffc:	20003894 	.word	0x20003894
 8007000:	2000388c 	.word	0x2000388c
 8007004:	20003880 	.word	0x20003880
 8007008:	20003890 	.word	0x20003890

0800700c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d035      	beq.n	800708a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800701e:	2308      	movs	r3, #8
 8007020:	425b      	negs	r3, r3
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	18d3      	adds	r3, r2, r3
 8007026:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	4b18      	ldr	r3, [pc, #96]	; (8007094 <vPortFree+0x88>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4013      	ands	r3, r2
 8007036:	d101      	bne.n	800703c <vPortFree+0x30>
 8007038:	b672      	cpsid	i
 800703a:	e7fe      	b.n	800703a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <vPortFree+0x3c>
 8007044:	b672      	cpsid	i
 8007046:	e7fe      	b.n	8007046 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	4b11      	ldr	r3, [pc, #68]	; (8007094 <vPortFree+0x88>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4013      	ands	r3, r2
 8007052:	d01a      	beq.n	800708a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d116      	bne.n	800708a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <vPortFree+0x88>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	43db      	mvns	r3, r3
 8007066:	401a      	ands	r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800706c:	f7fe fec6 	bl	8005dfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	4b08      	ldr	r3, [pc, #32]	; (8007098 <vPortFree+0x8c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	18d2      	adds	r2, r2, r3
 800707a:	4b07      	ldr	r3, [pc, #28]	; (8007098 <vPortFree+0x8c>)
 800707c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	0018      	movs	r0, r3
 8007082:	f000 f86b 	bl	800715c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007086:	f7fe fec5 	bl	8005e14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	46bd      	mov	sp, r7
 800708e:	b004      	add	sp, #16
 8007090:	bd80      	pop	{r7, pc}
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	20003894 	.word	0x20003894
 8007098:	2000388c 	.word	0x2000388c

0800709c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070a2:	23c0      	movs	r3, #192	; 0xc0
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070a8:	4b26      	ldr	r3, [pc, #152]	; (8007144 <prvHeapInit+0xa8>)
 80070aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2207      	movs	r2, #7
 80070b0:	4013      	ands	r3, r2
 80070b2:	d00c      	beq.n	80070ce <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3307      	adds	r3, #7
 80070b8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2207      	movs	r2, #7
 80070be:	4393      	bics	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	1ad2      	subs	r2, r2, r3
 80070c8:	4b1e      	ldr	r3, [pc, #120]	; (8007144 <prvHeapInit+0xa8>)
 80070ca:	18d3      	adds	r3, r2, r3
 80070cc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070d2:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <prvHeapInit+0xac>)
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <prvHeapInit+0xac>)
 80070da:	2200      	movs	r2, #0
 80070dc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	18d3      	adds	r3, r2, r3
 80070e4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070e6:	2208      	movs	r2, #8
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2207      	movs	r2, #7
 80070f2:	4393      	bics	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4b14      	ldr	r3, [pc, #80]	; (800714c <prvHeapInit+0xb0>)
 80070fa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80070fc:	4b13      	ldr	r3, [pc, #76]	; (800714c <prvHeapInit+0xb0>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2200      	movs	r2, #0
 8007102:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <prvHeapInit+0xb0>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800711a:	4b0c      	ldr	r3, [pc, #48]	; (800714c <prvHeapInit+0xb0>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <prvHeapInit+0xb4>)
 8007128:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <prvHeapInit+0xb8>)
 8007130:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007132:	4b09      	ldr	r3, [pc, #36]	; (8007158 <prvHeapInit+0xbc>)
 8007134:	2280      	movs	r2, #128	; 0x80
 8007136:	0612      	lsls	r2, r2, #24
 8007138:	601a      	str	r2, [r3, #0]
}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	46bd      	mov	sp, r7
 800713e:	b004      	add	sp, #16
 8007140:	bd80      	pop	{r7, pc}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	20002c80 	.word	0x20002c80
 8007148:	20003880 	.word	0x20003880
 800714c:	20003888 	.word	0x20003888
 8007150:	20003890 	.word	0x20003890
 8007154:	2000388c 	.word	0x2000388c
 8007158:	20003894 	.word	0x20003894

0800715c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007164:	4b27      	ldr	r3, [pc, #156]	; (8007204 <prvInsertBlockIntoFreeList+0xa8>)
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e002      	b.n	8007170 <prvInsertBlockIntoFreeList+0x14>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	429a      	cmp	r2, r3
 8007178:	d8f7      	bhi.n	800716a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	18d3      	adds	r3, r2, r3
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d108      	bne.n	800719e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	18d2      	adds	r2, r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	18d2      	adds	r2, r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d118      	bne.n	80071e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <prvInsertBlockIntoFreeList+0xac>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d00d      	beq.n	80071da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	18d2      	adds	r2, r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	e008      	b.n	80071ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071da:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <prvInsertBlockIntoFreeList+0xac>)
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e003      	b.n	80071ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d002      	beq.n	80071fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b004      	add	sp, #16
 8007200:	bd80      	pop	{r7, pc}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	20003880 	.word	0x20003880
 8007208:	20003888 	.word	0x20003888

0800720c <__libc_init_array>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	2600      	movs	r6, #0
 8007210:	4d0c      	ldr	r5, [pc, #48]	; (8007244 <__libc_init_array+0x38>)
 8007212:	4c0d      	ldr	r4, [pc, #52]	; (8007248 <__libc_init_array+0x3c>)
 8007214:	1b64      	subs	r4, r4, r5
 8007216:	10a4      	asrs	r4, r4, #2
 8007218:	42a6      	cmp	r6, r4
 800721a:	d109      	bne.n	8007230 <__libc_init_array+0x24>
 800721c:	2600      	movs	r6, #0
 800721e:	f000 f8f9 	bl	8007414 <_init>
 8007222:	4d0a      	ldr	r5, [pc, #40]	; (800724c <__libc_init_array+0x40>)
 8007224:	4c0a      	ldr	r4, [pc, #40]	; (8007250 <__libc_init_array+0x44>)
 8007226:	1b64      	subs	r4, r4, r5
 8007228:	10a4      	asrs	r4, r4, #2
 800722a:	42a6      	cmp	r6, r4
 800722c:	d105      	bne.n	800723a <__libc_init_array+0x2e>
 800722e:	bd70      	pop	{r4, r5, r6, pc}
 8007230:	00b3      	lsls	r3, r6, #2
 8007232:	58eb      	ldr	r3, [r5, r3]
 8007234:	4798      	blx	r3
 8007236:	3601      	adds	r6, #1
 8007238:	e7ee      	b.n	8007218 <__libc_init_array+0xc>
 800723a:	00b3      	lsls	r3, r6, #2
 800723c:	58eb      	ldr	r3, [r5, r3]
 800723e:	4798      	blx	r3
 8007240:	3601      	adds	r6, #1
 8007242:	e7f2      	b.n	800722a <__libc_init_array+0x1e>
 8007244:	08007534 	.word	0x08007534
 8007248:	08007534 	.word	0x08007534
 800724c:	08007534 	.word	0x08007534
 8007250:	08007538 	.word	0x08007538

08007254 <__retarget_lock_acquire_recursive>:
 8007254:	4770      	bx	lr

08007256 <__retarget_lock_release_recursive>:
 8007256:	4770      	bx	lr

08007258 <memcpy>:
 8007258:	2300      	movs	r3, #0
 800725a:	b510      	push	{r4, lr}
 800725c:	429a      	cmp	r2, r3
 800725e:	d100      	bne.n	8007262 <memcpy+0xa>
 8007260:	bd10      	pop	{r4, pc}
 8007262:	5ccc      	ldrb	r4, [r1, r3]
 8007264:	54c4      	strb	r4, [r0, r3]
 8007266:	3301      	adds	r3, #1
 8007268:	e7f8      	b.n	800725c <memcpy+0x4>

0800726a <memset>:
 800726a:	0003      	movs	r3, r0
 800726c:	1882      	adds	r2, r0, r2
 800726e:	4293      	cmp	r3, r2
 8007270:	d100      	bne.n	8007274 <memset+0xa>
 8007272:	4770      	bx	lr
 8007274:	7019      	strb	r1, [r3, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	e7f9      	b.n	800726e <memset+0x4>

0800727a <cleanup_glue>:
 800727a:	b570      	push	{r4, r5, r6, lr}
 800727c:	000d      	movs	r5, r1
 800727e:	6809      	ldr	r1, [r1, #0]
 8007280:	0004      	movs	r4, r0
 8007282:	2900      	cmp	r1, #0
 8007284:	d001      	beq.n	800728a <cleanup_glue+0x10>
 8007286:	f7ff fff8 	bl	800727a <cleanup_glue>
 800728a:	0029      	movs	r1, r5
 800728c:	0020      	movs	r0, r4
 800728e:	f000 f877 	bl	8007380 <_free_r>
 8007292:	bd70      	pop	{r4, r5, r6, pc}

08007294 <_reclaim_reent>:
 8007294:	4b31      	ldr	r3, [pc, #196]	; (800735c <_reclaim_reent+0xc8>)
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	0004      	movs	r4, r0
 800729c:	4283      	cmp	r3, r0
 800729e:	d049      	beq.n	8007334 <_reclaim_reent+0xa0>
 80072a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <_reclaim_reent+0x28>
 80072a6:	2500      	movs	r5, #0
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	42ab      	cmp	r3, r5
 80072ac:	d147      	bne.n	800733e <_reclaim_reent+0xaa>
 80072ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b0:	6819      	ldr	r1, [r3, #0]
 80072b2:	2900      	cmp	r1, #0
 80072b4:	d002      	beq.n	80072bc <_reclaim_reent+0x28>
 80072b6:	0020      	movs	r0, r4
 80072b8:	f000 f862 	bl	8007380 <_free_r>
 80072bc:	6961      	ldr	r1, [r4, #20]
 80072be:	2900      	cmp	r1, #0
 80072c0:	d002      	beq.n	80072c8 <_reclaim_reent+0x34>
 80072c2:	0020      	movs	r0, r4
 80072c4:	f000 f85c 	bl	8007380 <_free_r>
 80072c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072ca:	2900      	cmp	r1, #0
 80072cc:	d002      	beq.n	80072d4 <_reclaim_reent+0x40>
 80072ce:	0020      	movs	r0, r4
 80072d0:	f000 f856 	bl	8007380 <_free_r>
 80072d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d002      	beq.n	80072e0 <_reclaim_reent+0x4c>
 80072da:	0020      	movs	r0, r4
 80072dc:	f000 f850 	bl	8007380 <_free_r>
 80072e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80072e2:	2900      	cmp	r1, #0
 80072e4:	d002      	beq.n	80072ec <_reclaim_reent+0x58>
 80072e6:	0020      	movs	r0, r4
 80072e8:	f000 f84a 	bl	8007380 <_free_r>
 80072ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80072ee:	2900      	cmp	r1, #0
 80072f0:	d002      	beq.n	80072f8 <_reclaim_reent+0x64>
 80072f2:	0020      	movs	r0, r4
 80072f4:	f000 f844 	bl	8007380 <_free_r>
 80072f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80072fa:	2900      	cmp	r1, #0
 80072fc:	d002      	beq.n	8007304 <_reclaim_reent+0x70>
 80072fe:	0020      	movs	r0, r4
 8007300:	f000 f83e 	bl	8007380 <_free_r>
 8007304:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007306:	2900      	cmp	r1, #0
 8007308:	d002      	beq.n	8007310 <_reclaim_reent+0x7c>
 800730a:	0020      	movs	r0, r4
 800730c:	f000 f838 	bl	8007380 <_free_r>
 8007310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007312:	2900      	cmp	r1, #0
 8007314:	d002      	beq.n	800731c <_reclaim_reent+0x88>
 8007316:	0020      	movs	r0, r4
 8007318:	f000 f832 	bl	8007380 <_free_r>
 800731c:	69a3      	ldr	r3, [r4, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d008      	beq.n	8007334 <_reclaim_reent+0xa0>
 8007322:	0020      	movs	r0, r4
 8007324:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007326:	4798      	blx	r3
 8007328:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800732a:	2900      	cmp	r1, #0
 800732c:	d002      	beq.n	8007334 <_reclaim_reent+0xa0>
 800732e:	0020      	movs	r0, r4
 8007330:	f7ff ffa3 	bl	800727a <cleanup_glue>
 8007334:	bd70      	pop	{r4, r5, r6, pc}
 8007336:	5949      	ldr	r1, [r1, r5]
 8007338:	2900      	cmp	r1, #0
 800733a:	d108      	bne.n	800734e <_reclaim_reent+0xba>
 800733c:	3504      	adds	r5, #4
 800733e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007340:	68d9      	ldr	r1, [r3, #12]
 8007342:	2d80      	cmp	r5, #128	; 0x80
 8007344:	d1f7      	bne.n	8007336 <_reclaim_reent+0xa2>
 8007346:	0020      	movs	r0, r4
 8007348:	f000 f81a 	bl	8007380 <_free_r>
 800734c:	e7af      	b.n	80072ae <_reclaim_reent+0x1a>
 800734e:	680e      	ldr	r6, [r1, #0]
 8007350:	0020      	movs	r0, r4
 8007352:	f000 f815 	bl	8007380 <_free_r>
 8007356:	0031      	movs	r1, r6
 8007358:	e7ee      	b.n	8007338 <_reclaim_reent+0xa4>
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	20001c18 	.word	0x20001c18

08007360 <__malloc_lock>:
 8007360:	b510      	push	{r4, lr}
 8007362:	4802      	ldr	r0, [pc, #8]	; (800736c <__malloc_lock+0xc>)
 8007364:	f7ff ff76 	bl	8007254 <__retarget_lock_acquire_recursive>
 8007368:	bd10      	pop	{r4, pc}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	20003898 	.word	0x20003898

08007370 <__malloc_unlock>:
 8007370:	b510      	push	{r4, lr}
 8007372:	4802      	ldr	r0, [pc, #8]	; (800737c <__malloc_unlock+0xc>)
 8007374:	f7ff ff6f 	bl	8007256 <__retarget_lock_release_recursive>
 8007378:	bd10      	pop	{r4, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	20003898 	.word	0x20003898

08007380 <_free_r>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	0005      	movs	r5, r0
 8007384:	2900      	cmp	r1, #0
 8007386:	d010      	beq.n	80073aa <_free_r+0x2a>
 8007388:	1f0c      	subs	r4, r1, #4
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	da00      	bge.n	8007392 <_free_r+0x12>
 8007390:	18e4      	adds	r4, r4, r3
 8007392:	0028      	movs	r0, r5
 8007394:	f7ff ffe4 	bl	8007360 <__malloc_lock>
 8007398:	4a1d      	ldr	r2, [pc, #116]	; (8007410 <_free_r+0x90>)
 800739a:	6813      	ldr	r3, [r2, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d105      	bne.n	80073ac <_free_r+0x2c>
 80073a0:	6063      	str	r3, [r4, #4]
 80073a2:	6014      	str	r4, [r2, #0]
 80073a4:	0028      	movs	r0, r5
 80073a6:	f7ff ffe3 	bl	8007370 <__malloc_unlock>
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	d908      	bls.n	80073c2 <_free_r+0x42>
 80073b0:	6821      	ldr	r1, [r4, #0]
 80073b2:	1860      	adds	r0, r4, r1
 80073b4:	4283      	cmp	r3, r0
 80073b6:	d1f3      	bne.n	80073a0 <_free_r+0x20>
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	1841      	adds	r1, r0, r1
 80073be:	6021      	str	r1, [r4, #0]
 80073c0:	e7ee      	b.n	80073a0 <_free_r+0x20>
 80073c2:	001a      	movs	r2, r3
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <_free_r+0x4e>
 80073ca:	42a3      	cmp	r3, r4
 80073cc:	d9f9      	bls.n	80073c2 <_free_r+0x42>
 80073ce:	6811      	ldr	r1, [r2, #0]
 80073d0:	1850      	adds	r0, r2, r1
 80073d2:	42a0      	cmp	r0, r4
 80073d4:	d10b      	bne.n	80073ee <_free_r+0x6e>
 80073d6:	6820      	ldr	r0, [r4, #0]
 80073d8:	1809      	adds	r1, r1, r0
 80073da:	1850      	adds	r0, r2, r1
 80073dc:	6011      	str	r1, [r2, #0]
 80073de:	4283      	cmp	r3, r0
 80073e0:	d1e0      	bne.n	80073a4 <_free_r+0x24>
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	1841      	adds	r1, r0, r1
 80073e8:	6011      	str	r1, [r2, #0]
 80073ea:	6053      	str	r3, [r2, #4]
 80073ec:	e7da      	b.n	80073a4 <_free_r+0x24>
 80073ee:	42a0      	cmp	r0, r4
 80073f0:	d902      	bls.n	80073f8 <_free_r+0x78>
 80073f2:	230c      	movs	r3, #12
 80073f4:	602b      	str	r3, [r5, #0]
 80073f6:	e7d5      	b.n	80073a4 <_free_r+0x24>
 80073f8:	6821      	ldr	r1, [r4, #0]
 80073fa:	1860      	adds	r0, r4, r1
 80073fc:	4283      	cmp	r3, r0
 80073fe:	d103      	bne.n	8007408 <_free_r+0x88>
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	1841      	adds	r1, r0, r1
 8007406:	6021      	str	r1, [r4, #0]
 8007408:	6063      	str	r3, [r4, #4]
 800740a:	6054      	str	r4, [r2, #4]
 800740c:	e7ca      	b.n	80073a4 <_free_r+0x24>
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	2000389c 	.word	0x2000389c

08007414 <_init>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr

08007420 <_fini>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr
